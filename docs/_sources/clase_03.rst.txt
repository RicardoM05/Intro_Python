.. _clase_03:

Clase 3: Tipos complejos y control de flujo
============================================


Diccionarios
------------

Los diccionarios son colecciones de objetos *no necesariamente
homogéneos* que no están ordenados y no se pueden identificar mediante
un índice (como L[3] para una lista) sino por un nombre o clave (llamado
**key**). Las claves pueden ser cualquier objeto inmutable (cadenas de
caracteres, números, tuplas) y los valores pueden ser cualquier tipo de
objeto. Las claves no se pueden repetir pero los valores sí.

Creación
~~~~~~~~

En la clase anterior vimos como definir listas

.. code:: python

    t01 = []
    t02 = list()
    t1 = list(range(1,11))
    t11 = list("hola")
    t2 = [2*i**2 for i in t1]

.. code:: python

    print(t01, t02)
    print(t1)
    print(t11)
    print(t2)


.. parsed-literal::

    [] []
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    ['h', 'o', 'l', 'a']
    [2, 8, 18, 32, 50, 72, 98, 128, 162, 200]


Creación de diccionarios

.. code:: python

    d01 = {}
    d02 = dict()
    d1 = {'S': 'Al', 'Z': 13, 'A': 27, 'M':26.98153863 }
    d2 = {'A': 27, 'M':26.98153863, 'S': 'Al', 'Z': 13 }
    d3 = dict( [('S','Al'), ('A',27), ('Z',13), ('M',26.98153863)])
    d4 = {n: n**2 for n in range(6)}

Acá estamos creando diccionarios de diferentes maneras:

-  ``d01`` y ``d02`` corresponden a diccionarios vacíos
-  ``d1`` y ``d2`` se crean utilizando el formato ``clave: valor``
-  ``d3`` se crea a partir de una lista de 2-tuplas donde el primer
   elemento de cada tupla es la clave y el segundo el valor
-  ``d4`` se crea mediante una “comprensión de diccionarios”

.. code:: python

    print(d01)
    print(d02)


.. parsed-literal::

    {}
    {}


.. code:: python

    print(d4)


.. parsed-literal::

    {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}


Notar que los diccionarios ``d1``, ``d2``, ``d3`` tienen las mismas
claves y valores, pero se crean con distinto orden

.. code:: python

    print(f"d4 = {d4}")
    print(f"{d4 = }")
    print(f"{d4=}")


.. parsed-literal::

    d4 = {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
    d4 = {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
    d4={0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}


.. code:: python

    print(f"(d1 == d2) = {d1 == d2}")


.. parsed-literal::

    (d1 == d2) = True


.. code:: python

    print(d1)
    print(f"{(d1 == d2) = }   y   {(d1 == d3) = }")


.. parsed-literal::

    {'S': 'Al', 'Z': 13, 'A': 27, 'M': 26.98153863}
    (d1 == d2) = True   y   (d1 == d3) = True


Como ocurre con otros tipos complejos, al realizar una asignación de un
diccionario a otro, no se crea un nuevo objeto

.. code:: python

    d5 = d2
    print(d5 == d2)
    print(d5 is d2)


.. parsed-literal::

    True
    True


y, por lo tanto, si modificamos uno de ellos también estamos modificando
el otro.

Para realizar una copia independiente utilizamos el método ``copy()``:

.. code:: python

    d6 = d2.copy()
    print(d6 == d2)
    print(d6 is d2)


.. parsed-literal::

    True
    False


Selección de elementos
~~~~~~~~~~~~~~~~~~~~~~

Para seleccionar un elemento de un diccionario, se lo llama por su clave
(``key``)

.. code:: python

    d1['A']




.. parsed-literal::

    27



.. code:: python

    d1['M']




.. parsed-literal::

    26.98153863



.. code:: python

    d1["S"]




.. parsed-literal::

    'Al'



Un uso muy común de los diccionarios es la descripción de estructuras
complejas, donde cada campo tiene un significado, como podría ser por
ejemplo una agenda

.. code:: python

    entrada = {'nombre':'Juan', 
          'apellido': 'García', 
          'edad': 109, 
          'dirección': '''Av Bustillo 9500,''', 
          'cod':8400,  
          'ciudad': "Bariloche"}

.. code:: python

    print ('Nombre: ', entrada['nombre'])
    print ('\nDiccionario:')
    print ((len("Diccionario:")*"-")+"\n")
    print (entrada)


.. parsed-literal::

    Nombre:  Juan
    
    Diccionario:
    ------------
    
    {'nombre': 'Juan', 'apellido': 'García', 'edad': 109, 'dirección': 'Av Bustillo 9500,', 'cod': 8400, 'ciudad': 'Bariloche'}


.. code:: python

    entrada['cod']




.. parsed-literal::

    8400



Un diccionario puede tener elementos de distinto tipo, tanto en claves
como en valores

.. code:: python

    entrada




.. parsed-literal::

    {'nombre': 'Juan',
     'apellido': 'García',
     'edad': 109,
     'dirección': 'Av Bustillo 9500,',
     'cod': 8400,
     'ciudad': 'Bariloche'}



.. code:: python

    entrada[1] = [2,3]         # Agregamos el campo `1`

.. code:: python

    entrada




.. parsed-literal::

    {'nombre': 'Juan',
     'apellido': 'García',
     'edad': 109,
     'dirección': 'Av Bustillo 9500,',
     'cod': 8400,
     'ciudad': 'Bariloche',
     1: [2, 3]}



Acceso a claves y valores
~~~~~~~~~~~~~~~~~~~~~~~~~

Los diccionarios pueden pensarse como pares *key*, *valor*. Para obtener
todas las claves (*keys*), valores, o pares (clave, valor) usamos:

.. code:: python

    print ('\n\nKeys:')
    print (list(entrada.keys()))
    print ('\n\nValues:')
    print (list(entrada.values()))
    print ('\n\nItems:')
    print (list(entrada.items()))


.. parsed-literal::

    
    
    Keys:
    ['nombre', 'apellido', 'edad', 'dirección', 'cod', 'ciudad', 1]
    
    
    Values:
    ['Juan', 'García', 109, 'Av Bustillo 9500,', 8400, 'Bariloche', [2, 3]]
    
    
    Items:
    [('nombre', 'Juan'), ('apellido', 'García'), ('edad', 109), ('dirección', 'Av Bustillo 9500,'), ('cod', 8400), ('ciudad', 'Bariloche'), (1, [2, 3])]


.. code:: python

    it = list(entrada.items())
    it




.. parsed-literal::

    [('nombre', 'Juan'),
     ('apellido', 'García'),
     ('edad', 109),
     ('dirección', 'Av Bustillo 9500,'),
     ('cod', 8400),
     ('ciudad', 'Bariloche'),
     (1, [2, 3])]



.. code:: python

    dict(it)




.. parsed-literal::

    {'nombre': 'Juan',
     'apellido': 'García',
     'edad': 109,
     'dirección': 'Av Bustillo 9500,',
     'cod': 8400,
     'ciudad': 'Bariloche',
     1: [2, 3]}



Modificación o adición de campos
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Si queremos modificar un campo o agregar uno nuevo simplemente asignamos
un nuevo valor como lo haríamos para una variable.

.. code:: python

    entrada['tel'] = {'cel':1213, 'fijo':23848}

.. code:: python

    entrada




.. parsed-literal::

    {'nombre': 'Juan',
     'apellido': 'García',
     'edad': 109,
     'dirección': 'Av Bustillo 9500,',
     'cod': 8400,
     'ciudad': 'Bariloche',
     1: [2, 3],
     'tel': {'cel': 1213, 'fijo': 23848}}



.. code:: python

    print(entrada['tel']['cel'])
    telefono = entrada['tel']
    print(telefono)
    print(telefono['cel'])


.. parsed-literal::

    1213
    {'cel': 1213, 'fijo': 23848}
    1213


En el siguiente ejemplo agregamos un nuevo campo indicando el “país” y
modificamos el valor de la ciudad:

.. code:: python

    entrada['pais']= 'Argentina'
    entrada['ciudad']= "San Carlos de Bariloche"
    # imprimimos
    print ('\n\nDatos:\n')
    print (entrada['nombre'] + ' ' + entrada['apellido'])
    print (entrada['dirección'])
    print (entrada['ciudad'])
    print (entrada['pais'])


.. parsed-literal::

    
    
    Datos:
    
    José García
    Av Bustillo 9500,
    San Carlos de Bariloche
    Argentina


.. code:: python

    d2 = {'provincia': 'Río Negro', 'nombre':'José'}
    print (60*'*'+'\nOtro diccionario:')
    print ('d2=',d2)
    print (60*'*')


.. parsed-literal::

    ************************************************************
    Otro diccionario:
    d2= {'provincia': 'Río Negro', 'nombre': 'José'}
    ************************************************************


Vimos que se pueden asignar campos a diccionarios. También se pueden
completar utilizando otro diccionario, usando el método ``update()``

.. code:: python

    print (f'{entrada = }')
    entrada.update(d2)  # Corregimos valores o agregamos nuevos si no existen
    print ("\nNuevo valor:\n")
    print (f'{entrada = }')


.. parsed-literal::

    entrada = {'nombre': 'Juan', 'apellido': 'García', 'edad': 109, 'dirección': 'Av Bustillo 9500,', 'cod': 8400, 'ciudad': 'San Carlos de Bariloche', 1: [2, 3], 'tel': {'cel': 1213, 'fijo': 23848}, 'pais': 'Argentina'}
    
    Nuevo valor:
    
    entrada = {'nombre': 'José', 'apellido': 'García', 'edad': 109, 'dirección': 'Av Bustillo 9500,', 'cod': 8400, 'ciudad': 'San Carlos de Bariloche', 1: [2, 3], 'tel': {'cel': 1213, 'fijo': 23848}, 'pais': 'Argentina', 'provincia': 'Río Negro'}


.. code:: python

    # Para borrar un campo de un diccionario usamos `del`
    print (f"{'provincia' in entrada = }")
    del entrada['provincia']
    print (f"{'provincia' in entrada = }")


.. parsed-literal::

    'provincia' in entrada = True
    'provincia' in entrada = False


El método ``pop`` nos devuelve un valor y lo borra del diccionario.

.. code:: python

    entrada




.. parsed-literal::

    {'nombre': 'José',
     'apellido': 'García',
     'edad': 109,
     'dirección': 'Av Bustillo 9500,',
     'cod': 8400,
     'ciudad': 'San Carlos de Bariloche',
     1: [2, 3],
     'tel': {'cel': 1213, 'fijo': 23848},
     'pais': 'Argentina'}



.. code:: python

    entrada.pop(1)




.. parsed-literal::

    [2, 3]



.. code:: python

    entrada




.. parsed-literal::

    {'nombre': 'José',
     'apellido': 'García',
     'edad': 109,
     'dirección': 'Av Bustillo 9500,',
     'cod': 8400,
     'ciudad': 'San Carlos de Bariloche',
     'tel': {'cel': 1213, 'fijo': 23848},
     'pais': 'Argentina'}



Conjuntos
---------

Los conjuntos (``set()``) son grupos de claves únicas e inmutables.

.. code:: python

    mamiferos = {'perro', 'gato', 'león', 'perro'}
    domesticos = {'perro', 'gato', 'gallina', 'ganso'}
    aves = {"chimango", "bandurria", 'gallina', 'cóndor', 'ganso'}

.. code:: python

    mamiferos




.. parsed-literal::

    {'gato', 'león', 'perro'}



Para crear un conjunto vacío utilizamos la palabra ``set()``. Notar que:
``conj = {}`` crearía un diccionario:

.. code:: python

    conj = set()
    print(conj, type(conj))


.. parsed-literal::

    set() <class 'set'>


Operaciones entre conjuntos
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    mamiferos.intersection(domesticos)




.. parsed-literal::

    {'gato', 'perro'}



.. code:: python

    # También se puede utilizar el operador "&" para la intersección
    mamiferos & domesticos




.. parsed-literal::

    {'gato', 'perro'}



.. code:: python

    mamiferos.union(domesticos)




.. parsed-literal::

    {'gallina', 'ganso', 'gato', 'león', 'perro'}



.. code:: python

    # También se puede utilizar el operador "|" para la unión
    mamiferos | domesticos




.. parsed-literal::

    {'gallina', 'ganso', 'gato', 'león', 'perro'}



.. code:: python

    aves.difference(domesticos)




.. parsed-literal::

    {'bandurria', 'chimango', 'cóndor'}



.. code:: python

    # También se puede utilizar el operador "-" para la diferencia
    aves - domesticos




.. parsed-literal::

    {'bandurria', 'chimango', 'cóndor'}



.. code:: python

    domesticos - aves




.. parsed-literal::

    {'gato', 'perro'}



Modificar conjuntos
~~~~~~~~~~~~~~~~~~~

Para agregar o borrar elementos a un conjunto usamos los métodos:
``add``, ``update``, y ``remove``

.. code:: python

    c = set([1, 2, 2, 3, 5])
    c




.. parsed-literal::

    {1, 2, 3, 5}



.. code:: python

    c.add(4)

.. code:: python

    c




.. parsed-literal::

    {1, 2, 3, 4, 5}



.. code:: python

    c.add(4)
    c




.. parsed-literal::

    {1, 2, 3, 4, 5}



.. code:: python

    c.update((8,7,6))

.. code:: python

    c




.. parsed-literal::

    {1, 2, 3, 4, 5, 6, 7, 8}



Para remover un elemento que pertenece al conjunto usamos ``remove()``

.. code:: python

    c.remove(2)

.. code:: python

    c




.. parsed-literal::

    {1, 3, 4, 5, 6, 7, 8}



.. code:: python

    c.remove(2)


::


    ---------------------------------------------------------------------------

    KeyError                                  Traceback (most recent call last)

    Cell In[58], line 1
    ----> 1 c.remove(2)


    KeyError: 2


pero da un error si el elemento que quermos remover no pertenece al
conjunto. Si no sabemos si el elemento existe, podemos usar el método
``discard()``

.. code:: python

    c.discard(2)

.. code:: python

    c




.. parsed-literal::

    {1, 3, 4, 5, 6, 7, 8}



--------------

Ejercicios 03 (a)
-----------------

1. Escribir, utilizando conjuntos (``set``), funciones que tomen como
   argumento un string y:

   1. Retorne verdadero si el argumento tiene algún número, Falso en
      otro caso,
   2. Retorne verdadero si el argumento está formado por todos números,
      Falso en otro caso.


