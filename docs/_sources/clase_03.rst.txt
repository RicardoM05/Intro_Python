.. _clase_03:

Clase 3: Tipos complejos y control de flujo
============================================


Diccionarios
------------

Los diccionarios son colecciones de objetos *en principio heterogéneos*
que no están ordenados y no se refieren por índice (como L[3]) sino por
un nombre o clave (llamado **key**). Las claves pueden ser cualquier
objeto inmutable (cadenas, numeros, tuplas) y los valores pueden ser
cualquier tipo de objeto. Las claves no se pueden repetir pero los
valores sí.

Creación
~~~~~~~~

.. code:: python

    t1 = list(range(1,11))
    t2 = [2*i**2 for i in t1]

.. code:: python

    d01 = {}
    d02 = dict()
    d1 = {'S': 'Al', 'Z': 13, 'A': 27, 'M':26.98153863 }
    d2 = {'A': 27, 'M':26.98153863, 'S': 'Al', 'Z': 13 }
    d3 = dict( [('S','Al'), ('A',27), ('Z',13), ('M',26.98153863)])
    d4 = {n: n**2 for n in range(6)}

Acá estamos creando diccionarios de diferentes maneras:

-  ``d01`` y ``d02`` corresponden a diccionarios vacíos
-  ``d1`` y ``d2`` se crean utilizando el formato ``clave: valor``
-  ``d3`` se crea a partir de una lista de 2-tuplas donde el primer
   elemento de cada tupla es la clave y el segundo el valor
-  ``d4`` se crea mediante una “comprensión de diccionarios”

.. code:: python

    print(d01)
    print(d02)


.. parsed-literal::

    {}
    {}


.. code:: python

    print(d4)


.. parsed-literal::

    {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}


Notar que los diccionarios ``d1``, ``d2``, ``d3`` tienen las mismas
claves y valores, pero se crean con distinto orden

.. code:: python

    print(d1)
    print(f"{(d1 == d2) = }   y   {(d1 == d3) = }")


.. parsed-literal::

    {'S': 'Al', 'Z': 13, 'A': 27, 'M': 26.98153863}
    (d1 == d2) = True   y   (d1 == d3) = True


Como ocurre con otros tipos complejos, al realizar una asignación de un
diccionario a otro, no se crea un nuevo objeto

.. code:: python

    d5 = d2
    print(d5 == d2)
    print(d5 is d2)


.. parsed-literal::

    True
    True


.. code:: python

    d1 is d2




.. parsed-literal::

    False



y, por lo tanto, si modificamos uno de ellos también estamos modificando
el otro.

Para realizar una copia independiente utilizamos el método ``copy()``:

.. code:: python

    d6 = d2.copy()
    print(d6 == d2)
    print(d6 is d2)


.. parsed-literal::

    True
    False


Selección de elementos
~~~~~~~~~~~~~~~~~~~~~~

Para seleccionar un elemento de un diccionario, se lo llama por su clave
(``key``)

.. code:: python

    d1['A']




.. parsed-literal::

    27



.. code:: python

    d1['M']




.. parsed-literal::

    26.98153863



.. code:: python

    d1["S"]




.. parsed-literal::

    'Al'



Un uso muy común de los diccionarios es la descripción de estructuras
complejas, donde cada campo tiene un significado, como podría ser por
ejemplo una agenda

.. code:: python

    entrada = {'nombre':'Juan', 
          'apellido': 'García', 
          'edad': 109, 
          'dirección': '''Av Bustillo 9500,''', 
          'cod':8400,  
          'ciudad': "Bariloche"}

.. code:: python

    print ('Nombre: ', entrada['nombre'])
    print ('\nDiccionario:')
    print ((len("Diccionario:")*"-")+"\n")
    print (entrada)


.. parsed-literal::

    Nombre:  Juan
    
    Diccionario:
    ------------
    
    {'nombre': 'Juan', 'apellido': 'García', 'edad': 109, 'dirección': 'Av Bustillo 9500,', 'cod': 8400, 'ciudad': 'Bariloche'}


.. code:: python

    entrada['cod']




.. parsed-literal::

    8400



.. code:: python

    entrada['tel'] = {'cel':1213, 'fijo':23848}

.. code:: python

    entrada




.. parsed-literal::

    {'nombre': 'Juan',
     'apellido': 'García',
     'edad': 109,
     'dirección': 'Av Bustillo 9500,',
     'cod': 8400,
     'ciudad': 'Bariloche',
     'tel': {'cel': 1213, 'fijo': 23848}}



Un diccionario puede tener elementos de distinto tipo, tanto en claves
como en valores

.. code:: python

    telefono = entrada['tel']
    print(telefono['cel'])
    print(entrada['tel']['cel'])


.. parsed-literal::

    1213
    1213


Acceso a claves y valores
~~~~~~~~~~~~~~~~~~~~~~~~~

Los diccionarios pueden pensarse como pares *key*, *valor*. Para obtener
todas las claves (*keys*), valores, o pares (clave, valor) usamos:

.. code:: python

    print ('\n\nKeys:')
    print (list(entrada.keys()))
    print ('\n\nValues:')
    print (list(entrada.values()))
    print ('\n\nItems:')
    print (list(entrada.items()))


.. parsed-literal::

    
    
    Keys:
    ['nombre', 'apellido', 'edad', 'dirección', 'cod', 'ciudad', 'tel']
    
    
    Values:
    ['Juan', 'García', 109, 'Av Bustillo 9500,', 8400, 'Bariloche', {'cel': 1213, 'fijo': 23848}]
    
    
    Items:
    [('nombre', 'Juan'), ('apellido', 'García'), ('edad', 109), ('dirección', 'Av Bustillo 9500,'), ('cod', 8400), ('ciudad', 'Bariloche'), ('tel', {'cel': 1213, 'fijo': 23848})]


.. code:: python

    it = list(entrada.items())
    it




.. parsed-literal::

    [('nombre', 'Juan'),
     ('apellido', 'García'),
     ('edad', 109),
     ('dirección', 'Av Bustillo 9500,'),
     ('cod', 8400),
     ('ciudad', 'Bariloche'),
     ('tel', {'cel': 1213, 'fijo': 23848})]



.. code:: python

    dict(it)




.. parsed-literal::

    {'nombre': 'Juan',
     'apellido': 'García',
     'edad': 109,
     'dirección': 'Av Bustillo 9500,',
     'cod': 8400,
     'ciudad': 'Bariloche',
     'tel': {'cel': 1213, 'fijo': 23848}}



Modificación o adición de campos
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Si queremos modificar un campo o agregar uno nuevo simplemente asignamos
un nuevo valor como lo haríamos para una variable. En el siguiente
ejemplo agregamos un nuevo campo indicando el “pais” y modificamos el
valor de la ciudad:

.. code:: python

    entrada['pais']= 'Argentina'
    entrada['ciudad']= "San Carlos de Bariloche"
    # imprimimos
    print ('\n\nDatos:\n')
    print (entrada['nombre'] + ' ' + entrada['apellido'])
    print (entrada[u'dirección'])
    print (entrada['ciudad'])
    print (entrada['pais'])


.. parsed-literal::

    
    
    Datos:
    
    Juan García
    Av Bustillo 9500,
    San Carlos de Bariloche
    Argentina


.. code:: python

    d2 = {'provincia': 'Río Negro', 'nombre':'José'}
    print (60*'*'+'\nOtro diccionario:')
    print ('d2=',d2)
    print (60*'*')


.. parsed-literal::

    ************************************************************
    Otro diccionario:
    d2= {'provincia': 'Río Negro', 'nombre': 'José'}
    ************************************************************


Vimos que se pueden asignar campos a diccionarios. También se pueden
completar utilizando otro diccionario, usando el método ``update()``

.. code:: python

    print (f'{entrada = }')
    entrada.update(d2)  # Corregimos valores o agregamos nuevos si no existen
    print ("\nNuevo valor:\n")
    print (f'{entrada = }')


.. parsed-literal::

    entrada = {'nombre': 'José', 'apellido': 'García', 'edad': 109, 'dirección': 'Av Bustillo 9500,', 'cod': 8400, 'ciudad': 'San Carlos de Bariloche', 'tel': {'cel': 1213, 'fijo': 23848}, 'pais': 'Argentina'}
    
    Nuevo valor:
    
    entrada = {'nombre': 'José', 'apellido': 'García', 'edad': 109, 'dirección': 'Av Bustillo 9500,', 'cod': 8400, 'ciudad': 'San Carlos de Bariloche', 'tel': {'cel': 1213, 'fijo': 23848}, 'pais': 'Argentina', 'provincia': 'Río Negro'}


.. code:: python

    # Para borrar un campo de un diccionario usamos `del`
    print (f"{'provincia' in entrada = }")
    if 'provincia' in entrada:
      del entrada['provincia']
    print (f"{'provincia' in entrada = }")


.. parsed-literal::

    'provincia' in entrada = True
    'provincia' in entrada = False


El método ``pop`` nos devuelve un valor y lo borra del diccionario.

.. code:: python

    entrada[1] = [2,3]         # Agregamos el campo `1`

.. code:: python

    entrada




.. parsed-literal::

    {'nombre': 'José',
     'apellido': 'García',
     'edad': 109,
     'dirección': 'Av Bustillo 9500,',
     'cod': 8400,
     'ciudad': 'San Carlos de Bariloche',
     'tel': {'cel': 1213, 'fijo': 23848},
     'pais': 'Argentina',
     1: [2, 3]}



.. code:: python

    entrada.pop(1)




.. parsed-literal::

    [2, 3]



.. code:: python

    entrada




.. parsed-literal::

    {'nombre': 'José',
     'apellido': 'García',
     'edad': 109,
     'dirección': 'Av Bustillo 9500,',
     'cod': 8400,
     'ciudad': 'San Carlos de Bariloche',
     'tel': {'cel': 1213, 'fijo': 23848},
     'pais': 'Argentina'}



Conjuntos
---------

Los conjuntos (``set()``) son grupos de claves únicas e inmutables.

.. code:: python

    mamiferos = {'perro', 'gato', 'león', 'perro'}
    domesticos = {'perro', 'gato', 'gallina', 'ganso'}
    aves = {"chimango", "bandurria", 'gallina', 'cóndor', 'ganso'}

.. code:: python

    mamiferos




.. parsed-literal::

    {'gato', 'león', 'perro'}



Para crear un conjunto vacío utilizamos la palabra ``set()``. Notar que:
``conj = {}`` crearía un diccionario:

.. code:: python

    conj = set()
    print(conj, type(conj))


.. parsed-literal::

    set() <class 'set'>


Operaciones entre conjuntos
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    mamiferos.intersection(domesticos)




.. parsed-literal::

    {'gato', 'perro'}



.. code:: python

    # También se puede utilizar el operador "&" para la intersección
    mamiferos & domesticos




.. parsed-literal::

    {'gato', 'perro'}



.. code:: python

    mamiferos.union(domesticos)




.. parsed-literal::

    {'gallina', 'ganso', 'gato', 'león', 'perro'}



.. code:: python

    # También se puede utilizar el operador "|" para la unión
    mamiferos | domesticos




.. parsed-literal::

    {'gallina', 'ganso', 'gato', 'león', 'perro'}



.. code:: python

    aves.difference(domesticos)




.. parsed-literal::

    {'bandurria', 'chimango', 'cóndor'}



.. code:: python

    # También se puede utilizar el operador "-" para la diferencia
    aves - domesticos




.. parsed-literal::

    {'bandurria', 'chimango', 'cóndor'}



.. code:: python

    domesticos - aves




.. parsed-literal::

    {'gato', 'perro'}



Modificar conjuntos
~~~~~~~~~~~~~~~~~~~

Para agregar o borrar elementos a un conjunto usamos los métodos:
``add``, ``update``, y ``remove``

.. code:: python

    c = set([1, 2, 2, 3, 5])
    c




.. parsed-literal::

    {1, 2, 3, 5}



.. code:: python

    c.add(4)

.. code:: python

    c




.. parsed-literal::

    {1, 2, 3, 4, 5}



.. code:: python

    c.add(4)
    c




.. parsed-literal::

    {1, 2, 3, 4, 5}



.. code:: python

    c.update((8,7,6))

.. code:: python

    c




.. parsed-literal::

    {1, 2, 3, 4, 5, 6, 7, 8}



Para remover un elemento que pertenece al conjunto usamos ``remove()``

.. code:: python

    c.remove(2)

.. code:: python

    c




.. parsed-literal::

    {1, 3, 4, 5, 6, 7, 8}



.. code:: python

    c.remove(2)


::


    

    KeyErrorTraceback (most recent call last)

    <ipython-input-52-b4d051d0e502> in <module>
    ----> 1 c.remove(2)
    

    KeyError: 2


pero da un error si el elemento que quermos remover no pertenece al
conjunto. Si no sabemos si el elemento existe, podemos usar el método
``discard()``

.. code:: python

    c.discard(2)

.. code:: python

    c




.. parsed-literal::

    {1, 3, 4, 5, 6, 7, 8}



Control de flujo
----------------

if/elif/else
~~~~~~~~~~~~

En todo lenguaje necesitamos controlar el flujo de una ejecución segun
una condición Verdadero/Falso (booleana). *Si (condicion) es verdadero
hacé (bloque A); Sino hacé (Bloque B)*. En pseudo código:

::

       Si condición 1:
           bloque A
       sino y condición 2:
           bloque B
       sino:
           bloque C

y en Python es muy parecido!

.. code:: python

       if condición_1:
         bloque A
       elif condicion_2:
         bloque B
       elif condicion_3:
         bloque C
       else:
         Bloque final

En un ``if``, la conversión a tipo *boolean* es implícita. El tipo
``None`` (vacío), el ``0``, una secuencia (lista, tupla, string) (o
conjunto o diccionario, que ya veremos) vacía siempre evalua a
``False``. Cualquier otro objeto evalua a ``True``.

Podemos tener multiples condiciones. Se ejecutará el primer bloque cuya
condición sea verdadera, o en su defecto el bloque ``else``. Esto es
equivalente a la sentencia ``switch`` de otros lenguajes.

.. code:: python

    Nota = 7
    if Nota >= 8:
        print ("Aprobó cómodo, felicidades!")
    elif 6 <= Nota < 8:
        print ("Bueno, al menos aprobó!")
    elif 4 <= Nota < 6 :
        print ("Bastante bien, pero no le alcanzó")
    else:
        print("Siga participando!")


.. parsed-literal::

    Bueno, al menos aprobó!


Iteraciones
~~~~~~~~~~~

Sentencia for
^^^^^^^^^^^^^

Otro elemento de control es el que permite *iterar* sobre una secuencia
(o *“iterador”*). Obtener cada elemento para hacer algo. En Python se
logra con la sentencia ``for``. En lugar de iterar sobre una condición
aritmética hasta que se cumpla una condición (como en C o en Fortran) en
Python la sentencia ``for`` itera sobre los ítems de una secuencia en
forma ordenada

.. code:: python

    for elemento in range(10):
        print(elemento, end=', ')



.. parsed-literal::

    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 

Veamos otro ejemplo, iterando sobre una lista:

.. code:: python

    Lista = ['auto', 'casa', "perro", "gato", "árbol", "lechuza", "banana"]
    for L in Lista:
      print(L)


.. parsed-literal::

    auto
    casa
    perro
    gato
    árbol
    lechuza
    banana


En estos ejemplos, en cada iteración ``L`` toma sucesivamente los
valores de ``Lista``. La primera vez es ``L='auto'``, la segunda
``L='casa'``, … El cuerpo del *loop* ``for``, como todos los bloques en
**Python** está definido por la **indentación**. La última línea está
fuera del loop y se ejecuta al terminar todas las iteraciones del
``for``.

.. code:: python

    for L in Lista:
        print(f'En la palabra {L} hay {L.count("a")} letras "a"')
        
    print(f'\nLa palabra más larga es {max(Lista, key=len)}')


.. parsed-literal::

    En la palabra auto hay 1 letras "a"
    En la palabra casa hay 2 letras "a"
    En la palabra perro hay 0 letras "a"
    En la palabra gato hay 1 letras "a"
    En la palabra árbol hay 0 letras "a"
    En la palabra lechuza hay 1 letras "a"
    En la palabra banana hay 3 letras "a"
    
    La palabra más larga es lechuza


Otro ejemplo:

.. code:: python

    suma = 0
    for elemento in range(11):
      suma += elemento
      print("x={},  suma parcial={}".format(elemento, suma))
    print ('Suma total =', suma)


.. parsed-literal::

    x=0,  suma parcial=0
    x=1,  suma parcial=1
    x=2,  suma parcial=3
    x=3,  suma parcial=6
    x=4,  suma parcial=10
    x=5,  suma parcial=15
    x=6,  suma parcial=21
    x=7,  suma parcial=28
    x=8,  suma parcial=36
    x=9,  suma parcial=45
    x=10,  suma parcial=55
    Suma total = 55


Notar que utilizamos el operador asignación de suma: ``+=``.

.. code:: python

   suma += elemento

es equivalente a:

.. code:: python

   suma = suma + elemento

que corresponde a realizar la suma de la derecha, y el resultado
asignarlo a la variable de la izquierda.

Por supuesto, para obtener la suma anterior podemos simplemente usar las
funciones de python:

.. code:: python

    print (sum(range(11))) # El ejemplo anterior puede escribirse usando sum y range


.. parsed-literal::

    55


Loops: ``for``, ``enumerate``, ``continue``, ``break``, ``else``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Veamos otras características del bloque ``for``.

.. code:: python

    suma = 0
    cuadrados = []
    for i,elem in enumerate(range(3,30)):
      if elem % 2:       # Si resto (%) es diferente de cero -> Impares
        continue
      suma += elem**2
      cuadrados.append(elem**2)
      print (i, elem, elem**2, suma)   # Imprimimos el índice y el elem al cuadrado
    print ("sumatoria de números pares al cuadrado entre 3 y 20:", suma)
    print ('cuadrados= ', cuadrados)


.. parsed-literal::

    1 4 16 16
    3 6 36 52
    5 8 64 116
    7 10 100 216
    9 12 144 360
    11 14 196 556
    13 16 256 812
    15 18 324 1136
    17 20 400 1536
    19 22 484 2020
    21 24 576 2596
    23 26 676 3272
    25 28 784 4056
    sumatoria de números pares al cuadrado entre 3 y 20: 4056
    cuadrados=  [16, 36, 64, 100, 144, 196, 256, 324, 400, 484, 576, 676, 784]


**Puntos a notar:**

-  Inicializamos una variable entera en cero y una lista vacía
-  ``range(3,30)`` nos da consecutivamente los números entre 3 y 29 en
   cada iteración.
-  ``enumerate`` nos permite iterar sobre algo, agregando un contador
   automático.
-  La línea condicional ``if elem % 2:`` es equivalente a
   ``if (elem % 2) != 0:`` y es verdadero si ``elem`` no es divisible
   por 2 (número impar)
-  La sentencia ``continue`` hace que se omita la ejecución del resto
   del bloque por esta iteración
-  El método ``append`` agrega el elemento a la lista

Antes de seguir veamos otro ejemplo de uso de ``enumerate``.
Consideremos una iteración sobre una lista como haríamos normalmente en
otros lenguajes:

.. code:: python

    L = "I've had a perfectly wonderful evening.  But this wasn't it.".split()

.. code:: python

    L




.. parsed-literal::

    ["I've",
     'had',
     'a',
     'perfectly',
     'wonderful',
     'evening.',
     'But',
     'this',
     "wasn't",
     'it.']



.. code:: python

    for j in range(len(L)):
      print(f'Índice: {j} -> {L[j]} ({len(L[j])} caracteres)')


.. parsed-literal::

    Índice: 0 -> I've (4 caracteres)
    Índice: 1 -> had (3 caracteres)
    Índice: 2 -> a (1 caracteres)
    Índice: 3 -> perfectly (9 caracteres)
    Índice: 4 -> wonderful (9 caracteres)
    Índice: 5 -> evening. (8 caracteres)
    Índice: 6 -> But (3 caracteres)
    Índice: 7 -> this (4 caracteres)
    Índice: 8 -> wasn't (6 caracteres)
    Índice: 9 -> it. (3 caracteres)


Si bien esta es una solución al problema. Python ofrece la función
enumerate que agrega un contador automático

.. code:: python

    for j, elem in enumerate(L):
      print(f'Índice: {j} -> {elem} ({len(elem)} caracteres)')


.. parsed-literal::

    Índice: 0 -> I've (4 caracteres)
    Índice: 1 -> had (3 caracteres)
    Índice: 2 -> a (1 caracteres)
    Índice: 3 -> perfectly (9 caracteres)
    Índice: 4 -> wonderful (9 caracteres)
    Índice: 5 -> evening. (8 caracteres)
    Índice: 6 -> But (3 caracteres)
    Índice: 7 -> this (4 caracteres)
    Índice: 8 -> wasn't (6 caracteres)
    Índice: 9 -> it. (3 caracteres)


Veamos otro ejemplo, que puede encontrarse en la `documentación
oficial <https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops>`__:

.. code:: python

    for n in range(2, 20):
      for x in range(2, n):
        if n % x == 0:
          print( f'{n:2d} = {x} x {n//x}')
          break
      else:
         # Salió sin encontrar un factor, entonces ...
         print('{:2d} es un número primo'.format(n))



.. parsed-literal::

     2 es un número primo
     3 es un número primo
     4 = 2 x 2
     5 es un número primo
     6 = 2 x 3
     7 es un número primo
     8 = 2 x 4
     9 = 3 x 3
    10 = 2 x 5
    11 es un número primo
    12 = 2 x 6
    13 es un número primo
    14 = 2 x 7
    15 = 3 x 5
    16 = 2 x 8
    17 es un número primo
    18 = 2 x 9
    19 es un número primo


**Puntos a notar:**

-  Acá estamos usando dos *loops* anidados. Uno recorre ``n`` entre 2 y
   9, y el otro ``x`` entre 2 y ``n``.
-  La comparación ``if n % x == 0:`` chequea si ``x`` es un divisor de
   ``n``
-  La sentencia ``break`` interrumpe el *loop* interior (sobre ``x``)
-  Notar la alineación de la sentencia ``else``. No está referida a
   ``if`` sino a ``for``. Es opcional y se ejecuta cuando el loop se
   termina normalmente (sin ``break``)

While
^^^^^

Otra sentencia de control es *while*: que permite iterar mientras se
cumple una condición. El siguiente ejemplo imprime la serie de Fibonacci
(en la cuál cada término es la suma de los dos anteriores)

.. code:: python

    a, b = 0, 1
    while b < 5000:
      print (b, end=' ')
      a, b = b, a+b


.. parsed-literal::

    1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 

.. code:: python

    a, b = 0, 1
    while b < 5000:
      a, b = b, a+b
      if b == 8:
        continue
      print (b, end=' ')



.. parsed-literal::

    1 2 3 5 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 

--------------

Ejercicios 03 (a)
-----------------

1. De los primeros 100 números naturales imprimir aquellos que no son
   divisibles por alguno de 2, 3, 5 o 7.

2. Usando estructuras de control, calcule la suma:

   .. math::  s_{1} = \frac{1}{2} \left(\sum_{k=1}^{100}k^{-1} \right)

   1. Incluyendo todos los valores de ``k``
   2. Incluyendo únicamente los valores pares de ``k``.

3. Calcule la suma

   .. math:: s_{2} = \sum_{k=1}^{\infty} \frac{(-1)^{k} (k+1)}{2 k^{3} + k^{2}}

   con un error relativo estimado menor a :math:`\epsilon=10^{-5}`.
   Imprima por pantalla el resultado, el valor máximo de :math:`k`
   computado y el error relativo estimado.

4. Imprima por pantalla una tabla con valores equiespaciados de x entre
   0 y 180, con valores de las funciones trigonométricas de la forma:

.. code:: python


   """
     |=================================|
     | x  | sen(x) | cos(x) | tan(-x/4)|
     |=================================|
     |  0 |  0.000 |  1.000 |  -0.000  |
     | 10 |  0.174 |  0.985 |  -0.044  |
     | 20 |  0.342 |  0.940 |  -0.087  |
     | 30 |  0.500 |  0.866 |  -0.132  |
     | 40 |  0.643 |  0.766 |  -0.176  |
     | 50 |  0.766 |  0.643 |  -0.222  |
     | 60 |  0.866 |  0.500 |  -0.268  |
     | 70 |  0.940 |  0.342 |  -0.315  |
     | 80 |  0.985 |  0.174 |  -0.364  |
     | 90 |  1.000 |  0.000 |  -0.414  |
     |100 |  0.985 | -0.174 |  -0.466  |
     |110 |  0.940 | -0.342 |  -0.521  |
     |120 |  0.866 | -0.500 |  -0.577  |
     |130 |  0.766 | -0.643 |  -0.637  |
     |140 |  0.643 | -0.766 |  -0.700  |
     |150 |  0.500 | -0.866 |  -0.767  |
     |160 |  0.342 | -0.940 |  -0.839  |
     |170 |  0.174 | -0.985 |  -0.916  |
     |=================================|
   """

--------------


Técnicas de iteración
---------------------

Introdujimos tipos complejos: strings, listas, tuples, diccionarios
(``dict``), conjuntos (``set``). Veamos algunas técnicas usuales de
iteración sobre estos objetos.

Iteración sobre conjuntos (*set*)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    conj = set("Hola amigos, como están") # Creamos un conjunto desde un string
    conj




.. parsed-literal::

    {' ', ',', 'H', 'a', 'c', 'e', 'g', 'i', 'l', 'm', 'n', 'o', 's', 't', 'á'}



.. code:: python

    # Iteramos sobre los elementos del conjunto
    for elem in conj:
      print(elem, end='')


.. parsed-literal::

    táoanm gls,Heic

Iteración sobre elementos de dos listas
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consideremos las listas:

.. code:: python

    temp_min = [-3.2, -2, 0, -1, 4, -5, -2, 0, 4, 0]
    temp_max = [13.2, 12, 13, 7, 18, 5, 11, 14, 10 , 10]

Queremos imprimir una lista que combine los dos datos:

.. code:: python

    for t1, t2 in zip(temp_min, temp_max):
      print('La temperatura mínima fue {} y la máxima fue {}'.format(t1, t2))


.. parsed-literal::

    La temperatura mínima fue -3.2 y la máxima fue 13.2
    La temperatura mínima fue -2 y la máxima fue 12
    La temperatura mínima fue 0 y la máxima fue 13
    La temperatura mínima fue -1 y la máxima fue 7
    La temperatura mínima fue 4 y la máxima fue 18
    La temperatura mínima fue -5 y la máxima fue 5
    La temperatura mínima fue -2 y la máxima fue 11
    La temperatura mínima fue 0 y la máxima fue 14
    La temperatura mínima fue 4 y la máxima fue 10
    La temperatura mínima fue 0 y la máxima fue 10


Como vemos, la función ``zip`` combina los elementos, tomando uno de
cada lista

Podemos mejorar la salida anterior por pantalla si volvemos a utilizar
la función ``enumerate``

.. code:: python

    for j, t in enumerate(zip(temp_min, temp_max)):
      print('El día {} la temperatura mínima fue {} y la máxima fue {}'.format(1+j, t[0], t[1]))


.. parsed-literal::

    El día 1 la temperatura mínima fue -3.2 y la máxima fue 13.2
    El día 2 la temperatura mínima fue -2 y la máxima fue 12
    El día 3 la temperatura mínima fue 0 y la máxima fue 13
    El día 4 la temperatura mínima fue -1 y la máxima fue 7
    El día 5 la temperatura mínima fue 4 y la máxima fue 18
    El día 6 la temperatura mínima fue -5 y la máxima fue 5
    El día 7 la temperatura mínima fue -2 y la máxima fue 11
    El día 8 la temperatura mínima fue 0 y la máxima fue 14
    El día 9 la temperatura mínima fue 4 y la máxima fue 10
    El día 10 la temperatura mínima fue 0 y la máxima fue 10


¿qué retorna zip?

.. code:: python

    list(zip(temp_min, temp_max))




.. parsed-literal::

    [(-3.2, 13.2),
     (-2, 12),
     (0, 13),
     (-1, 7),
     (4, 18),
     (-5, 5),
     (-2, 11),
     (0, 14),
     (4, 10),
     (0, 10)]



.. code:: python

    for j, t in enumerate(zip(temp_min, temp_max),1):
      print('El día {} la temperatura mínima fue {} y la máxima fue {}'.
            format(j, t[0], t[1]))



.. parsed-literal::

    El día 1 la temperatura mínima fue -3.2 y la máxima fue 13.2
    El día 2 la temperatura mínima fue -2 y la máxima fue 12
    El día 3 la temperatura mínima fue 0 y la máxima fue 13
    El día 4 la temperatura mínima fue -1 y la máxima fue 7
    El día 5 la temperatura mínima fue 4 y la máxima fue 18
    El día 6 la temperatura mínima fue -5 y la máxima fue 5
    El día 7 la temperatura mínima fue -2 y la máxima fue 11
    El día 8 la temperatura mínima fue 0 y la máxima fue 14
    El día 9 la temperatura mínima fue 4 y la máxima fue 10
    El día 10 la temperatura mínima fue 0 y la máxima fue 10


.. code:: python

    # ¿Qué pasa cuńdo una se consume antes que la otra?
    for t1, t2 in zip([1,2,3,4,5],[3,4,5]):
        print(t1,t2)


.. parsed-literal::

    1 3
    2 4
    3 5


Podemos utilizar la función ``zip`` para sumar dos listas término a
término. ``zip`` funciona también con más de dos listas

.. code:: python

    for j,t1,t2 in zip(range(1,len(temp_min)+1),temp_min, temp_max):
      print(f'El día {j} la temperatura mínima fue {t1} y la máxima fue {t2}')



.. parsed-literal::

    El día 1 la temperatura mínima fue -3.2 y la máxima fue 13.2
    El día 2 la temperatura mínima fue -2 y la máxima fue 12
    El día 3 la temperatura mínima fue 0 y la máxima fue 13
    El día 4 la temperatura mínima fue -1 y la máxima fue 7
    El día 5 la temperatura mínima fue 4 y la máxima fue 18
    El día 6 la temperatura mínima fue -5 y la máxima fue 5
    El día 7 la temperatura mínima fue -2 y la máxima fue 11
    El día 8 la temperatura mínima fue 0 y la máxima fue 14
    El día 9 la temperatura mínima fue 4 y la máxima fue 10
    El día 10 la temperatura mínima fue 0 y la máxima fue 10


.. code:: python

    tmedia = []
    for t1, t2 in zip(temp_min, temp_max):
      tmedia.append((t1+t2)/2)
    print(tmedia)


.. parsed-literal::

    [5.0, 5.0, 6.5, 3.0, 11.0, 0.0, 4.5, 7.0, 7.0, 5.0]


También podemos escribirlo en forma más compacta usando comprensiones de
listas

.. code:: python

    tm = [(t1+t2)/2 for t1,t2 in zip(temp_min,temp_max)]
    print(tm)


.. parsed-literal::

    [5.0, 5.0, 6.5, 3.0, 11.0, 0.0, 4.5, 7.0, 7.0, 5.0]


Iteraciones sobre diccionarios
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    temps = {j:{"Tmin": temp_min[j], "Tmax":temp_max[j]} for j in range(len(temp_min))}

.. code:: python

    for k in temps:
      print(f'La temperatura máxima del día {k} fue {temps[k]["Tmax"]} y la mínima {temps[k]["Tmin"]}')


.. parsed-literal::

    La temperatura máxima del día 0 fue 13.2 y la mínima -3.2
    La temperatura máxima del día 1 fue 12 y la mínima -2
    La temperatura máxima del día 2 fue 13 y la mínima 0
    La temperatura máxima del día 3 fue 7 y la mínima -1
    La temperatura máxima del día 4 fue 18 y la mínima 4
    La temperatura máxima del día 5 fue 5 y la mínima -5
    La temperatura máxima del día 6 fue 11 y la mínima -2
    La temperatura máxima del día 7 fue 14 y la mínima 0
    La temperatura máxima del día 8 fue 10 y la mínima 4
    La temperatura máxima del día 9 fue 10 y la mínima 0


.. code:: python

    temps




.. parsed-literal::

    {0: {'Tmin': -3.2, 'Tmax': 13.2},
     1: {'Tmin': -2, 'Tmax': 12},
     2: {'Tmin': 0, 'Tmax': 13},
     3: {'Tmin': -1, 'Tmax': 7},
     4: {'Tmin': 4, 'Tmax': 18},
     5: {'Tmin': -5, 'Tmax': 5},
     6: {'Tmin': -2, 'Tmax': 11},
     7: {'Tmin': 0, 'Tmax': 14},
     8: {'Tmin': 4, 'Tmax': 10},
     9: {'Tmin': 0, 'Tmax': 10}}



Cómo comentamos anteriormente, cuando iteramos sobre un diccionario
estamos moviéndonos sobre las ``(k)eys``

.. code:: python

    temps.keys()




.. parsed-literal::

    dict_keys([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])



.. code:: python

    7 in temps




.. parsed-literal::

    True



.. code:: python

    7 in temps.keys()




.. parsed-literal::

    True



.. code:: python

    11 in temps




.. parsed-literal::

    False



Para referirnos al valor tenemos que hacerlo en la forma ``temps[k]``, y
no siempre es una manera muy clara de escribir las cosas. Otra manera
similar, pero más limpia en este caso sería:

.. code:: python

    list(temps.items())




.. parsed-literal::

    [(0, {'Tmin': -3.2, 'Tmax': 13.2}),
     (1, {'Tmin': -2, 'Tmax': 12}),
     (2, {'Tmin': 0, 'Tmax': 13}),
     (3, {'Tmin': -1, 'Tmax': 7}),
     (4, {'Tmin': 4, 'Tmax': 18}),
     (5, {'Tmin': -5, 'Tmax': 5}),
     (6, {'Tmin': -2, 'Tmax': 11}),
     (7, {'Tmin': 0, 'Tmax': 14}),
     (8, {'Tmin': 4, 'Tmax': 10}),
     (9, {'Tmin': 0, 'Tmax': 10})]



.. code:: python

    for k, v in temps.items():
      print('La temperatura máxima del día {} fue {} y la mínima {}'
            .format(k,v['Tmin'], v['Tmax']))


.. parsed-literal::

    La temperatura máxima del día 0 fue -3.2 y la mínima 13.2
    La temperatura máxima del día 1 fue -2 y la mínima 12
    La temperatura máxima del día 2 fue 0 y la mínima 13
    La temperatura máxima del día 3 fue -1 y la mínima 7
    La temperatura máxima del día 4 fue 4 y la mínima 18
    La temperatura máxima del día 5 fue -5 y la mínima 5
    La temperatura máxima del día 6 fue -2 y la mínima 11
    La temperatura máxima del día 7 fue 0 y la mínima 14
    La temperatura máxima del día 8 fue 4 y la mínima 10
    La temperatura máxima del día 9 fue 0 y la mínima 10


Si queremos iterar sobre los valores podemos utilizar simplemente:

.. code:: python

    for v in temps.values():
      print(v)



.. parsed-literal::

    {'Tmin': -3.2, 'Tmax': 13.2}
    {'Tmin': -2, 'Tmax': 12}
    {'Tmin': 0, 'Tmax': 13}
    {'Tmin': -1, 'Tmax': 7}
    {'Tmin': 4, 'Tmax': 18}
    {'Tmin': -5, 'Tmax': 5}
    {'Tmin': -2, 'Tmax': 11}
    {'Tmin': 0, 'Tmax': 14}
    {'Tmin': 4, 'Tmax': 10}
    {'Tmin': 0, 'Tmax': 10}


Remarquemos que los diccionarios no tienen definidos un orden por lo que
no hay garantías que la próxima vez que ejecutemos cualquiera de estas
líneas de código el resultado sea exactamente el mismo. Además, si
queremos imprimirlos en un orden predecible debemos escribirlo
explícitamente. Por ejemplo:

.. code:: python

    l=list(temps.keys())
    l.sort(reverse=True)

.. code:: python

    l




.. parsed-literal::

    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]



.. code:: python

    for k in l:
      print(k, temps[k])


.. parsed-literal::

    9 {'Tmin': 0, 'Tmax': 10}
    8 {'Tmin': 4, 'Tmax': 10}
    7 {'Tmin': 0, 'Tmax': 14}
    6 {'Tmin': -2, 'Tmax': 11}
    5 {'Tmin': -5, 'Tmax': 5}
    4 {'Tmin': 4, 'Tmax': 18}
    3 {'Tmin': -1, 'Tmax': 7}
    2 {'Tmin': 0, 'Tmax': 13}
    1 {'Tmin': -2, 'Tmax': 12}
    0 {'Tmin': -3.2, 'Tmax': 13.2}


La secuencia anterior puede escribirse en forma más compacta como

.. code:: python

    for k in sorted(list(temps),reverse=True):
      print(k, temps[k])


.. parsed-literal::

    9 {'Tmin': 0, 'Tmax': 10}
    8 {'Tmin': 4, 'Tmax': 10}
    7 {'Tmin': 0, 'Tmax': 14}
    6 {'Tmin': -2, 'Tmax': 11}
    5 {'Tmin': -5, 'Tmax': 5}
    4 {'Tmin': 4, 'Tmax': 18}
    3 {'Tmin': -1, 'Tmax': 7}
    2 {'Tmin': 0, 'Tmax': 13}
    1 {'Tmin': -2, 'Tmax': 12}
    0 {'Tmin': -3.2, 'Tmax': 13.2}


.. code:: python

    list(temps)




.. parsed-literal::

    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]



.. code:: python

    for k in sorted(list(temps.keys()), reverse=True):
        print(k, temps[k])


.. parsed-literal::

    9 {'Tmin': 0, 'Tmax': 10}
    8 {'Tmin': 4, 'Tmax': 10}
    7 {'Tmin': 0, 'Tmax': 14}
    6 {'Tmin': -2, 'Tmax': 11}
    5 {'Tmin': -5, 'Tmax': 5}
    4 {'Tmin': 4, 'Tmax': 18}
    3 {'Tmin': -1, 'Tmax': 7}
    2 {'Tmin': 0, 'Tmax': 13}
    1 {'Tmin': -2, 'Tmax': 12}
    0 {'Tmin': -3.2, 'Tmax': 13.2}


--------------

Ejercicios 03 (b)
-----------------

5. Un método para calcular el área de un polígono (no necesariamente
   regular) que se conoce como fórmula del área de Gauss o fórmula de la
   Lazada (*shoelace formula*) consiste en describir al polígono por sus
   puntos en un sistema de coordenadas. Cada punto se describe como un
   par :math:`(x,y)` y la fórmula del área está dada mediante la suma de
   la multiplicación de los valores en una diagonal a los que se le
   resta los valores en la otra diagonal, como muestra la figura

.. image:: figuras/shoelace.png

.. math::  A = (x_{1} y_{2} + x_{2} y_{3} + x_{3} y_{4} + \dots) - (x_{2} y_{1} + x_{3} y_{2} + x_{4} y_{3} + \dots) 

.. image:: figuras/ejemplo_shoelace.png

-  Utilizando una descripción adecuada del polígono, implementar la
   fórmula de Gauss para calcular su área y aplicarla al ejemplo de la
   figura.
-  Verificar que el resultado no depende del punto de inicio.

6. Las funciones de Bessel de orden :math:`n` cumplen las relaciones de
   recurrencia

   .. math::


      J_{n -1}(x)- \frac{2n }{x}\, J_{n }(x) + J_{n +1}(x) = 0 \\
      J^{2}_{0}(x) + \sum_{n=1}^{\infty} 2 J^{2}_{n}(x) = 1
        

Para calcular la función de Bessel de orden :math:`N`, se empieza con un
valor de :math:`M \gg N`, y utilizando los valores iniciales
:math:`J_{M}=1`, :math:`J_{M+1}=0` se utiliza la primera relación para
calcular todos los valores de :math:`n < M`. Luego, utilizando la
segunda relación se normalizan todos los valores.

.. note::  Estas relaciones son válidas si :math:`M \gg x` (use algún
  valor estimado, como por ejemplo :math:`M=N+20`).
  
  

Utilice estas relaciones para calcular :math:`J_{N}(x)` para
:math:`N=3,4,7` y :math:`x=2.5, 5.7, 10`. Para referencia se dan los
valores esperados

.. math::


     J_3( 2.5) =  0.21660\\
     J_4( 2.5) =  0.07378\\
     J_7( 2.5) =  0.00078\\
     J_3( 5.7) =  0.20228\\
     J_4( 5.7) =  0.38659\\
     J_7( 5.7) =  0.10270\\
     J_3(10.0) =  0.05838\\
     J_4(10.0) = -0.21960\\
     J_7(10.0) =  0.21671\\
     

7. Dada una lista de números, vamos a calcular valores relacionados a su
   estadística.

   -  Calcular los valores de la media aritmética, la media geométrica y
      la media armónica, dados por:

      .. math::


          A(x_1, \ldots, x_n) = \bar{x} = \frac{x_1 + \cdots + x_n}{n} \\
          G(x_1, \ldots, x_n) = \sqrt[n]{x_1 \cdots x_n} \\
          H(x_1, \ldots, x_n) = \frac{n}{\frac{1}{x_1} + \cdots + \frac{1}{x_n}}
          

   -  Calcular la desviación estándard:

      .. math::  \sigma\equiv\sqrt{\frac{1}{n}\sum_i \left(x_{i} - \bar{x} \right)^2} 

   -  Calcular la mediana, que se define como el valor para el cual la
      mitad de los valores de la lista es menor que ella. Si el número
      de elementos es par, se toma el promedio entre los dos adyacentes.

   Realizar los cálculos para las listas de números:
   ``python  L1 = [6.41, 1.28, 11.54, 5.13, 8.97, 3.84, 10.26, 14.1, 12.82, 16.67, 2.56, 17.95, 7.69, 15.39]  L2 = [4.79, 1.59, 2.13, 4.26, 3.72, 1.06, 6.92, 3.19, 5.32, 2.66, 5.85, 6.39, 0.53]``

   -  La *moda* se define como el valor que ocurre más frecuentemente en
      una colección. Note que la moda puede no ser única. En ese caso
      debe obtener todos los valores. Calcule la moda de la siguiente
      lista de números enteros:

   .. code:: python

      L = [8, 9, 10, 11, 10, 6, 10, 17, 8, 8, 5, 10, 14, 7, 9, 12, 8, 17, 10, 12, 9, 11, 9, 12, 11, 11, 6, 9, 12, 5, 12, 9, 10, 16, 8, 4, 5, 8, 11, 12]

8. Dada una lista de direcciones en el plano, expresadas por los ángulos
   en grados a partir de un cierto eje, calcular la dirección promedio,
   expresada en ángulos. Pruebe su algoritmo con las listas:

   .. code:: python

      t1 = [0, 180, 370, 10]
      t2 = [30, 0, 80, 180]
      t3 = [80, 180, 540, 280]

--------------

.
