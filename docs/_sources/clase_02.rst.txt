.. _clase_02:

Clase 2: Tipos de datos y control 
===================================


.. note::  **Escenas del capítulo anterior:**
  
  En la clase anterior preparamos la infraestructura:
  
  -  Instalamos los programas y paquetes necesarios.
  -  Aprendimos como ejecutar: una consola usual, de ipython, o iniciar un
     *notebook*
  -  Aprendimos a utilizar la consola como una calculadora
  -  Vimos algunos comandos mágicos y como enviar comandos al sistema
     operativo
  -  Aprendimos como obtener ayuda
  -  Iniciamos los primeros pasos del lenguaje
  
  Veamos un ejemplo completo de un programa (semi-trivial):
  
  .. code:: python
  
  
     # Definición de los datos
     r = 9.
     pi = 3.14159
     #
     # Cálculos
     A = pi*r**2
     As = 4 * A
     V = 4*A*r/3
     #
     # Salida de los resultados
     print("Para un círculo de radio",r," cm, el área es",A,"cm²")
     print("Para una esfera de radio",r," cm, el área es",As,"cm²")
     print("Para una esfera de radio",r," cm, el volumen es",V,"cm³")
  
  En este ejemplo simple, definimos algunas variables (``r`` y ``pi``),
  realizamos cálculos y sacamos por pantalla los resultados. A diferencia
  de otros lenguajes, python no necesita una estructura rígida, con
  definición de un programa principal.
  
  

Tipos simples: Números
----------------------

-  Números Enteros
-  Números Reales o de punto flotante
-  Números Complejos

.. note::  Disgresión: Objetos
  
  En python, la forma de tratar datos es mediante *objetos*. Todos los
  objetos tienen, al menos:
  
  -  un tipo,
  -  un valor,
  -  una identidad.
  
  Además, pueden tener:
  
  -  componentes
  -  métodos
  
  Los *métodos* son funciones que pertenecen a un objeto y cuyo primer
  argumento es el objeto que la posee.
  
  

Todos los números, al igual que otros tipos, son objetos y tienen
definidos algunos métodos que pueden ser útiles.

.. code:: python

    a = 3                           # Números enteros
    print(type(a), a.bit_length(), sep="\n")


.. parsed-literal::

    <class 'int'>
    2


.. code:: python

    b = 127
    print(type(b))
    print(b.bit_length())


.. parsed-literal::

    <class 'int'>
    7


En estos casos, usamos el método ``bit_length`` de los enteros, que nos
dice cuántos bits son necesarios para representar un número. Para verlo
utilicemos la función ``bin()`` que nos da la representación en binario
de un número entero

.. code:: python

    # bin nos da la representación en binarios
    print(a, "=", bin(a), "->", a.bit_length(),"bits")
    print(b, "=", bin(b), "->", b.bit_length(),"bits")


.. parsed-literal::

    3 = 0b11 -> 2 bits
    127 = 0b1111111 -> 7 bits


Vemos que el número ``3`` se puede representar con dos bits, y para el
número ``127`` se necesitan 7 bits.

Los números de punto flotante también tienen algunos métodos definidos.
Por ejemplo podemos saber si un número flotante corresponde a un entero:

.. code:: python

    b = -3.0
    b.is_integer()




.. parsed-literal::

    True



.. code:: python

    c = 142.25
    c.is_integer()




.. parsed-literal::

    False



o podemos expresarlo como el cociente de dos enteros, o en forma
hexadecimal

.. code:: python

    c.as_integer_ratio()




.. parsed-literal::

    (569, 4)



.. code:: python

    s = c.hex()
    print(s)


.. parsed-literal::

    0x1.1c80000000000p+7


Acá la notación, compartida con otros lenguajes (C, Java), significa:

``[sign] ['0x'] integer ['.' fraction] ['p' exponent]``

Entonces ‘0x1.1c8p+7’ corresponde a:

.. code:: python

    (1 + 1./16 + 12./16**2 + 8./16**3)*2.0**7




.. parsed-literal::

    142.25



Recordemos, como último ejemplo, los números complejos:

.. code:: python

    z = 1 + 2j
    zc = z.conjugate()              # Método que devuelve el conjugado
    zr = z.real                     # Componente, parte real
    zi = z.imag                     # Componente, parte imaginaria

.. code:: python

    print(z, zc, zr, zi, zc.imag)


.. parsed-literal::

    (1+2j) (1-2j) 1.0 2.0 -2.0


Tipos compuestos
----------------

En Python, además de los tipos simples (números y booleanos, entre
ellos) existen tipos compuestos, que pueden contener más de un valor de
algún tipo. Entre los tipos compuestos más importantes vamos a
referirnos a:

-  | `Strings <https://docs.python.org/es/3/library/stdtypes.html#text-sequence-type-str>`__
   | Se pueden definir con comillas dobles ( ” ), comillas simples ( ’
     ), o tres comillas (simples o dobles). Comillas (dobles) y comillas
     simples producen el mismo resultado. Sólo debe asegurarse que se
     utiliza el mismo tipo para abrir y para cerrar el *string*
   | Ejemplo: ``s = "abc"`` (el elemento ``s[0]`` tiene el valor
     ``"a"``).

-  | `Listas <https://docs.python.org/es/3/library/stdtypes.html#sequence-types-list-tuple-range>`__
   | Las listas son tipos que pueden contener más de un elemento de
     cualquier tipo. Los tipos de los elementos pueden ser diferentes.
     Las listas se definen separando los diferentes valores con comas,
     encerrados entre corchetes. Se puede referir a un elemento por su
     índice.
   | Ejemplo: ``L = ["a",1, 0.5 + 1j]`` (el elemento ``L[0]`` es igual
     al *string* ``"a"``).

-  | `Tuplas <https://docs.python.org/es/3/library/stdtypes.html#sequence-types-list-tuple-range>`__
   | Las tuplas se definen de la misma manera que las listas pero con
     paréntesis en lugar de corchetes. Ejemplo:
     ``T = ("a",1, 0.5 + 1j).``

-  | `Diccionarios <https://docs.python.org/es/3/library/stdtypes.html#mapping-types-dict>`__
   | Los diccionarios son contenedores a cuyos elementos se los
     identifica con un nombre (*key*) en lugar de un índice. Se los
     puede definir dando los pares ``key:value`` entre llaves
   | Ejemplo: ``D = {'a': 1, 'b': 2, 1: 'hola', 2: 3.14}`` (el elemento
     ``D['a']`` es igual al número 1).

Strings: Secuencias de caracteres
---------------------------------

Una cadena o *string* es una **secuencia** de caracteres (letras,
“números”, símbolos).

Se pueden definir con comillas, comillas simples, o tres comillas
(simples o dobles). Comillas simples o dobles producen el mismo
resultado. Sólo debe asegurarse que se utilizan el mismo tipo para abrir
y para cerrar el *string*

Triple comillas (simples o dobles) sirven para incluir una cadena de
caracteres en forma textual, incluyendo saltos de líneas.

.. code:: python

    saludo = 'Hola Mundo'           # Definición usando comillas simples
    saludo2 = "Hola Mundo"          # Definición usando comillas dobles

.. code:: python

    saludo, saludo2




.. parsed-literal::

    ('Hola Mundo', 'Hola Mundo')



Los *strings* se pueden definir **equivalentemente** usando comillas
simples o dobles. De esta manera es fácil incluir comillas dentro de los
*strings*

.. code:: python

    otro= "that's all"              
    dijo = '"Cómo te va" dijo el murguista a la muchacha'

.. code:: python

    otro




.. parsed-literal::

    "that's all"



.. code:: python

    dijo




.. parsed-literal::

    '"Cómo te va" dijo el murguista a la muchacha'



.. code:: python

    respondio = "Le dijo \"Bien\" y lo dejó como si nada"

.. code:: python

    respondio




.. parsed-literal::

    'Le dijo "Bien" y lo dejó como si nada'



.. code:: python

    consimbolos = 'þß€→"\'oó@¬'

.. code:: python

    consimbolos




.. parsed-literal::

    'þß€→"\'oó@¬'



Para definir *strings* que contengan más de una línea, manteniendo el
formato, se pueden utilizar tres comillas (dobles o simples):

.. code:: python

    Texto_largo = '''Aquí me pongo a cantar
      Al compás de la vigüela,
    Que el hombre que lo desvela
      Una pena estraordinaria
    Como la ave solitaria
      Con el cantar se consuela.'''

Podemos imprimir los strings

.. code:: python

    print (saludo,'\n')
    print (Texto_largo,'\n')
    print(otro)


.. parsed-literal::

    Hola Mundo 
    
    Aquí me pongo a cantar
      Al compás de la vigüela,
    Que el hombre que lo desvela
      Una pena estraordinaria
    Como la ave solitaria
      Con el cantar se consuela. 
    
    that's all


En ``Python`` se puede utilizar cualquier caracter que pueda ingresarse
por teclado, ya que por default Python-3 trabaja usando la codificación
UTF-8, que incluye todos los símbolos que se nos ocurran. Por ejemplo:

.. code:: python

    # Un ejemplo que puede interesarnos un poco más:
    label = "σ = λ T/ µ + π · δξ"
    print('tipo de label: ', type(label))
    print ('Resultados corresponden a:', label, ' (en m/s²)')


.. parsed-literal::

    tipo de label:  <class 'str'>
    Resultados corresponden a: σ = λ T/ µ + π · δξ  (en m/s²)


Operaciones
~~~~~~~~~~~

En **Python** ya hay definidas algunas operaciones como suma
(composición o concatenación), producto por enteros (repetición).

.. code:: python

    s = saludo + ' -> ' + otro + '\n' 
    s = s + "chau"
    print (s) #  Suma de strings


.. parsed-literal::

    Hola Mundo -> that's all
    chau


Como vemos la suma de *strings* es simplemente la concatenación de los
argumentos. La multiplicación de un entero ``n`` por un *string* es
simplemente la suma del string ``n`` veces:

.. code:: python

    a = '1'
    b = 1

.. code:: python

    print(a, type(a))
    print(b, type(b))


.. parsed-literal::

    1 <class 'str'>
    1 <class 'int'>


.. code:: python

    print ("Multiplicación por enteros de strings:", 7*a)
    print ("Multiplicación por enteros de enteros:", 7*b)


.. parsed-literal::

    Multiplicación por enteros de strings: 1111111
    Multiplicación por enteros de enteros: 7


La longitud de una cadena de caracteres (como de otros objetos) se puede
calcular con la función ``len()``

.. code:: python

    print ('longitud del saludo =', len(saludo), 'caracteres')


.. parsed-literal::

    longitud del saludo = 10 caracteres


Podemos usar estas operaciones para realizar el centrado manual de una
frase:

.. code:: python

    titulo = "Centrado manual simple"
    n = int((60-len(titulo))//2)    # Para un ancho de 60 caracteres
    print ((n)*'<', titulo ,(n)*'>')
    # 
    saludo = 'Hola Mundo'           
    n = int((60-len(saludo))//2)    # Para un ancho de 60 caracteres
    print (n*'*', saludo, n*'*')


.. parsed-literal::

    <<<<<<<<<<<<<<<<<<< Centrado manual simple >>>>>>>>>>>>>>>>>>>
    ************************* Hola Mundo *************************


Iteración y Métodos de Strings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Los *strings* poseen varias cualidades y funcionalidades. Por ejemplo:

-  Se puede iterar sobre ellos, o quedarse con una parte (slicing)
-  Tienen métodos (funciones que se aplican a su *dueño*)

Veamos en primer lugar cómo se hace para seleccionar parte de un
*string*

Indexado de *strings*
^^^^^^^^^^^^^^^^^^^^^

Los *strings* poseen varias cualidades y funcionalidades. Por ejemplo:

-  Se puede iterar sobre ellos, o quedarse con una parte (slicing)
-  Tienen métodos (funciones que se aplican a su *dueño*)

Podemos referirnos a un caracter o una parte de una cadena de caracteres
mediante su índice. Los índices en **Python** empiezan en 0.

.. code:: python

    s = "0123456789"
    print ('Primer caracter  :', s[0])
    print ("Segundo caracter :", s[1])
    print ("El último caracter :", s[-1])
    print ("El anteúltimo caracter :", s[-2])


.. parsed-literal::

    Primer caracter  : 0
    Segundo caracter : 1
    El último caracter : 9
    El anteúltimo caracter : 8


También podemos elegir un subconjunto de caracteres:

.. code:: python

    print ('Los tres primeros:          ', s[:3])
    print ('Todos a partir del tercero: ', s[3:])
    print ('Los últimos dos:            ', s[-2:])
    print ('Todos menos los últimos dos:', s[:-2])


.. parsed-literal::

    Los tres primeros:           Hol
    Todos a partir del tercero:  a Mundo -> that's all
    chau
    Los últimos dos:             au
    Todos menos los últimos dos: Hola Mundo -> that's all
    ch


Estas “subcadenas” son cadenas de caracteres, y por lo tanto pueden
utilizarse de la misma manera que cualquier otra cadena:

.. code:: python

    print (s[:3] + s[-2:])


.. parsed-literal::

    Holau


La selección de elementos y subcadenas de una cadena ``s`` tiene la
forma

.. code:: python

   s[i: f: p]

donde ``i, f, p`` son enteros. La notación se refiere a la subcadena
empezando en el índice ``i``, hasta el índice ``f`` recorriendo con paso
``p``. Casos particulares de esta notación son:

-  Un índice simple. Por ejemplo ``s[3]`` se refiere al tercer elemento
-  Un índice negativo se cuenta desde el final, empezando desde ``-1``
-  Si el paso ``p`` no está presente el valor por defecto es 1. Ejemplo:
   ``s[2:4] = s[2:4:1]``
-  Si se omite el primer índice, el valor asumido es 0. Ejemplo:
   ``s[:2:1] = s[0:2:1]``
-  Si se omite el segundo índice, el valor asumido es -1. Ejemplo:
   ``s[1::1] = s[1:-1:1]``
-  Notar que puede omitirse más de un índice. Ejemplo:
   ``s[::2] = s[0:-1:2]``

.. code:: python

    print(s)
    print(s[0:5:2])
    print (s[::2])
    print (s[::-1])
    print (s[::-3])


.. parsed-literal::

    Hola Mundo -> that's all
    chau
    Hl 
    Hl ud >ta' l
    hu
    uahc
    lla s'taht >- odnuM aloH
    uclsa  n o


Veamos algunas operaciones que se pueden realizar sobre un string:

.. code:: python

    a = "La mar estaba serena!"
    print(a)


.. parsed-literal::

    La mar estaba serena!


Por ejemplo, en python es muy fácil reemplazar una cadena por otra:

.. code:: python

    b = a.replace('e','a')
    print(b)


.. parsed-literal::

    La mar astaba sarana!


o separar las palabras:

.. code:: python

    print(a.split())


.. parsed-literal::

    ['La', 'mar', 'estaba', 'serena!']


En este caso, tanto ``replace()`` como ``split()`` son métodos que ya
tienen definidos los *strings*.

Un método es una función que está definida junto con el tipo de objeto.
En este caso el string. Hay más información sobre todos los métodos de
las cadenas de caracteres en: `String
Methods <https://docs.python.org/3/library/stdtypes.html#string-methods>`__

Veamos algunos ejemplos más:

.. code:: python

    a = 'Hola Mundo!'
    b = "Somos los colectiveros que cumplimos nuestro deber!"
    c = Texto_largo
    print ('\nPrimer programa en cualquier lenguaje:\n\t\t' + a,2*'\n')
    print (80*'-')
    print ('Otro texto:', b, sep='\n\t')
    print ('Longitud del texto: ',len(b), 'caracteres')


.. parsed-literal::

    
    Primer programa en cualquier lenguaje:
    		Hola Mundo! 
    
    
    --------------------------------------------------------------------------------
    Otro texto:
    	Somos los colectiveros que cumplimos nuestro deber!
    Longitud del texto:  51 caracteres


Buscar y reemplazar cosas en un string:

.. code:: python

    b.find('l')




.. parsed-literal::

    6



.. code:: python

    b.find('l',7)




.. parsed-literal::

    12



.. code:: python

    b.find('le')




.. parsed-literal::

    12



.. code:: python

    # help(b.find)

.. code:: python

    print (b.replace('que','y')) # Reemplazamos un substring
    print (b.replace('e','u',2)) # Reemplazamos un substring sólo 2 veces


.. parsed-literal::

    Somos los colectiveros y cumplimos nuestro deber!
    Somos los coluctivuros que cumplimos nuestro deber!


Formato de strings
~~~~~~~~~~~~~~~~~~

En python se le puede dar formato a los strings de distintas maneras.
Vamos a ver dos opciones: - Uso del método ``format`` - Uso de
“f-strings”

El método ``format()`` es una función que busca en el strings las llaves
y las reemplaza por los argumentos. Veamos esto con algunos ejemplos:

.. code:: python

    a = 2022
    m = 'Feb'
    d = 8
    s = "Hoy es el día {} de {} de {}".format(d, m, a)
    print(s)
    print("Hoy es el día {}/{}/{}".format(d,m,a))
    print("Hoy es el día {0}/{1}/{2}".format(d,m,a))
    print("Hoy es el día {2}/{1}/{0}".format(d,m,a))



.. parsed-literal::

    Hoy es el día 8 de Feb de 2022
    Hoy es el día 8/Feb/2022
    Hoy es el día 8/Feb/2022
    Hoy es el día 2022/Feb/8


.. code:: python

    fname = "datos-{}-{}-{}.dat".format(a,m,d)
    print(fname)


.. parsed-literal::

    datos-2022-Feb-8.dat


.. code:: python

    pi = 3.141592653589793
    s1 = "El valor de π es {}".format(pi)
    s2 = "El valor de π con cuatro decimales es {0:.4f}".format(pi)
    print(s1)
    print(s2)
    print("El valor de π con seis decimales es {:.6f}".format(pi))
    print("{:03d}".format(5))
    print("{:3d}".format(5))


.. parsed-literal::

    El valor de π es 3.141592653589793
    El valor de π con cuatro decimales es 3.1416
    El valor de π con seis decimales es 3.141593
    005
      5


Más recientemente se ha implementado en Python una forma más directa de
intercalar datos con caracteres literales, mediante *f-strings*:

.. code:: python

    print(f"el valor de π es {pi}")
    print(f"El valor de π con seis decimales es {pi:.6f}")
    print(f"El valor de 2π con seis decimales es {2*pi:.6f}")


.. parsed-literal::

    el valor de π es 3.141592653589793
    El valor de π con seis decimales es 3.141593
    El valor de 2π con seis decimales es 6.283185


Conversión de tipos
-------------------

Como comentamos anteriormente, y se ve en los ejemplos anteriores, uno
no define el tipo de variable *a-priori* sino que queda definido al
asignársele un valor (por ejemplo a=3 define a como una variable del
tipo entero).

Si bien **Python** hace la conversión de tipos de variables en algunos
casos, **no hace magia**, no puede adivinar nuestra intención si no la
explicitamos.

.. code:: python

    a = 3                           # a es entero
    b = 3.1                         # b es real
    c = 3 + 0j                      # c es complejo
    print ("a es de tipo {0}\nb es de tipo {1}\nc es de tipo {2}".format(type(a), type(b), type(c)))
    print ("'a + b' es de tipo {0} y 'a + c' es de tipo {1}".format(type(a+b), type(a+c)))


.. parsed-literal::

    a es de tipo <class 'int'>
    b es de tipo <class 'float'>
    c es de tipo <class 'complex'>
    'a + b' es de tipo <class 'float'> y 'a + c' es de tipo <class 'complex'>


.. code:: python

    print (1+'1')


::


    ---------------------------------------------------------------------------

    TypeError                                 Traceback (most recent call last)

    Input In [62], in <module>
    ----> 1 print (1+'1')


    TypeError: unsupported operand type(s) for +: 'int' and 'str'


Sin embargo, si le decimos explícitamente qué conversión queremos, todo
funciona bien

.. code:: python

    print (str(1) + '1')
    print (1 + int('1'))
    print (1 + float('1.e5'))


.. parsed-literal::

    11
    2
    100001.0


.. code:: python

    # a menos que nosotros **nos equivoquemos explícitamente**
    print (1 + int('z'))


::


    ---------------------------------------------------------------------------

    ValueError                                Traceback (most recent call last)

    Input In [64], in <module>
          1 # a menos que nosotros **nos equivoquemos explícitamente**
    ----> 2 print (1 + int('z'))


    ValueError: invalid literal for int() with base 10: 'z'


--------------

Ejercicios 02 (a)
-----------------

1. Centrado manual de frases

   a. Utilizando la función ``len()`` centre una frase corta en una
      pantalla de 80 caracteres. Utilice la frase: “Primer ejercicio con
      caracteres”

   b. Agregue subrayado a la frase anterior

2. Para la cadena de caracteres:

.. code:: python

   s = '''Aquí me pongo a cantar
   Al compás de la vigüela,
   Que el hombre que lo desvela
   Una pena estraordinaria
   Como la ave solitaria
   Con el cantar se consuela.'''

-  Cuente la cantidad de veces que aparecen los substrings ``es``,
   ``la``, ``que``, ``co``, en los siguientes dos casos: distinguiendo
   entre mayúsculas y minúsculas, y no distinguiendo. Imprima el
   resultado.

-  Cree una lista, donde cada elemento es una línea del string ``s`` y
   encuentre la de mayor longitud. Imprima por pantalla la línea y su
   longitud.

-  Forme un nuevo string de 10 caracteres que contenga los 5 primeros y
   los 5 últimos del string anterior ``s``. Imprima por pantalla el
   nuevo string.

-  Forme un nuevo string que contenga los 10 caracteres centrales de
   ``s`` (utilizando un método que pueda aplicarse a otros strings
   también). Imprima por pantalla el nuevo string.

-  Cambie todas las letras “m” por “n” y todas las letras “n” por “m” en
   ``s``. Imprima el resultado por pantalla.

-  Debe entregar un programa llamado ``02_SuApellido.py`` (con su
   apellido, no la palabra “SuApellido”). El programa al correrlo con el
   comando ``python3 02_SuApellido.py`` debe imprimir:

::

   Nombre Apellido
   Clase 2
   Distinguiendo: 2 5 1 2
   Sin distinguir: 2 5 2 4
   Que el hombre que lo desvela : longitud=28
   Aquí uela.
   desvela 
   Un
   Aquí ne pomgo a camtar
   Al conpás de la vigüela,
   Que el honbre que lo desvela
   Uma pema estraordimaria
   Cono la ave solitaria
   Com el camtar se comsuela.

--------------



Tipos contenedores: Listas
--------------------------

Las listas son tipos compuestos (pueden contener más de un valor). Se
definen separando los valores con comas, encerrados entre corchetes. En
general las listas pueden contener diferentes tipos, y pueden no ser
todos iguales, pero suelen utilizarse con ítems del mismo tipo.

-  Los elementos no son necesariamente homogéneos en tipo

-  Elementos ordenados

-  Acceso mediante un índice

-  Están definidas operaciones entre Listas, así como algunos métodos

   -  ``x in L`` (¿x es un elemento de L?)
   -  ``x not in L`` (¿x no es un elemento de L?)
   -  ``L1 + L2`` (concatenar L1 y L2)
   -  ``n*L1`` (n veces L1)
   -  ``L1*n`` (n veces L1)
   -  ``L[i]`` (Elemento i-ésimo)
   -  ``L[i:j]`` (Elementos i a j)
   -  ``L[i:j:k]`` (Elementos i a j, elegidos uno de cada k)
   -  ``len(L)`` (longitud de L)
   -  ``min(L)`` (Mínimo de L)
   -  ``max(L)`` (Máximo de L)
   -  ``L.index(x, [i])`` (Índice de x, iniciando en i)
   -  ``L.count(x)`` (Número de veces que aparece x en L)
   -  ``L.append(x)`` (Agrega el elemento x al final)

Veamos algunos ejemplos:

.. code:: python

    cuadrados = [1, 9, 16, 25]

En esta línea hemos declarado una variable llamada ``cuadrados``, y le
hemos asignado una lista de cuatro elementos. En algunos aspectos las
listas son muy similares a los *strings*. Se pueden realizar muchas de
las mismas operaciones en strings, listas y otros objetos sobre los que
se pueden iterar (*iterables*).

Las listas pueden accederse por posición y también pueden rebanarse
(*slicing*)

.. note::  La indexación de iteradores empieza desde cero (como en C)
  
  

.. code:: python

    cuadrados[0]




.. parsed-literal::

    1



.. code:: python

    cuadrados[3]




.. parsed-literal::

    25



.. code:: python

    cuadrados[-1]




.. parsed-literal::

    25



.. code:: python

    cuadrados[:3:2]




.. parsed-literal::

    [1, 16]



.. code:: python

    cuadrados[-2:]




.. parsed-literal::

    [16, 25]



Los índices pueden ser positivos (empezando desde cero) o negativos
empezando desde -1.

================== == == == ==
cuadrados:         1  9  16 25
================== == == == ==
índices:           0  1  2  3
índices negativos: -4 -3 -2 -1
================== == == == ==

.. note::  La asignación entre listas **no copia**
  
  

.. code:: python

    a = cuadrados
    a is cuadrados




.. parsed-literal::

    True



.. code:: python

    print(a)
    cuadrados[0]= -1
    print(a)
    print(cuadrados)


.. parsed-literal::

    [1, 9, 16, 25]
    [-1, 9, 16, 25]
    [-1, 9, 16, 25]


.. code:: python

    a is cuadrados




.. parsed-literal::

    True



.. code:: python

    b = cuadrados.copy()
    print(b)
    print(cuadrados)
    cuadrados[0]=-2
    print(b)
    print(cuadrados)


.. parsed-literal::

    [-1, 9, 16, 25]
    [-1, 9, 16, 25]
    [-1, 9, 16, 25]
    [-2, 9, 16, 25]


Operaciones sobre listas
~~~~~~~~~~~~~~~~~~~~~~~~

Veamos algunas operaciones que se pueden realizar sobre listas. Por
ejemplo, se puede fácilmente:

-  concatenar dos listas,
-  buscar un valor dado,
-  agregar elementos,
-  borrar elementos,
-  calcular su longitud,
-  invertirla

Empecemos concatenando dos listas, usando el operador “suma”

.. code:: python

    L1 = [0,1,2,3,4,5]

.. code:: python

    L = 2*L1

.. code:: python

    L




.. parsed-literal::

    [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]



.. code:: python

    2*L == L + L




.. parsed-literal::

    True



.. code:: python

    L.index(3)                      # Índice del elemento de valor 3




.. parsed-literal::

    3



.. code:: python

    L.index(3,4)                # Índice del valor 3, empezando del cuarto




.. parsed-literal::

    9



.. code:: python

    L.count(3)                      # Cuenta las veces que aparece el valor "3"




.. parsed-literal::

    2



Las listas tienen definidos métodos, que podemos ver con la ayuda
incluida, por ejemplo haciendo ``help(list)``

Si queremos agregar un elemento al final utilizamos el método
``append``:

.. code:: python

    print(L)


.. parsed-literal::

    [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]


.. code:: python

    L.append(8)


.. code:: python

    print(L)


.. parsed-literal::

    [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 8]


.. code:: python

    L.append([9, 8, 7])
    print(L)


.. parsed-literal::

    [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 8, [9, 8, 7]]


Si queremos insertar un elemento en una posición que no es el final de
la lista, usamos el método ``insert()``. Por ejemplo para insertar el
valor 6 en la primera posición:

.. code:: python

    L.insert(0,6)
    print(L)


.. parsed-literal::

    [6, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 8, [9, 8, 7]]


.. code:: python

    L.insert(7,6)
    print(L)


.. parsed-literal::

    [6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 8, [9, 8, 7]]


.. code:: python

    L.insert(-2,6)
    print(L)


.. parsed-literal::

    [6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 8, [9, 8, 7]]


En las listas podemos sobreescribir uno o más elementos

.. code:: python

    L[0:3] = [2,3,4]
    print(L)


.. parsed-literal::

    [2, 3, 4, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 8, [9, 8, 7]]


.. code:: python

    L[-2:]=[0,1]
    print(L)


.. parsed-literal::

    [2, 3, 4, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1]


.. code:: python

    print(L)
    L.remove(3)                     # Remueve la primera ocurrencia de 3
    print(L)


.. parsed-literal::

    [2, 3, 4, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1]
    [2, 4, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1]


Tuplas
~~~~~~

Las tuplas son objetos similares a las listas, sobre las que se puede
iterar y seleccionar partes según su índice. La principal diferencia es
que son inmutables mientras que las listas pueden modificarse. Los
ejemplos anteriores del tipo ``L[0] = -9`` resulta en un error si lo
intentamos con tuplas

.. code:: python

    L1 = [0,1,2,3,4,5] # Las listas se definen con corchetes
    T1 = (0,1,2,3,4,5) # Las tuplas se definen con paréntesis

.. code:: python

    L1[0] = -1
    print(f"{L1[0] = }")
    print(f"L1[0] = {L1[0]}")


.. parsed-literal::

    L1[0] = -1
    L1[0] = -1


.. code:: python

    try:
        T1[0] = -1
        print(f"{T1[0] = }")
    except:
        print('Tuples son inmutables')


.. parsed-literal::

    Tuples son inmutables


Las tuplas se usan cuando uno quiere crear una “variable” que no va a
ser modificada. Además códigos similares con tuplas pueden ser un poco
más rápidos que si usan listas.

Un uso común de las tuplas es el de asignación simultánea a múltiples
variables:

.. code:: python

    a, b, c = (1, 3, 5)

.. code:: python

    print(a, b, c)


.. parsed-literal::

    1 3 5


.. code:: python

    # Los paréntesis son opcionales en este caso
    a, b, c = 4, 5, 6
    print(a,b,c)


.. parsed-literal::

    4 5 6


Un uso muy común es el de intercambiar el valor de dos variables

.. code:: python

    print(a,b)
    a, b = b, a                     # swap 
    print(a,b)


.. parsed-literal::

    4 5
    5 4


Rangos
~~~~~~

Los objetos de tipo
`range <https://docs.python.org/es/3/library/stdtypes.html#ranges>`__
representan una secuencia inmutable de números y se usan habitualmente
para ejecutar un bucle
`for <https://docs.python.org/es/3/reference/compound_stmts.html#for>`__
un número determinado de veces. El formato es:

::

   range(stop)
   range(start, stop)
   range(start, stop, step)

.. code:: python

    range(2)




.. parsed-literal::

    range(0, 2)



.. code:: python

    type(range(2))




.. parsed-literal::

    range



.. code:: python

    range(2,9)




.. parsed-literal::

    range(2, 9)



.. code:: python

    list(range(2,9))




.. parsed-literal::

    [2, 3, 4, 5, 6, 7, 8]



.. code:: python

    list(range(2,9,2))




.. parsed-literal::

    [2, 4, 6, 8]



Comprensión de Listas
~~~~~~~~~~~~~~~~~~~~~

Una manera sencilla de definir una lista es utilizando algo que se llama
*Comprensión de listas*. Como primer ejemplo veamos una lista de
*números cuadrados* como la que escribimos anteriormente. En lenguaje
matemático la defiríamos como
:math:`S = \{x^{2} : x \in \{0 \dots 9\}\}`. En python es muy parecido.

Podemos crear la lista ``cuadrados`` utilizando compresiones de listas

.. code:: python

    cuadrados = [i**2 for i in range(10)]
    cuadrados




.. parsed-literal::

    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]



Una lista con los cuadrados sólo de los números pares también puede
crearse de esta manera, ya que puede incorporarse una condición:

.. code:: python

    L = [a**2 for a in range(2,21) if a % 2 == 0]
    L




.. parsed-literal::

    [4, 16, 36, 64, 100, 144, 196, 256, 324, 400]



.. code:: python

    sum(L)




.. parsed-literal::

    1540



.. code:: python

    list(reversed(L))




.. parsed-literal::

    [400, 324, 256, 196, 144, 100, 64, 36, 16, 4]



Módulos
-------

Los módulos son el mecanismo de Python para reusar código. Además, ya
existen varios módulos que son parte de la biblioteca *standard*. Su uso
es muy simple, para poder aprovecharlo necesitaremos saber dos cosas:

-  Qué funciones están ya definidas y listas para usar
-  Cómo acceder a ellas

Empecemos con la segunda cuestión. Para utilizar las funciones debemos
*importarlas* en la forma ``import modulo``, donde modulo es el nombre
que queremos importar.

Esto nos lleva a la primera cuestión: cómo saber ese nombre, y que
funciones están disponibles. La respuesta es: **la documentación**.

Una vez importado, podemos utilizar constantes y funciones definidas en
el módulo con la notación “de punto”: ``modulo.funcion()``.

Módulo math
~~~~~~~~~~~

El módulo **math** contiene las funciones más comunes (trigonométricas,
exponenciales, logaritmos, etc) para operar sobre números de *punto
flotante*, y algunas constantes importantes (pi, e, etc). En realidad es
una interface a la biblioteca math en C.

.. code:: python

    import math
    # algunas constantes y funciones elementales
    raiz5pi= math.sqrt(5*math.pi)
    print (raiz5pi, math.floor(raiz5pi), math.ceil(raiz5pi))
    print (math.e, math.floor(math.e), math.ceil(math.e))
    # otras funciones elementales
    print (math.log(1024,2), math.log(27,3))
    print (math.factorial(7), math.factorial(9), math.factorial(10))
    print ('Combinatorio: C(6,2):',math.factorial(6)/(math.factorial(4)*math.factorial(2)))



.. parsed-literal::

    3.963327297606011 3 4
    2.718281828459045 2 3
    10.0 3.0
    5040 362880 3628800
    Combinatorio: C(6,2): 15.0


A veces, sólo necesitamos unas pocas funciones de un módulo. Entonces
para abreviar la notación combiene importar sólo lo que vamos a usar,
usando la notación:

``from xxx import yyy``

.. code:: python

    from math import sqrt, pi, log
    import math
    raiz5pi = sqrt(5*pi)
    print (log(1024, 2))
    print (raiz5pi, math.floor(raiz5pi))


.. parsed-literal::

    10.0
    3.963327297606011 3


.. code:: python

    import math as m
    m.sqrt(3.2)




.. parsed-literal::

    1.7888543819998317



.. code:: python

    import math
    print(math.sqrt(-1))

Módulo ``cmath``
~~~~~~~~~~~~~~~~

El módulo ``math`` no está diseñado para trabajar con números complejos,
para ello existe el módulo **cmath**

.. code:: python

    import cmath
    print('Usando cmath (-1)^0.5=', cmath.sqrt(-1))
    print(cmath.cos(cmath.pi/3 + 2j))



.. parsed-literal::

    Usando cmath (-1)^0.5= 1j
    (1.8810978455418161-3.1409532491755083j)


Si queremos calcular la fase (el ángulo que forma con el eje x) podemos
usar la función phase

.. code:: python

    z = 1 + 0.5j
    cmath.phase(z)                  # Resultado en radianes




.. parsed-literal::

    0.4636476090008061



.. code:: python

    math.degrees(cmath.phase(z))    # Resultado en grados




.. parsed-literal::

    26.56505117707799



--------------

Ejercicios 02 (b)
-----------------

3. Manejos de listas:

   -  Cree la lista **N** de longitud 50, donde cada elemento es un
      número entero de 1 a 50 inclusive (Ayuda: vea la expresión
      ``range``).
   -  Invierta la lista.
   -  Extraiga una lista **N2** que contenga sólo los elementos pares de
      **N**.
   -  Extraiga una lista **N3** que contenga sólo aquellos elementos que
      sean el cuadrado de algún número entero.

4. Cree una lista de la forma ``L = [1,3,5,...,17,19,19,17,...,3,1]``

5. Operación “rara” sobre una lista:

   -  Defina la lista ``L = [0,1]``
   -  Realice la operación ``L.append(L)``
   -  Ahora imprima L, e imprima el último elemento de ``L``.
   -  Haga que una nueva lista ``L1`` tenga el valor del último elemento
      de ``L`` y repita el inciso anterior.

6. Utilizando funciones y métodos de *strings* en la cadena de
   caracteres:

.. code:: python

   s1='En un lugar de la Mancha de cuyo nombre no quiero acordarme'

-  Obtenga la cantidad de caracteres.

-  Imprima la frase anterior pero con cada palabra empezando en
   mayúsculas.

-  | Cuente cuantas letras ‘a’ tiene la frase, ¿cuántas vocales tiene?

-  Imprima el string ``s1`` centrado en una línea de 80 caracteres,
   rodeado de guiones en la forma:

   ———-En un lugar de la Mancha de cuyo nombre no quiero acordarme———–

-  Obtenga una lista **L1** donde cada elemento sea una palabra de la
   oración.

-  Cuente la cantidad de palabras en ``s1`` (utilizando python).

-  Ordene la lista **L1** en orden alfabético.

-  Ordene la lista **L1** tal que las palabras más cortas estén primero.

-  Ordene la lista **L1** tal que las palabras más largas estén primero.

-  Construya un string **s2** con la lista del resultado del punto
   anterior.

-  Encuentre la palabra más larga y la más corta de la frase.

7. Escriba un script que encuentre las raíces de la ecuación cuadrática
   :math:`a x^{2} + bx +c = 0`. Los valores de los parámetros defínalos
   en el mismo script, un poco más arriba.

8. Considere un polígono regular de :math:`N` lados inscripto en un
   círculo de radio unidad:

   -  Calcule el ángulo interior del polígono regular de :math:`N` lados
      (por ejemplo el de un triángulo es 60 grados, de un cuadrado es 90
      grados, y de un pentágono es 108 grados). Exprese el resultado en
      grados y en radianes para valores de
      :math:`N= 3, 5, 6, 8, 9, 10, 12`.
   -  ¿Puede calcular la longitud del lado de los polígonos regulares si
      se encuentran inscriptos en un círculo de radio unidad?

9. Escriba un *script* (llamado distancia1.py) que defina las variables
   velocidad y posición inicial :math:`v_{0}`, :math:`z_{0}`, la
   aceleración :math:`g`, y la masa :math:`m=1` kg a tiempo :math:`t=0`,
   y calcule e imprima la posición y velocidad a un tiempo posterior
   :math:`t`. Ejecute el programa para varios valores de posición y
   velocidad inicial para :math:`t=2` segundos. Recuerde que las
   ecuaciones de movimiento con aceleración constante son:

   .. math:: v = v_0 - g t  \\  z = z_0 + v_0 t - g t^2/2.

Adicionales
~~~~~~~~~~~

11. Calcular la suma:

    .. math:: s_{1} = \frac{1}{2} \left(\sum_{k=0}^{100}k \right)^{-1}

    *Ayuda*: busque información sobre la función ``sum()``

12. Construir una lista ``L2`` con 2000 elementos, todos iguales a
    ``0.0005``. Imprimir su suma utilizando la función ``sum`` y
    comparar con la función que existe en el módulo ``math`` para
    realizar suma de números de punto flotante.

--------------

.
