.. _clase_09:

Clase 9: Visualización 
========================


Para graficar datos y funciones vamos a usar la biblioteca
**Matplotlib**. Vamos a empezar discutiendo algunas de las
características más generales del trabajo con esta biblioteca y mostrar
algún ejemplo relativamente sencillo. Matplotlib está dividido en tres
partes o capas conceptualmente bien delimitadas:

-  Una parte es la que hace el trabajo más pesado administrando cada
   parte del gráfico (líneas, texto, figuras, etc)
-  Una segunda parte que permite un uso simple de las funciones
   anteriores: El módulo **pyplot**.
-  Una tercera parte que se encarga de presentar la figura en el formato
   adecuado. Esto es lo que se llama el *“Backend”* y se encarga de
   mostrar la figura en los distintos sistemas de ventanas, o en
   formatos de archivos correspondientes. Algunos ejemplos de *backend*
   son: PS (copias PostScript®), SVG (Scalable Vector Graphics), Agg
   (salida PNG de muy buena calidad), Cairo (png, pdf, ps, svg), GTK
   (interactivo, permite integrar matplotlib con aplicaciones Gtk+, que
   usa GNOME), PDF, WxWidgets (interactivo), Qt (interactivo).

Nosotros vamos a concentrarnos principalmente en aprender a utilizar
**pyplot**

Interactividad
--------------

Trabajo con ventanas emergentes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Para trabajar en forma interactiva con gráficos vamos a hacerlo desde
una terminal de ``Ipython``

.. code:: python

     import matplotlib.pyplot as plt # o equivalentemente:
     # from matplotlib import pyplot as plt
     plt.plot([0,1,4,9,16,25])

El comando (la función) ``plot()`` crea el gráfico pero no lo muestra.
Lo hacemos explícitamente con el comando ``show()``

.. code:: python

     plt.show()

Vemos que es muy simple graficar datos.

Algunas cosas a notar:

1. Se abre una ventana
2. Se bloquea la terminal (no podemos dar nuevos comandos)
3. Si pasamos el *mouse* sobre el gráfico nos muestra las coordenadas.
4. Además del gráfico hay una barra de herramientas: .. image:: figuras/matplotlib_toolbar.png

 De derecha
   a izquierda tenemos:

-  **Grabar:** Este botón abre una ventana para guardar el gráfico en
   alguno de los formatos disponibles.

-  **Configuración de subplots:** Permite modificar el tamaño y posición
   de cada gráfico en la ventana.

-  **Agrandar (zoom) a rectángulo:**

   -  Si elegimos una región mientras apretamos el botón **izquierdo**,
      esta será la nueva región visible ocupando toda la ventana.
   -  Si elegimos una región mientras apretamos el botón **derecho**,
      pone toda la vista actual en esta región.

-  **Desplazar y agrandar (Pan and zoom):** Este botón cumple dos
   funciones diferentes:

   -  Con el botón izquierdo desplaza la vista.
   -  Con el botón derecho la vista se agrandará achicará en los ejes
      horizontal y vertical en una cantidad proporcional al movimiento.

   Si se oprime las teclas ``x`` o ``y`` las dos funciones quedan
   restringidas al eje correspondiente.

-  **Home, Back, Forward** son botones que nos llevan a la vista
   original, una vista hacia atrás o hacia adelante respectivamente


Si ocurre, como en este caso, que proveemos sólo una lista de datos, la
función ``plot()`` la interpreta como los valores correspondientes al
eje vertical (eje y), y toma el índice del dato para la variable
independiente (eje x). Si queremos dar valores explícitamente para el
eje x debemos pasarlos como primer argumento.

.. code:: python

   plt.plot([0,1,2,3,4,5],[0,1,4,9,16,25])
   plt.show()

Como vemos, para que muestre la ventana debemos hacer un llamado
explícito a la función ``show()``. Esto es así porque muchas veces
queremos realizar más de una operación sobre un gráfico antes de
mostrarlo. Sin embargo, hay varias alternativas respecto a la
interactividad de matplotlib (e ipython) que permiten adecuarla a
nuestro flujo de trabajo. La manera más común en una terminal es
utilizando las función ``ion()`` (**i**\ nteractive **on**) para hacerlo
interactivo y la función ``ioff()`` para no interactivo.

.. code:: python

   plt.ion()           # Prendemos el modo interactivo
   plt.plot([0,1,2,3,4,5],[0,1,4,9,16,25])

En el modo interactivo no sólo ``plot()`` tiene implícito el comando
``show()`` sino que podemos seguir ingresando comandos con el gráfico
abierto.

Trabajo sobre notebooks
~~~~~~~~~~~~~~~~~~~~~~~

Para trabajar en *ipython notebooks* suele ser conveniente realizar los
gráficos dentro de la misma página donde realizamos los cálculos. Si
esto no ocurre automáticamente, se puede obtener con la siguiente línea:

.. code:: python

   %matplotlib inline

.. code:: python

    import matplotlib.pyplot as plt
    # %matplotlib inline
    plt.plot([1,2,3,4,5,6],[0,1,4,9,16,25])




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fa9f8f9ef90>]




.. image:: figuras/09_intro_visualizacion_10_1.png


En la práctica vamos a usar siempre **Matplotlib** junto con **Numpy**.

.. code:: python

    import numpy as np
    import matplotlib.pyplot as plt

Gráficos simples
----------------

El paquete *Matplotlib* permite visualizar datos guardados en un archivo
con unas pocas líneas

.. code:: python

    fdatos = '../data/ej_oscil_aten_err.dat'

.. code:: python

    x, y, yexp = np.loadtxt(fdatos, unpack=True)
    plt.plot(x, y)




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fa9f8f1a790>]




.. image:: figuras/09_intro_visualizacion_16_1.png


Como vemos, es la curva que graficamos la clase anterior.

Si miramos el archivo vamos a ver que tiene una columna más que
corresponde a los valores medidos. En consecuencia le asignamos esta
tercera columna a una variable adicional ``yexp`` al leerlo.

.. code:: python

    !head ../data/ej_oscil_aten_err.dat


.. parsed-literal::

    #   x           teo           exp
    0.0000000e+00 0.0000000e+00 0.0000000e+00
    1.0507000e-02 1.1576170e-05 1.4544540e-05
    2.1014000e-02 9.2052870e-05 7.5934893e-05
    3.1521000e-02 3.0756500e-04 1.8990066e-04
    4.2028000e-02 7.1879320e-04 6.1217896e-04
    5.2534990e-02 1.3784280e-03 1.2133173e-03
    6.3041990e-02 2.3288570e-03 9.5734774e-04
    7.3548990e-02 3.6001450e-03 3.5780825e-03
    8.4055990e-02 5.2083560e-03 4.4485492e-03


.. code:: python

    # Graficamos las segunda y tercera columna como función de la primera
    plt.plot(x,yexp, x,y)




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fa9f8f07850>,
     <matplotlib.lines.Line2D at 0x7fa9f8f07ad0>]




.. image:: figuras/09_intro_visualizacion_19_1.png


Formato de las curvas
---------------------

En los gráficos anteriores usamos la función ``plot()`` en sus formas
más simples.

.. code:: python

   plot(y)
   plot(x,y)
   plot(x1,y1, x2, y2)

dando a la función ``plot()`` la información mínima necesaria para
graficar los datos. Usualmente queremos poder elegir cómo vamos a
graficar nuestros datos.

Líneas, símbolos y colores
~~~~~~~~~~~~~~~~~~~~~~~~~~

La forma más simple de elegir el modo de graficación de la curva es a
través de un tercer argumento. Este argumento, que aparece
inmediatamente después de los datos (x e y), permite controlar el tipo
de línea o símbolo utilizado en la graficación. En el caso de la línea
sólida se puede especificar con un guión (‘-’) o simplemente no poner
nada, ya que línea sólida es el símbolo por defecto. Las dos
especificaciones anteriores son equivalentes. También se puede elegir el
color, o el símbolo a utilizar con este argumento:

.. code:: python

   plot(x,y,'g-')
   plot(x,y,'ro')
   plot(x,y,'r-o')

.. image:: figuras/matplotlib_toolbar.png



Para obtener círculos usamos una especificación que corresponde a ‘o’.
Además podemos poner en este argumento el color. En este caso elegimos
graficar en color “rojo (r), con una línea (-) + círculos (o)”.

Con esta idea modificamos el gráfico anterior


.. code:: python

    plt.plot(x,y,'-', x,yexp, 'ro')




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fa9f8857d90>,
     <matplotlib.lines.Line2D at 0x7fa9f8857fd0>]




.. image:: figuras/09_intro_visualizacion_22_1.png


Para graficar más de una curva, en este formato simple, podemos ponerlo
todo en la misma función ``plot()`` en la forma
``plot(x1, y1, [formato], x2, y2, [formato2])`` pero muchas veces es más
legible separar los llamados a la función, una para cada curva.

.. code:: python

    plt.plot(x,y, '-')
    plt.plot(x,yexp, 'or')




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fa9f8805a90>]




.. image:: figuras/09_intro_visualizacion_24_1.png


Al separar los llamados a la función ``plot()`` obtenemos un código más
claro, principalmente cuando agregamos opciones de formato.

Los siguientes caracteres pueden utilizarse para controlar el símbolo de
graficación:

======= =====================
Símbolo Descripción
======= =====================
‘-’     solid line style
‘–’     dashed line style
‘-.’    dash-dot line style
‘:’     dotted line style
‘.’     point marker
‘,’     pixel marker
‘o’     circle marker
‘v’     triangle down marker
‘^’     triangle up marker
‘<’     triangle left marker
‘>’     triangle right marker
‘1’     tri down marker
‘2’     tri up marker
‘3’     tri left marker
‘4’     tri right marker
‘s’     square marker
‘p’     pentagon marker
‘\*’    star marker
‘h’     hexagon1 marker
‘H’     hexagon2 marker
‘+’     plus marker
‘x’     x marker
‘D’     diamond marker
‘d’     thin diamond marker
‘\|’    vline marker
‘\_’    hline marker
======= =====================

Los colores también pueden elegirse usando los siguientes caracteres:

===== =======
Letra Color
===== =======
‘b’   blue
‘g’   green
‘r’   red
‘c’   cyan
‘m’   magenta
‘y’   yellow
‘k’   black
‘w’   white
===== =======

Por ejemplo, utilizando:

.. code:: python

   plt.plot(x, y1, 'gs', x, y2, '-k^', x, y3, '--r' )

obtenemos: .. image:: figuras/matplotlib_toolbar.png




La función ``plot()`` acepta un número variable de argumentos. Veamos lo
que dice la documentación

.. code:: python


   Signature: plt.plot(*args, **kwargs)
   Docstring:
   Plot y versus x as lines and/or markers.

   Call signatures::

       plot([x], y, [fmt], data=None, **kwargs)
       plot([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)

En particular, podemos usar los argumentos *keywords* (pares
nombre-valor) para cambiar el modo en que se grafican los datos. Algunos
de los más comunes son:

=============== ============================
Argumento       Valor
=============== ============================
linestyle       {‘-’, ‘–’, ‘-.’, ‘:’, ’’, …}
linewidth       número real
color           un color
marker          {‘o’, ‘s’, ‘d’, ….}
markersize      número real
markeredgecolor color
markerfacecolor color
markevery       número entero
=============== ============================

.. code:: python

    plt.plot(x,y,linewidth=1)
    plt.plot(x,yexp, 'o', color='red', markersize=2)




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fa9f86fba50>]




.. image:: figuras/09_intro_visualizacion_28_1.png


.. code:: python

    plt.plot(x,y,linewidth=5)
    plt.plot(x,yexp, 'o', color='green', markersize=8)




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fa9f86ea410>]




.. image:: figuras/09_intro_visualizacion_29_1.png


.. code:: python

    plt.plot(x,y,linewidth=5, linestyle='dashed')
    plt.plot(x,yexp, 'o', color='red', markersize=8, markeredgecolor='black',markevery=4)




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fa9f85c9990>]




.. image:: figuras/09_intro_visualizacion_30_1.png


Nombres de ejes y leyendas
~~~~~~~~~~~~~~~~~~~~~~~~~~

Vamos ahora a agregar nombres a los ejes y a las curvas.

Para agregar nombres a las curvas, tenemos que agregar un ``label``, en
este caso en el mismo comando ``plot()``, y luego mostrarlo con
\`legend()

.. code:: python

    plt.plot(x,y, '-b', label="teoría")
    plt.plot(x,yexp, 'or', label="medición")
    plt.legend(loc="lower right", title="Mis datos")




.. parsed-literal::

    <matplotlib.legend.Legend at 0x7fa9f8559c50>




.. image:: figuras/09_intro_visualizacion_32_1.png


Para agregar nombres a los ejes usamos ``xlabel`` y ``ylabel``:

.. code:: python

    plt.plot(x,yexp, 'or', label="medición")
    plt.plot(x,y, '-b', label="teoría")
    plt.legend(loc="lower right", title="Mis datos")
    plt.xlabel('Tiempo (micro-segundos)')
    plt.ylabel("Voltaje (mV)");



.. image:: figuras/09_intro_visualizacion_34_0.png


Los títulos a la figura se pueden agregar con ``title``

.. code:: python

    plt.plot(x,y, '-b', label="teoría")
    plt.plot(x,yexp, 'or', label="medición")
    plt.legend(loc="lower right", title="Mis datos")
    plt.xlabel('Tiempo (micro-segundos)')
    plt.ylabel("Voltaje (mV)")
    plt.title("Medición de ayer")
    plt.axvline(x=1, color='gray')
    plt.axhline(color='gray')




.. parsed-literal::

    <matplotlib.lines.Line2D at 0x7fa9f83d68d0>




.. image:: figuras/09_intro_visualizacion_36_1.png


Acá además agregamos una línea vertical y una horizontal.

Ejercicios 09 (a)
-----------------

1. Realizar un programa para visualizar la función

   .. math::  f(x,n,w) = x^n |\sin(w x)| 

   El programa debe realizar el gráfico para :math:`w=10`, con cuatro
   curvas para :math:`n=1,2,3,4`, similar al que se muestra en la
   siguiente figura

   .. image:: figuras/matplotlib_toolbar.png




Escalas y límites de graficación (vista)
----------------------------------------

Para cambiar los límites de graficación se puede usar las funciones
``xlim`` para el eje horizontal y ``ylim`` para el vertical

.. code:: python

    plt.plot(x,y, '-b', label="teoría")
    plt.plot(x,yexp, 'or', label="medición")
    plt.legend(loc="lower right", title="Mis datos")
    plt.xlabel('Tiempo (micro-segundos)')
    plt.ylabel("Voltaje (mV)")
    plt.title("Medición de ayer")
    plt.axvline(x=1, color='gray')
    plt.axhline(color='gray')
    plt.xlim((0,2.5))
    plt.ylim((-0.4, 0.32))




.. parsed-literal::

    (-0.4, 0.32)




.. image:: figuras/09_intro_visualizacion_40_1.png


Para pasar a escala logarítmica usamos ``xscale`` o ``yscale``

.. code:: python

    plt.plot(x,y, '-b', label="teoría")
    plt.plot(x,yexp, 'or', label="medición")
    plt.legend(loc="best", title="Mis datos")
    plt.xlabel('Tiempo (micro-segundos)')
    plt.ylabel("Voltaje (mV)")
    plt.title("Medición de ayer")
    plt.axvline(x=1, color='gray')
    plt.axhline(color='gray')
    plt.xlim((1.e-1,3))
    plt.xscale('log')
    plt.ylim((-0.4, 0.32))




.. parsed-literal::

    (-0.4, 0.32)




.. image:: figuras/09_intro_visualizacion_42_1.png


.. code:: python

    plt.plot(x,1+y, '-b', label="teoría")
    plt.plot(x,1+yexp, 'or', label="medición")
    plt.legend(loc="best", title="Mis datos")
    plt.xlabel('Tiempo (micro-segundos)')
    plt.ylabel("Voltaje (mV)")
    plt.title("Medición de ayer")
    plt.axvline(x=1, color='gray')
    plt.axhline(color='gray')
    plt.xlim((1.e-1,3))
    plt.xscale('log')
    plt.yscale('log')
    plt.ylim((0.6, 1.4))




.. parsed-literal::

    (0.6, 1.4)




.. image:: figuras/09_intro_visualizacion_43_1.png


Exportar las figuras
--------------------

Para guardar las figuras en alguno de los formatos disponibles
utilizamos la función ``savefig()``.

.. code:: python

    foname = 'ej_plot_osc'
    plt.plot(x,y, '-b', label=r"$\frac{\sin(x^2)}{[2 + \cos (x)]^2}$")
    plt.plot(x,yexp, 'or', label="$\mathrm{Medición}$")
    plt.legend(loc="best", title="Mis datos", fontsize='x-large')
    plt.xlabel(r'Tiempo ($\mu$-segundos)', fontsize='x-large')
    plt.ylabel("Voltaje (mV)", fontsize='x-large')
    plt.title("Medición de ayer")
    plt.axvline(x=1, color='gray')
    plt.axhline(color='gray')
    plt.xlim((0,3))
    plt.ylim((-0.4, 0.32))
    plt.grid(color='green', linestyle='dashed', linewidth=1)
    plt.savefig('{}.png'.format(foname), dpi=200)
    plt.savefig('{}.pdf'.format(foname))



.. image:: figuras/09_intro_visualizacion_45_0.png


.. code:: python

    help(plt.grid)


.. parsed-literal::

    Help on function grid in module matplotlib.pyplot:
    
    grid(b=None, which='major', axis='both', **kwargs)
        Configure the grid lines.
        
        Parameters
        ----------
        b : bool or None, optional
            Whether to show the grid lines. If any *kwargs* are supplied,
            it is assumed you want the grid on and *b* will be set to True.
        
            If *b* is *None* and there are no *kwargs*, this toggles the
            visibility of the lines.
        
        which : {'major', 'minor', 'both'}, optional
            The grid lines to apply the changes on.
        
        axis : {'both', 'x', 'y'}, optional
            The axis to apply the changes on.
        
        **kwargs : `.Line2D` properties
            Define the line properties of the grid, e.g.::
        
                grid(color='r', linestyle='-', linewidth=2)
        
            Valid *kwargs* are
        
          agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
          alpha: float
          animated: bool
          antialiased or aa: bool
          clip_box: `.Bbox`
          clip_on: bool
          clip_path: [(`~matplotlib.path.Path`, `.Transform`) | `.Patch` | None]
          color or c: color
          contains: callable
          dash_capstyle: {'butt', 'round', 'projecting'}
          dash_joinstyle: {'miter', 'round', 'bevel'}
          dashes: sequence of floats (on/off ink in points) or (None, None)
          drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'
          figure: `.Figure`
          fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}
          gid: str
          in_layout: bool
          label: object
          linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
          linewidth or lw: float
          marker: marker style
          markeredgecolor or mec: color
          markeredgewidth or mew: float
          markerfacecolor or mfc: color
          markerfacecoloralt or mfcalt: color
          markersize or ms: float
          markevery: None or int or (int, int) or slice or List[int] or float or (float, float)
          path_effects: `.AbstractPathEffect`
          picker: float or callable[[Artist, Event], Tuple[bool, dict]]
          pickradius: float
          rasterized: bool or None
          sketch_params: (scale: float, length: float, randomness: float)
          snap: bool or None
          solid_capstyle: {'butt', 'round', 'projecting'}
          solid_joinstyle: {'miter', 'round', 'bevel'}
          transform: `matplotlib.transforms.Transform`
          url: str
          visible: bool
          xdata: 1D array
          ydata: 1D array
          zorder: float
        
        Notes
        -----
        The axis is drawn as a unit, so the effective zorder for drawing the
        grid is determined by the zorder of each axis, not by the zorder of the
        `.Line2D` objects comprising the grid.  Therefore, to set grid zorder,
        use `.set_axisbelow` or, for more control, call the
        `~matplotlib.axis.Axis.set_zorder` method of each axis.
    


Acá también hemos utilizado formato tipo LaTeX para parte del texto. Si
utilizamos una expresión encerrada entre los símbolos ``$``, matplotlib
interpreta que está escrito en (un subconjunto) de LaTeX.

**Matplotlib** tiene un procesador de símbolos interno para mostrar la
notación en LaTeX que reconoce los elementos más comunes, o puede
elegirse utilizar un procesador LaTeX externo.

Dos gráficos en la misma figura
-------------------------------

Hay varias funciones que permiten poner más de un gráfico en la misma
figura. Veamos un ejemplo utilizando la función ``subplots()``

.. code:: python

    %pwd




.. parsed-literal::

    '/home/fiol/trabajo/clases/pythons/clases-python/clases'



.. code:: python

    # %load scripts/ejemplo_08_5.py
    #! /usr/bin/ipython3
    
    """ Script realizado durante la clase 8. Dos figuras """
    from os.path import join
    
    import numpy as np
    import matplotlib.pyplot as plt
    plt.ion()
    
    fname = 'ej_oscil_aten_err'
    # Levantamos los datos
    pardir = '..'
    datfile = join(pardir, 'data/{}.dat'.format(fname))
    
    x1, y1, y2 = np.loadtxt(datfile, unpack=True)
    # Vamos a graficar sólo algunos valores (uno de cada 5)
    x = x1[3:-10:5]
    y = y1[3:-10:5]
    yexp = y2[3:-10:5]
    
    # Ejemplo de barras de error que dependen del eje x
    error = 0.05 + 0.3 * y
    
    fig, (ax0, ax1) = plt.subplots(num='subplots', nrows=2, sharex=True)
    ax0.errorbar(x, yexp, yerr=error, fmt='-o')
    ax1.plot(x, 2 * (yexp - y) / (yexp + y), 'or', markersize=8)
    
    
    # Límites de graficación y títulos
    ax0.set_title('Datos con error variable')
    ax1.set_title('Error relativo')
    ax0.set_ylabel('Voltaje (mV)', fontsize='x-large')
    ax1.set_xlabel(r'Tiempo ($\mu$-seg)', fontsize='x-large')
    ax1.set_ylabel('Error relativo', fontsize='x-large')
    ax1.set_xlim((0, 3))
    
    # Guardamos el resultado
    plt.savefig('{}.png'.format(fname), dpi=72)




.. image:: figuras/09_intro_visualizacion_50_0.png


Ejercicios 09 (b)
-----------------

2. Para la función definida a trozos:

   .. math::


      f(x) =
      \begin{cases}
        f_{1}(x) = x^{2}/8 & - \pi < x \le \pi/2  \\
        f_{2}(x) = -0.3 x  & \pi/2 < x < \pi \\
        f_{3}(x) = -(x - 2 \pi)^{2}/6 & \pi \le x \le 5 \pi/2 \\
        f_{4}(x) = (x - 2 \pi)/5 & 5 \pi/2 < x \le 3 \pi
        \end{cases}

   realizar la siguiente figura de la manera más fiel posible.

   .. image:: figuras/matplotlib_toolbar.png



   **Pistas:** Buscar información sobre ``plt.fill_between()`` y sobre
   ``plt.xticks`` y ``plt.yticks``.

3. Rehacer la siguiente figura:

   .. image:: figuras/ejercicio_08_2.png




Personalizando el modo de visualización
---------------------------------------

**Matplotlib** da la posibilidad de modificar el estilo de la
graficación en distintas “etapas”.

Archivo de configuración
~~~~~~~~~~~~~~~~~~~~~~~~

Cuando uno carga el módulo busca un archivo de configuración llamado
``matplotlibrc``

1. Primero busca un archivo de configuración en el directorio de trabajo
   también lo lee. En cada caso sobreescribe las variables.
2. Si la variable ``MATPLOTLIBRC`` existe (para el usuario), busca el
   archivo ``$MATPLOTLIBRC/matplotlibrc``
3. Luego lee un archivo de configuración global del usuario, que
   dependiendo del sistema operativo puede ser: \* En Linux,
   ``config/matplotlib/matplotlibrc`` (o en
   ``$XDG_CONFIG_HOME/matplotlib/matplotlibrc`` si la variable
   ``XDG_CONFIG_HOME`` existe) \* En otras plataformas puede estar en
   algún lugar como: ``C:\Documents and Settings\USUARIO\.matplotlib``
4. Finalmente lee el archivo global de la instalación,
   ``INSTALL/matplotlib/mpl-data/matplotlibrc``, donde INSTALL se
   refiere al lugar de instalación

En cualquier caso, podemos obtener el directorio y archivo de
configuración con las funciones:

.. code:: python

    import matplotlib

.. code:: python

    matplotlib.get_configdir()




.. parsed-literal::

    '/home/fiol/.config/matplotlib'



.. code:: python

    matplotlib.matplotlib_fname()




.. parsed-literal::

    '/home/fiol/.config/matplotlib/matplotlibrc'



.. code:: python

    !head -n 40 '/home/fiol/.config/matplotlib/matplotlibrc'


.. parsed-literal::

    # -*- mode: Conf[Colon]; -*-
    ### MATPLOTLIBRC FORMAT
    # This is a sample matplotlib configuration file - you can find a copy
    # of it on your system in
    # site-packages/matplotlib/mpl-data/matplotlibrc.  If you edit it
    # there, please note that it will be overwritten in your next install.
    # If you want to keep a permanent local copy that will not be
    # overwritten, place it in HOME/.matplotlib/matplotlibrc (unix/linux
    # like systems) and C:\Documents and Settings\yourname\.matplotlib
    # (win32 systems).
    #
    # This file is best viewed in a editor which supports python mode
    # syntax highlighting. Blank lines, or lines starting with a comment
    # symbol, are ignored, as are trailing comments.  Other lines must
    # have the format
    #    key : val # optional comment
    #
    # Colors: for the color values below, you can either use - a
    # matplotlib color string, such as r, k, or b - an rgb tuple, such as
    # (1.0, 0.5, 0.0) - a hex string, such as ff00ff or #ff00ff - a scalar
    # grayscale intensity such as 0.75 - a legal html color name, eg red,
    # blue, darkslategray
    
    #### CONFIGURATION BEGINS HERE
    
    # the default backend; one of GTK GTKAgg GTKCairo GTK3Agg GTK3Cairo
    # CocoaAgg MacOSX Qt4Agg TkAgg WX WXAgg Agg Cairo GDK PS PDF SVG
    # Template
    # You can also deploy your own backend outside of matplotlib by
    # referring to the module name (which must be in the PYTHONPATH) as
    # 'module://my_backend'
    # backend      : Qt5Agg
    # backend      : GTK3Cairo
    backend : TkAgg
    
    # If you are using the Qt4Agg backend, you can choose here
    # to use the PyQt4 bindings or the newer PySide bindings to
    # the underlying Qt4 toolkit.
    #backend.qt4 : PyQt4        # PyQt4 | PySide
    


Hojas de estilo
~~~~~~~~~~~~~~~

Matplotlib ha incorporado en los últimos años un paquete que permite
cambiar estilos fácilmente utilizando los mismos nombres para los
parámetros que hay en el archivo de configuración ``matplotlibrc``.

Este paquete tiene pre-definidos unos pocos estilos, entre ellos varios
que emulan otros paquetes o programas. Veamos un ejemplo:

.. code:: python

    plt.plot(x,y, x, 0.9*y)




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fa9f8255e50>,
     <matplotlib.lines.Line2D at 0x7fa9f8255290>]




.. image:: figuras/09_intro_visualizacion_58_1.png


.. code:: python

    with plt.style.context('ggplot'):
      plt.plot(x,y, x,0.9*y)



.. image:: figuras/09_intro_visualizacion_59_0.png


.. code:: python

    with plt.style.context('grayscale'):
      plt.plot(x,y, x,0.9*y)



.. image:: figuras/09_intro_visualizacion_60_0.png


.. code:: python

    with plt.style.context('fivethirtyeight'):
      plt.plot(x,y, x,0.9*y)



.. image:: figuras/09_intro_visualizacion_61_0.png


.. code:: python

    with plt.style.context('seaborn-dark'):
      plt.plot(x,y, x,0.9*y)



.. image:: figuras/09_intro_visualizacion_62_0.png


Los estilos disponibles están guardados en la variable ``available``
(una lista)

.. code:: python

    plt.style.available




.. parsed-literal::

    ['seaborn-dark',
     'bmh',
     'seaborn-paper',
     'seaborn-poster',
     'seaborn-deep',
     'ggplot',
     'seaborn-dark-palette',
     'seaborn-bright',
     'seaborn-notebook',
     'seaborn-pastel',
     'seaborn-darkgrid',
     'seaborn-colorblind',
     'seaborn-whitegrid',
     'fast',
     'dark_background',
     'classic',
     'seaborn-muted',
     '_classic_test',
     'seaborn',
     'grayscale',
     'seaborn-talk',
     'fivethirtyeight',
     'seaborn-white',
     'tableau-colorblind10',
     'seaborn-ticks',
     'Solarize_Light2',
     'presentation',
     'paper',
     'darker']



Combinando estilos
^^^^^^^^^^^^^^^^^^

Los estilos pueden combinarse. En este caso, debe pasarse una lista de
*strings* con los nombres de los estilos a aplicar. Se aplican en forma
secuencial. Si dos estilos definen diferentes valores para una variable,
el posterior sobreescribe los valores previos.

.. code:: python

    with plt.style.context(['fivethirtyeight','grayscale']):
      plt.plot(x,y, x,0.9*y)



.. image:: figuras/09_intro_visualizacion_66_0.png


.. code:: python

    with plt.style.context(['grayscale','fivethirtyeight']):
      plt.plot(x,y, x,0.9*y)



.. image:: figuras/09_intro_visualizacion_67_0.png


Creación de estilos propios
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Podemos crear estilos propios, modificando los defaults con una sintaxis
similar a la del archivo de configuración. Por ejemplo creemos un
archivo ‘estilo_test’ con algunos parámetros

.. code:: python

    !echo "lines.linewidth : 5" > estilo_test
    !echo "xtick.labelsize: 24" >> estilo_test

.. code:: python

    !cat estilo_test


.. parsed-literal::

    lines.linewidth : 5
    xtick.labelsize: 24


.. code:: python

    plt.plot(x,y)




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fa9f7e2e150>]




.. image:: figuras/09_intro_visualizacion_71_1.png


.. code:: python

    with plt.style.context('./estilo_test'):
      plt.plot(x,y)



.. image:: figuras/09_intro_visualizacion_72_0.png


Para encontrar el lugar donde guardar las hojas de estilo podemos
utilizar las funciones de *matplotib*:

.. code:: python

    matplotlib.get_configdir()




.. parsed-literal::

    '/home/fiol/.config/matplotlib'



.. code:: python

    ls -1 /home/fiol/.config/matplotlib/stylelib/


.. parsed-literal::

    darker.mplstyle
    darker.mplstyle~
    paper.mplstyle
    presentation.mplstyle


Modificación de parámetros dentro de programas
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Podemos cambiar directamente los parámetros dentro de nuestros programas
modificando el diccionario ``matplotlib.rcParams``

.. code:: python

    import matplotlib as mpl
    mpl.rcParams


.. parsed-literal::

    /usr/lib/python3.7/site-packages/IPython/lib/pretty.py:689: MatplotlibDeprecationWarning: 
    The examples.directory rcparam was deprecated in Matplotlib 3.0 and will be removed in 3.2. In the future, examples will be found relative to the 'datapath' directory.
      output = repr(obj)




.. parsed-literal::

    RcParams({'_internal.classic_mode': False,
              'agg.path.chunksize': 0,
              'animation.avconv_args': [],
              'animation.avconv_path': 'avconv',
              'animation.bitrate': -1,
              'animation.codec': 'h264',
              'animation.convert_args': [],
              'animation.convert_path': 'convert',
              'animation.embed_limit': 20.0,
              'animation.ffmpeg_args': [],
              'animation.ffmpeg_path': 'ffmpeg',
              'animation.frame_format': 'png',
              'animation.html': 'none',
              'animation.html_args': [],
              'animation.writer': 'ffmpeg',
              'axes.autolimit_mode': 'data',
              'axes.axisbelow': 'line',
              'axes.edgecolor': 'black',
              'axes.facecolor': 'white',
              'axes.formatter.limits': [-7, 7],
              'axes.formatter.min_exponent': 0,
              'axes.formatter.offset_threshold': 4,
              'axes.formatter.use_locale': False,
              'axes.formatter.use_mathtext': False,
              'axes.formatter.useoffset': True,
              'axes.grid': False,
              'axes.grid.axis': 'both',
              'axes.grid.which': 'major',
              'axes.labelcolor': 'black',
              'axes.labelpad': 4.0,
              'axes.labelsize': 14.0,
              'axes.labelweight': 'normal',
              'axes.linewidth': 0.8,
              'axes.prop_cycle': cycler('color', ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']),
              'axes.spines.bottom': True,
              'axes.spines.left': True,
              'axes.spines.right': True,
              'axes.spines.top': True,
              'axes.titlepad': 6.0,
              'axes.titlesize': 'large',
              'axes.titleweight': 'normal',
              'axes.unicode_minus': True,
              'axes.xmargin': 0.05,
              'axes.ymargin': 0.05,
              'axes3d.grid': True,
              'backend': 'module://ipykernel.pylab.backend_inline',
              'backend_fallback': True,
              'boxplot.bootstrap': None,
              'boxplot.boxprops.color': 'black',
              'boxplot.boxprops.linestyle': '-',
              'boxplot.boxprops.linewidth': 1.0,
              'boxplot.capprops.color': 'black',
              'boxplot.capprops.linestyle': '-',
              'boxplot.capprops.linewidth': 1.0,
              'boxplot.flierprops.color': 'black',
              'boxplot.flierprops.linestyle': 'none',
              'boxplot.flierprops.linewidth': 1.0,
              'boxplot.flierprops.marker': 'o',
              'boxplot.flierprops.markeredgecolor': 'black',
              'boxplot.flierprops.markeredgewidth': 1.0,
              'boxplot.flierprops.markerfacecolor': 'none',
              'boxplot.flierprops.markersize': 6.0,
              'boxplot.meanline': False,
              'boxplot.meanprops.color': 'C2',
              'boxplot.meanprops.linestyle': '--',
              'boxplot.meanprops.linewidth': 1.0,
              'boxplot.meanprops.marker': '^',
              'boxplot.meanprops.markeredgecolor': 'C2',
              'boxplot.meanprops.markerfacecolor': 'C2',
              'boxplot.meanprops.markersize': 6.0,
              'boxplot.medianprops.color': 'C1',
              'boxplot.medianprops.linestyle': '-',
              'boxplot.medianprops.linewidth': 1.0,
              'boxplot.notch': False,
              'boxplot.patchartist': False,
              'boxplot.showbox': True,
              'boxplot.showcaps': True,
              'boxplot.showfliers': True,
              'boxplot.showmeans': False,
              'boxplot.vertical': True,
              'boxplot.whiskerprops.color': 'black',
              'boxplot.whiskerprops.linestyle': '-',
              'boxplot.whiskerprops.linewidth': 1.0,
              'boxplot.whiskers': 1.5,
              'contour.corner_mask': True,
              'contour.negative_linestyle': 'dashed',
              'datapath': '/usr/share/matplotlib/mpl-data',
              'date.autoformatter.day': '%Y-%m-%d',
              'date.autoformatter.hour': '%m-%d %H',
              'date.autoformatter.microsecond': '%M:%S.%f',
              'date.autoformatter.minute': '%d %H:%M',
              'date.autoformatter.month': '%Y-%m',
              'date.autoformatter.second': '%H:%M:%S',
              'date.autoformatter.year': '%Y',
              'docstring.hardcopy': False,
              'errorbar.capsize': 0.0,
              'examples.directory': '',
              'figure.autolayout': False,
              'figure.constrained_layout.h_pad': 0.04167,
              'figure.constrained_layout.hspace': 0.02,
              'figure.constrained_layout.use': False,
              'figure.constrained_layout.w_pad': 0.04167,
              'figure.constrained_layout.wspace': 0.02,
              'figure.dpi': 72.0,
              'figure.edgecolor': (1, 1, 1, 0),
              'figure.facecolor': (1, 1, 1, 0),
              'figure.figsize': [6.0, 4.0],
              'figure.frameon': True,
              'figure.max_open_warning': 20,
              'figure.subplot.bottom': 0.125,
              'figure.subplot.hspace': 0.2,
              'figure.subplot.left': 0.125,
              'figure.subplot.right': 0.9,
              'figure.subplot.top': 0.88,
              'figure.subplot.wspace': 0.2,
              'figure.titlesize': 'large',
              'figure.titleweight': 'normal',
              'font.cursive': ['Apple Chancery',
                               'Textile',
                               'Zapf Chancery',
                               'Sand',
                               'Script MT',
                               'Felipa',
                               'cursive'],
              'font.family': ['sans-serif'],
              'font.fantasy': ['Comic Sans MS',
                               'Chicago',
                               'Charcoal',
                               'Impact',
                               'Western',
                               'Humor Sans',
                               'xkcd',
                               'fantasy'],
              'font.monospace': ['DejaVu Sans Mono',
                                 'Bitstream Vera Sans Mono',
                                 'Computer Modern Typewriter',
                                 'Andale Mono',
                                 'Nimbus Mono L',
                                 'Courier New',
                                 'Courier',
                                 'Fixed',
                                 'Terminal',
                                 'monospace'],
              'font.sans-serif': ['DejaVu Sans',
                                  'Bitstream Vera Sans',
                                  'Computer Modern Sans Serif',
                                  'Lucida Grande',
                                  'Verdana',
                                  'Geneva',
                                  'Lucid',
                                  'Arial',
                                  'Helvetica',
                                  'Avant Garde',
                                  'sans-serif'],
              'font.serif': ['DejaVu Serif',
                             'Bitstream Vera Serif',
                             'Computer Modern Roman',
                             'New Century Schoolbook',
                             'Century Schoolbook L',
                             'Utopia',
                             'ITC Bookman',
                             'Bookman',
                             'Nimbus Roman No9 L',
                             'Times New Roman',
                             'Times',
                             'Palatino',
                             'Charter',
                             'serif'],
              'font.size': 10.0,
              'font.stretch': 'normal',
              'font.style': 'normal',
              'font.variant': 'normal',
              'font.weight': 'normal',
              'grid.alpha': 1.0,
              'grid.color': '#b0b0b0',
              'grid.linestyle': '-',
              'grid.linewidth': 0.8,
              'hatch.color': 'black',
              'hatch.linewidth': 1.0,
              'hist.bins': 10,
              'image.aspect': 'equal',
              'image.cmap': 'viridis',
              'image.composite_image': True,
              'image.interpolation': 'nearest',
              'image.lut': 256,
              'image.origin': 'upper',
              'image.resample': True,
              'interactive': True,
              'keymap.all_axes': ['a'],
              'keymap.back': ['left', 'c', 'backspace', 'MouseButton.BACK'],
              'keymap.copy': ['ctrl+c', 'cmd+c'],
              'keymap.forward': ['right', 'v', 'MouseButton.FORWARD'],
              'keymap.fullscreen': ['f', 'ctrl+f'],
              'keymap.grid': ['g'],
              'keymap.grid_minor': ['G'],
              'keymap.help': ['f1'],
              'keymap.home': ['h', 'r', 'home'],
              'keymap.pan': ['p'],
              'keymap.quit': ['ctrl+w', 'cmd+w', 'q'],
              'keymap.quit_all': ['W', 'cmd+W', 'Q'],
              'keymap.save': ['s', 'ctrl+s'],
              'keymap.xscale': ['k', 'L'],
              'keymap.yscale': ['l'],
              'keymap.zoom': ['o'],
              'legend.borderaxespad': 0.5,
              'legend.borderpad': 0.4,
              'legend.columnspacing': 2.0,
              'legend.edgecolor': '0.8',
              'legend.facecolor': 'inherit',
              'legend.fancybox': True,
              'legend.fontsize': 'large',
              'legend.framealpha': 0.8,
              'legend.frameon': True,
              'legend.handleheight': 0.7,
              'legend.handlelength': 2.0,
              'legend.handletextpad': 0.8,
              'legend.labelspacing': 0.5,
              'legend.loc': 'best',
              'legend.markerscale': 1.0,
              'legend.numpoints': 1,
              'legend.scatterpoints': 1,
              'legend.shadow': True,
              'legend.title_fontsize': None,
              'lines.antialiased': True,
              'lines.color': 'C0',
              'lines.dash_capstyle': 'butt',
              'lines.dash_joinstyle': 'round',
              'lines.dashdot_pattern': [6.4, 1.6, 1.0, 1.6],
              'lines.dashed_pattern': [3.7, 1.6],
              'lines.dotted_pattern': [1.0, 1.65],
              'lines.linestyle': '-',
              'lines.linewidth': 2.0,
              'lines.marker': 'None',
              'lines.markeredgecolor': 'auto',
              'lines.markeredgewidth': 1.0,
              'lines.markerfacecolor': 'auto',
              'lines.markersize': 6.0,
              'lines.scale_dashes': True,
              'lines.solid_capstyle': 'projecting',
              'lines.solid_joinstyle': 'round',
              'markers.fillstyle': 'full',
              'mathtext.bf': 'sans:bold',
              'mathtext.cal': 'cursive',
              'mathtext.default': 'it',
              'mathtext.fallback_to_cm': True,
              'mathtext.fontset': 'dejavusans',
              'mathtext.it': 'sans:italic',
              'mathtext.rm': 'sans',
              'mathtext.sf': 'sans',
              'mathtext.tt': 'monospace',
              'patch.antialiased': True,
              'patch.edgecolor': 'black',
              'patch.facecolor': 'C0',
              'patch.force_edgecolor': False,
              'patch.linewidth': 1.0,
              'path.effects': [],
              'path.simplify': True,
              'path.simplify_threshold': 0.1111111111111111,
              'path.sketch': None,
              'path.snap': True,
              'pdf.compression': 6,
              'pdf.fonttype': 42,
              'pdf.inheritcolor': False,
              'pdf.use14corefonts': False,
              'pgf.preamble': '',
              'pgf.rcfonts': True,
              'pgf.texsystem': 'xelatex',
              'polaraxes.grid': True,
              'ps.distiller.res': 6000,
              'ps.fonttype': 42,
              'ps.papersize': 'a4',
              'ps.useafm': False,
              'ps.usedistiller': False,
              'savefig.bbox': 'tight',
              'savefig.directory': '',
              'savefig.dpi': 'figure',
              'savefig.edgecolor': 'white',
              'savefig.facecolor': 'white',
              'savefig.format': 'png',
              'savefig.frameon': True,
              'savefig.jpeg_quality': 95,
              'savefig.orientation': 'portrait',
              'savefig.pad_inches': 0.1,
              'savefig.transparent': False,
              'scatter.edgecolors': 'face',
              'scatter.marker': 'o',
              'svg.fonttype': 'path',
              'svg.hashsalt': None,
              'svg.image_inline': True,
              'text.antialiased': True,
              'text.color': 'black',
              'text.hinting': 'auto',
              'text.hinting_factor': 8,
              'text.latex.preamble': '',
              'text.latex.preview': False,
              'text.latex.unicode': True,
              'text.usetex': False,
              'timezone': 'UTC',
              'tk.window_focus': False,
              'toolbar': 'toolbar2',
              'verbose.fileo': 'sys.stdout',
              'verbose.level': 'silent',
              'webagg.address': '127.0.0.1',
              'webagg.open_in_browser': True,
              'webagg.port': 8988,
              'webagg.port_retries': 50,
              'xtick.alignment': 'center',
              'xtick.bottom': True,
              'xtick.color': 'black',
              'xtick.direction': 'out',
              'xtick.labelbottom': True,
              'xtick.labelsize': 'medium',
              'xtick.labeltop': False,
              'xtick.major.bottom': True,
              'xtick.major.pad': 3.5,
              'xtick.major.size': 3.5,
              'xtick.major.top': True,
              'xtick.major.width': 0.8,
              'xtick.minor.bottom': True,
              'xtick.minor.pad': 3.4,
              'xtick.minor.size': 2.0,
              'xtick.minor.top': True,
              'xtick.minor.visible': False,
              'xtick.minor.width': 0.6,
              'xtick.top': False,
              'ytick.alignment': 'center_baseline',
              'ytick.color': 'black',
              'ytick.direction': 'out',
              'ytick.labelleft': True,
              'ytick.labelright': False,
              'ytick.labelsize': 'medium',
              'ytick.left': True,
              'ytick.major.left': True,
              'ytick.major.pad': 3.5,
              'ytick.major.right': True,
              'ytick.major.size': 3.5,
              'ytick.major.width': 0.8,
              'ytick.minor.left': True,
              'ytick.minor.pad': 3.4,
              'ytick.minor.right': True,
              'ytick.minor.size': 2.0,
              'ytick.minor.visible': False,
              'ytick.minor.width': 0.6,
              'ytick.right': False})



.. code:: python

    # Plot con valores default
    plt.plot(x,y)




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fa9f8031f10>]




.. image:: figuras/09_intro_visualizacion_78_1.png


.. code:: python

    # Modificamos el valor default de ancho de línea 
    mpl.rcParams['lines.linewidth'] = 7
    plt.plot(x,y)




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fa9f8065750>]




.. image:: figuras/09_intro_visualizacion_79_1.png


.. code:: python

    # El nuevo valor default podemos sobreescribirlo para este plot particular 
    plt.plot(x,y, lw=3)




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fa9f7ea4910>]




.. image:: figuras/09_intro_visualizacion_80_1.png


.. code:: python

    # Sin embargo, el nuevo valor default no es modificado
    plt.plot(x,y)




.. parsed-literal::

    [<matplotlib.lines.Line2D at 0x7fa9f7e5ac10>]




.. image:: figuras/09_intro_visualizacion_81_1.png


Ejercicios 09 (c)
-----------------

4. Notando que la curva en color negro corresponde a la suma de las dos
   curvas en rojo, rehacer la siguiente figura:

   .. image:: figuras/matplotlib_toolbar.png



5. Crear una hoja de estilo que permita hacer gráficos adecuados para
   posters y presentaciones. Debe modificar los tamaños para hacerlos
   legibles a mayores distancias (sugerencia 16pt). El tamaño de la
   letra de los nombres de ejes y en las leyendas debe ser mayor
   también. Las líneas deben ser más gruesas (sugerencia: ~4), los
   símbolos de mayor tamaño (sugerencia ~10).



