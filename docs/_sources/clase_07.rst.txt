Clase 7: Control de versiones y biblioteca standard
====================================================


.. role:: strike
   :class: strike
	   
.. note::
  Esta clase está :strike:`copiada` (muy fuertemente) inspirada en las siguientes fuentes:
  
  * `Lecciones de Software Carpentry <http://swcarpentry.github.io/git-novice>`__, y la `versión en castellano <https://swcarpentry.github.io/git-novice-es/>`__).
  * El libro `Pro Git <https://git-scm.com/book/en/v2>`__ de Scott Chacon y Ben Straub, y la `versión en castellano <https://git-scm.com/book/es/>`__. Ambos disponibles libremente.
  * El libro `Mastering git <http://www.packtpub.com/>`__ escrito por Jakub Narębski.


¿Qué es y para qué sirve el control de versiones?
-------------------------------------------------

El control de versiones permite ir grabando puntos en la historia de la evolución de un proyecto. Esta capacidad nos permite:

  - Acceder a versiones anteriores de nuestro trabajo ("undo ilimitado")
  - Trabajar en forma paralela con otras personas sobre un mismo documento.

Habitualmente, nos podemos encontrar con situaciones como esta:

.. figure:: figuras/alternativa.png
   :alt: 


o, más gracioso pero igualmente común, esta otra:

.. figure:: figuras/phd101212s.png
   :alt: “Piled Higher and Deeper” por Jorge Cham, http://www.phdcomics.com

Todos hemos estado en esta situación alguna vez: parece ridículo tener varias versiones casi idénticas del mismo documento. Algunos procesadores de texto nos permiten lidiar con esto un poco mejor, como por ejemplo el `Track Changes de Microsoft Word <https://support.office.com/en-us/article/Track-changes-in-Word-197ba630-0f5f-4a8e-9a77-3712475e806a>`__, el `historial de versiones de Google <https://support.google.com/docs/answer/190843?hl=en>`__, o el `Track-changes de LibreOffice <https://help.libreoffice.org/Common/Recording_and_Displaying_Changes>`__.

Estas herramientas permiten solucionar el problema del trabajo en colaboración. Si tenemos una versión de un archivo (documento, programa, etc) podemos compartirlo con los otros autores para modificar, y luego ir aceptando o rechazando los cambios propuestos.

Algunos problemas aún aparecen cuando se trabaja intensivamente en un documento, porque al aceptar o rechazar los cambios no queda registro de cuáles eran las alternativas. Además, estos sistemas actúan sólo sobre los documentos; en nuestro caso puede haber datos, gráficos, etc que cambien (o que queremos estar seguros que no cambiaron y estamos usando la versión correcta).



En el fondo, la manera de evitar esto es manteniendo una buena organización. Una posible buena manera es designar una persona responsable, que vaya llevando la contabilidad de quién hizo qué correcciones, las integre en un único documento, y vaya guardando copias de todas los documentos que recibe en un lugar separado. Cuando hay varios autores (cuatro o cinco) éste es un trabajo bastante arduo y con buenas posibilidades de pequeños errores. Los sistemas de control de versiones tratan de automatizar la mayor parte del trabajo para hacer más fácil la colaboración, manteniendo registro de los cambios que se hicieron desde que se inició el documento, y produciendo poca interferencia, permitiendo al mismo tiempo trabajar de manera similar a como lo hacemos habitualmente.

Consideremos un proyecto con varios archivos y autores.
En este esquema de trabajo, podemos compartir una versión de todos los archivos del proyecto

Cambios en paralelo
~~~~~~~~~~~~~~~~~~~

Una de las ventajas de los sistemas de control de versiones es que cada autor hace su aporte en su propia copia (en paralelo) 

.. figure:: figuras/versions.png
   :alt: versiones corregidas en paralelo

y después estos son compatibilizados e incorporados en un único documento.

.. figure:: figuras/merge.png
   :alt: Compaginando versiones corregidas en paralelo

En casos en que los autores trabajen en zonas distintas la compaginación se puede hacer en forma automática. Por otro lado, si dos personas cambian la misma frase obviamente se necesita tomar una decisión y la compaginación no puede (ni quiere) hacerse automáticamente.

Historia completa
~~~~~~~~~~~~~~~~~

Otra característica importante de los sistemas de control de versiones es que guardan la historia completa de todos los archivos que componen el proyecto. Imaginen, por ejemplo, que escribieron una función para resolver parte de un problema. La función no sólo hace su trabajo sino que está muy bien escrita, es elegante y funciona rápidamente. Unos días después encuentran que toda esa belleza era innecesaria, porque el problema que resuelve la función no aparece en su proyecto, y por supuesto la borra. La version oficial no tiene esa parte del código. 

Dos semanas, y varias líneas de código, después aparece un problema parecido y querríamos tener la función que borramos ...

Los sistemas de control de versiones guardan toda la información de la historia de cada archivo, con un comentario del autor. Este modo de trabajar nos permite recuperar (casi) toda la información previa, incluso aquella que en algún momento decidimos descartar.


Instalación y uso: Una versión breve
------------------------------------

Instalación
~~~~~~~~~~~

Vamos a describir uno de los posibles sistemas de control de versiones, llamado *git*

En Linux, usando el administrador de programas, algo así como:

en Ubuntu::

  $ sudo apt-get install git

o usando `dnf` en Fedora::

  $ sudo dnf install git
  
En Windows, se puede descargar `Git for Windows <https://gitforwindows.org/>`__ desde `este enlace <https://github.com/git-for-windows/git/releases/latest>`__,  ejecutar el instalador y seguir las instrucciones. Viene con una terminal y una interfaz gráfica.


Interfaces gráficas
~~~~~~~~~~~~~~~~~~~


Existen muchas interfaces gráficas, para todos los sistemas operativos.

Ver por ejemplo `Git Extensions <https://gitextensions.github.io/>`__,  `git-cola <https://git-cola.github.io/>`__, `Code Review <https://github.com/FabriceSalvaire/CodeReview/>`__,  o cualquiera de esta larga lista de `interfaces gráficas a Git <https://git-scm.com/downloads/guis>`__.

Documentación
~~~~~~~~~~~~~

Buscando en internet el término `git` se encuentra mucha documentación. En particular el libro Pro Git tiene información muy accesible y completa.

El programa se usa en la forma:

.. code-block:: shell
		
  $ git <comando> [opciones]

Por ejemplo, para obtener ayuda directamente desde el programa, se puede utilizar cualquiera de las opciones:

.. code-block:: bash
		
  $ git config help
  $ git config -h
  $ git config --help

  

Configuración básica
~~~~~~~~~~~~~~~~~~~~

Una vez que está instalado, es conveniente configurarlo desde una terminal, con los comandos:

.. code-block:: bash

  $ git config --global user.name "Juan Fiol"
  $ git config --global user.email "fiol@cab.cnea.gov.ar"		

Si necesitamos usar un proxy para acceder fuera del lugar de trabajo:

.. code-block:: bash

  $ git config --global http.proxy proxy-url
  $ git config --global https.proxy proxy-url


Acá hemos usado la opción `--global` para que las variables configuradas se apliquen a todos los repositorios con los que trabajamos.

Si necesitamos desabilitar una variable, por ejemplo el proxy, podemos hacer:

.. code-block:: bash

  $ git config --global unset http.proxy
  $ git config --global unset https.proxy 



Creación un nuevo repositorio
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Si ya estamos trabajando en un proyecto, tenemos algunos archivos de trabajo, sin control de versiones, y queremos empezar a controlarlo, inicializamos el repositorio local con:

.. code-block:: bash

  $ git init

Este comando sólo inicializa el repositorio, no pone ningún archivo bajo control de versiones.


Clonación de un repositorio existente
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Otra situación bastante común ocurre cuando queremos tener una copia local de un proyecto (grupo de archivos) que ya existe y está siendo controlado por git. En este caso utilizamos el comando `clone` en la forma:

.. code-block:: bash

  $ git clone <url-del-repositorio> [nombre-local]

donde el argumento `nombre-local` es opcional, si queremos darle a nuestra copia un nombre diferente al que tiene en el repositorio

Ejemplos:

.. code-block:: bash

  $ git clone /home/fiol/my-path/programa
  $ git clone /home/fiol/my-path/programa programa-de-calculo 
  $ git clone https://fiolj@bitbucket.org/fiolj/version-control.git
  $ git clone https://gitlab.com/fiolj/intro-python-IB.git
  $ git clone https://github.com/fiolj/intro-python-IB.git

Los dos primeros ejemplos realizan una copia de trabajo de un proyecto alojado también localmente. En el segundo caso le estamos un nuevo nombre a la copia de trabajo.

En los últimos tres ejemplos estamos copiando proyectos alojados en repositorios remotos, cuyo uso es bastante popular: `bitbucket <https://bitbucket.org/>`__, `gitlab <https://gitlab.com/>`__, y `github <https://github.com>`__.

Lo que estamos haciendo con estos comandos es copiar no sólo la versión actual del proyecto sino toda su historia. Después de ejecutar este comando tendremos en nuestra computadora cada versión de cada uno de los archivos del proyecto, con la información de quién hizo los cambios y cuándo se hicieron.


Una vez que ya tenemos una copia local de un proyecto vamos a querer trabajar: modificar los archivos, agregar nuevos, borrar alguno, etc.


Ver el estado actual
~~~~~~~~~~~~~~~~~~~~

Para determinar qué archivos se cambiaron utilizamos el comando `status`:

.. code-block:: bash
		
  $ cd my-directorio
  $ git status

Creación de nuevos archivos y modificación de existentes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Después de trabajar en un archivo existente, o crear un nuevo archivo que queremos controlar, debemos agregarlo al registro de control:

.. code-block:: bash

  $ git add <nuevo-archivo>
  $ git add <archivo-modificado>

Esto sólo agrega la versión actual del archivo al listado a controlar. Para incluir una copia en la base de datos del repositorio debemos realizar lo que se llama un "commit"

.. code-block:: bash

  $ git commit -m "Mensaje para recordar que hice con estos archivos"

La opción `-m` y su argumento (el *string* entre comillas) es un mensaje que dejamos grabado, asociado a los cambios realizados. Puede realizarse el `commit` sin esta opción, y entonces `git` abrirá un editor de texto para que escribamos el mensaje (que no puede estar vacío).

Actualización de un repositorio remoto
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Una vez que se añaden o modifican los archivos, y se agregan al repositorio local, podemos enviar los cambios a un repositorio remoto. Para ello utilizamos el comando:

.. code-block:: bash

  $ git push

De la misma manera, si queremos obtener una actualización del repositorio remoto (poque alguien más la modificó), utilizamos el (los) comando(s):

.. code-block:: bash

  $ git fetch

Este comando sólo actualiza el repositorio, pero no modifica los archivos locales. Esto se puede hacer, cuando uno quiera, luego con el comando:

.. code-block:: bash

  $ git merge

Estos dos comandos, pueden generalmente reemplazarse por un único comando:

.. code-block:: bash

  $ git pull

que realizará la descarga desde el repositorio remoto y la actualización de los archivos locales en un sólo paso.



Puntos importantes
~~~~~~~~~~~~~~~~~~

+--------------------------+---------------------------------------------+
| Control de versiones     | Historia de cambios y "undo" ilimitado      |
+--------------------------+---------------------------------------------+
| Configuración            | `git config`, con la opción `–global`       |
+--------------------------+---------------------------------------------+
| Creación                 | `git init` inicializa el repositorio        |
+--------------------------+---------------------------------------------+
|                          | `git clone` copia un repositorio            |
+--------------------------+---------------------------------------------+
| Modificación             | `git status` muestra el estado actual       |
+--------------------------+---------------------------------------------+
|                          | `git add` pone archivos bajo control        |
+--------------------------+---------------------------------------------+
|                          | `git commit` graba la versión actual        |
+--------------------------+---------------------------------------------+
| Explorar las versiones   | `git log` muestra la historia de cambios    |
+--------------------------+---------------------------------------------+
|                          | `git diff` compara versiones                |
+--------------------------+---------------------------------------------+
|                          | `git checkout` recupera versiones previas   |
+--------------------------+---------------------------------------------+
| Comunicación con remotos | `git push` Envía los cambios al remoto      |
+--------------------------+---------------------------------------------+
|                          | `git pull` copia los cambios desde remoto   |
+--------------------------+---------------------------------------------+


Algunos módulos (biblioteca standard) 
--------------------------------------

Los módulos pueden pensarse como bibliotecas de objetos (funciones,
datos, etc) que pueden usarse según la necesidad. Hay una biblioteca
standard con rutinas para muchas operaciones comunes, y además existen
muchos paquetes específicos para distintas tareas. Veamos algunos
ejemplos:

Módulo sys
~~~~~~~~~~

Este módulo da acceso a variables que usa o mantiene el intérprete
Python

.. code:: python

    import sys

.. code:: python

    sys.path




.. parsed-literal::

    ['/home/fiol/trabajo/clases/clase-python/clases',
     '/usr/lib64/python37.zip',
     '/usr/lib64/python3.7',
     '/usr/lib64/python3.7/lib-dynload',
     '',
     '/home/fiol/.local/lib/python3.7/site-packages',
     '/home/fiol/.local/lib/python3.7/site-packages/sphinx_fortran-1.0.1-py3.7.egg',
     '/usr/lib64/python3.7/site-packages',
     '/usr/lib/python3.7/site-packages',
     '/usr/lib/python3.7/site-packages/IPython/extensions',
     '/home/fiol/.ipython']



.. code:: python

    sys.getfilesystemencoding()




.. parsed-literal::

    'utf-8'



.. code:: python

    sys.getsizeof(1)




.. parsed-literal::

    28



.. code:: python

    help(sys.getsizeof)


.. parsed-literal::

    Help on built-in function getsizeof in module sys:
    
    getsizeof(...)
        getsizeof(object, default) -> int
        
        Return the size of object in bytes.
    


Vemos que para utilizar las variables (path) o funciones (getsizeof)
debemos referirlo anteponiendo el módulo en el cuál está definido (sys)
y separado por un punto.

Cuando hacemos un programa, con definición de variables y funciones.
Podemos utilizarlo como un módulo, de la misma manera que los que ya
vienen definidos en la biblioteca standard o en los paquetes que
instalamos.

Módulo ``os``
~~~~~~~~~~~~~

El módulo ``os`` tiene utilidades para operar sobre nombres de archivos
y directorios de manera segura y portable, de manera que pueda
utilizarse en distintos sistemas operativos. Vamos a ver ejemplos de uso
de algunas facilidades que brinda:

.. code:: python

    import os
    
    print(os.curdir)
    print(os.pardir)
    print (os.getcwd())


.. parsed-literal::

    .
    ..
    /home/fiol/trabajo/clases/clase-python/clases


.. code:: python

    cur = os.getcwd()
    par = os.path.abspath("..")
    print(cur)
    print(par)



.. parsed-literal::

    /home/fiol/trabajo/clases/clase-python/clases
    /home/fiol/trabajo/clases/clase-python


.. code:: python

    print(os.path.abspath(os.curdir))
    print(os.getcwd())


.. parsed-literal::

    /home/fiol/trabajo/clases/clase-python/clases
    /home/fiol/trabajo/clases/clase-python/clases


.. code:: python

    print(os.path.basename(cur))
    print(os.path.splitdrive(cur))


.. parsed-literal::

    clases
    ('', '/home/fiol/trabajo/clases/clase-python/clases')


.. code:: python

    print(os.path.commonprefix((cur, par)))
    archivo = os.path.join(par,'este' , 'otro.dat')
    print (archivo)
    print (os.path.split(archivo))
    print (os.path.splitext(archivo))
    print (os.path.exists(archivo))
    print (os.path.exists(cur))



.. parsed-literal::

    /home/fiol/trabajo/clases/clase-python
    /home/fiol/trabajo/clases/clase-python/este/otro.dat
    ('/home/fiol/trabajo/clases/clase-python/este', 'otro.dat')
    ('/home/fiol/trabajo/clases/clase-python/este/otro', '.dat')
    False
    True


Como es aparente de estos ejemplos, se puede acceder a todos los objetos
(funciones, variables) de un módulo utilizando simplemente la línea
``import <modulo>`` pero puede ser tedioso escribir todo con prefijos
(como ``os.path.abspath``) por lo que existen dos alternativas que
pueden ser más convenientes. La primera corresponde a importar todas las
definiciones de un módulo en forma implícita:

.. code:: python

    from os import *

Después de esta declaración usamos los objetos de la misma manera que
antes pero obviando la parte de ``os.``

.. code:: python

    path.abspath(curdir)




.. parsed-literal::

    '/home/fiol/trabajo/clases/clase-python/clases'



Esto es conveniente en algunos casos pero no suele ser una buena idea en
programas largos ya que distintos módulos pueden definir el mismo
nombre, y se pierde información sobre su origen. Una alternativa que es
conveniente y permite mantener mejor control es importar explícitamente
lo que vamos a usar:

.. code:: python

    from os import curdir, pardir, getcwd
    from os.path import abspath
    print(abspath(pardir))
    print(abspath(curdir))
    print(abspath(getcwd()))



.. parsed-literal::

    /home/fiol/trabajo/clases/clase-python
    /home/fiol/trabajo/clases/clase-python/clases
    /home/fiol/trabajo/clases/clase-python/clases


Además podemos darle un nombre diferente al importar módulos u objetos

.. code:: python

    import os.path as path
    from os import getenv as ge


.. code:: python

    help(ge)


.. parsed-literal::

    Help on function getenv in module os:
    
    getenv(key, default=None)
        Get an environment variable, return None if it doesn't exist.
        The optional second argument can specify an alternate default.
        key, default and the result are str.
    


.. code:: python

    ge('HOME')




.. parsed-literal::

    '/home/fiol'



.. code:: python

    path.realpath(curdir)




.. parsed-literal::

    '/home/fiol/trabajo/clases/clase-python/clases'



Acá hemos importado el módulo ``os.path`` (es un sub-módulo) como
``path`` y la función ``getenv`` del módulo ``os`` y la hemos renombrado
``ge``.

.. code:: python

    help(os.walk)


.. parsed-literal::

    Help on function walk in module os:
    
    walk(top, topdown=True, onerror=None, followlinks=False)
        Directory tree generator.
        
        For each directory in the directory tree rooted at top (including top
        itself, but excluding '.' and '..'), yields a 3-tuple
        
            dirpath, dirnames, filenames
        
        dirpath is a string, the path to the directory.  dirnames is a list of
        the names of the subdirectories in dirpath (excluding '.' and '..').
        filenames is a list of the names of the non-directory files in dirpath.
        Note that the names in the lists are just names, with no path components.
        To get a full path (which begins with top) to a file or directory in
        dirpath, do os.path.join(dirpath, name).
        
        If optional arg 'topdown' is true or not specified, the triple for a
        directory is generated before the triples for any of its subdirectories
        (directories are generated top down).  If topdown is false, the triple
        for a directory is generated after the triples for all of its
        subdirectories (directories are generated bottom up).
        
        When topdown is true, the caller can modify the dirnames list in-place
        (e.g., via del or slice assignment), and walk will only recurse into the
        subdirectories whose names remain in dirnames; this can be used to prune the
        search, or to impose a specific order of visiting.  Modifying dirnames when
        topdown is false has no effect on the behavior of os.walk(), since the
        directories in dirnames have already been generated by the time dirnames
        itself is generated. No matter the value of topdown, the list of
        subdirectories is retrieved before the tuples for the directory and its
        subdirectories are generated.
        
        By default errors from the os.scandir() call are ignored.  If
        optional arg 'onerror' is specified, it should be a function; it
        will be called with one argument, an OSError instance.  It can
        report the error to continue with the walk, or raise the exception
        to abort the walk.  Note that the filename is available as the
        filename attribute of the exception object.
        
        By default, os.walk does not follow symbolic links to subdirectories on
        systems that support them.  In order to get this functionality, set the
        optional argument 'followlinks' to true.
        
        Caution:  if you pass a relative pathname for top, don't change the
        current working directory between resumptions of walk.  walk never
        changes the current directory, and assumes that the client doesn't
        either.
        
        Example:
        
        import os
        from os.path import join, getsize
        for root, dirs, files in os.walk('python/Lib/email'):
            print(root, "consumes", end="")
            print(sum([getsize(join(root, name)) for name in files]), end="")
            print("bytes in", len(files), "non-directory files")
            if 'CVS' in dirs:
                dirs.remove('CVS')  # don't visit CVS directories
    


.. code:: python

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('./'):
        print(root, "consume ", end="")
        print(sum([getsize(join(root, name)) for name in files])/1024, end="")
        print(" kbytes en ", len(files), "non-directory files")
        if '.ipynb_checkpoints' in dirs:
            dirs.remove('.ipynb_checkpoints')  # don't visit CVS directories


.. parsed-literal::

    ./ consume 14067.50390625 kbytes en  81 non-directory files
    ./13_fft_files consume 1075.671875 kbytes en  16 non-directory files
    ./scripts consume 24.359375 kbytes en  32 non-directory files
    ./scripts/interfacing consume 4.5634765625 kbytes en  6 non-directory files
    ./scripts/animaciones consume 17.5595703125 kbytes en  11 non-directory files
    ./09_intro_visualizacion_files consume 421.7919921875 kbytes en  29 non-directory files
    ./14_interactivo_files consume 364.30078125 kbytes en  9 non-directory files
    ./05_algunos_ejemplos_files consume 14.99609375 kbytes en  1 non-directory files
    ./15_interfacing_y_animaciones_files consume 4.05859375 kbytes en  1 non-directory files
    ./version-control consume 55.796875 kbytes en  10 non-directory files
    ./version-control/_images consume 200.9833984375 kbytes en  4 non-directory files
    ./version-control/_sources consume 15.384765625 kbytes en  4 non-directory files
    ./version-control/_static consume 827.212890625 kbytes en  25 non-directory files
    ./version-control/_static/css consume 116.8828125 kbytes en  2 non-directory files
    ./version-control/_static/js consume 19.341796875 kbytes en  2 non-directory files
    ./version-control/_static/fonts consume 4132.6220703125 kbytes en  13 non-directory files
    ./version-control/_static/fonts/Lato consume 5672.4013671875 kbytes en  16 non-directory files
    ./version-control/_static/fonts/RobotoSlab consume 786.3271484375 kbytes en  8 non-directory files
    ./__pycache__ consume 0.828125 kbytes en  1 non-directory files
    ./08_intro_numpy_files consume 11.6572265625 kbytes en  1 non-directory files
    ./13_graficacion3d_files consume 818.3916015625 kbytes en  25 non-directory files
    ./13_miscelaneas_files consume 1638.3798828125 kbytes en  17 non-directory files
    ./12_fiteos_files consume 797.744140625 kbytes en  28 non-directory files
    ./10_mas_numpy_files consume 124.7763671875 kbytes en  7 non-directory files
    ./11_intro_scipy_files consume 232.6796875 kbytes en  10 non-directory files


Módulo ``subprocess``
~~~~~~~~~~~~~~~~~~~~~

El módulo subprocess permite ejecutar nuevos procesos, proveerle de
datos de entrada, y capturar su salida.

.. code:: python

    import subprocess as sub

.. code:: python

    sub.run(["ls", "-l"])




.. parsed-literal::

    CompletedProcess(args=['ls', '-l'], returncode=0)



En esta forma, la función ``run`` ejecuta el comando ``ls`` (listar) con
el argumento ``-l``, y **no** captura la salida. Si queremos guardar la
salida, podemos usar el argumento ``stdout``:

.. code:: python

    ll = sub.run(["ls", "-l"], stdout=sub.PIPE)

La variable ``ll`` tiene el objeto retornado por ``run``. y podemos
acceder a la salida mediante ``ll.stdout``

.. code:: python

    ff= ll.stdout.splitlines()

.. code:: python

    for f in ff:
      if 'ipynb' in str(f) and '04_' in str(f):
        print(f.decode('utf-8'))


.. parsed-literal::

    -rw-r--r--. 1 fiol fiol    5731 feb 26 14:20 04_ejercicios.ipynb
    -rw-r--r--. 1 fiol fiol   40101 feb 27 09:15 04_funciones.ipynb
    -rw-r--r--. 1 fiol fiol   32878 feb 27 09:22 04_iteraciones.ipynb


Módulo ``glob``
~~~~~~~~~~~~~~~

El módulo ``glob`` encuentra nombres de archivos (o directorios)
utilizando patrones similares a los de la consola. La función más
utilizada es ``glob.glob()`` Veamos algunos ejemplos de uso:

.. code:: python

    import glob

.. code:: python

    nb_clase4= glob.glob('04*.ipynb')

.. code:: python

    nb_clase4




.. parsed-literal::

    ['04_ejercicios.ipynb', '04_funciones.ipynb', '04_iteraciones.ipynb']



.. code:: python

    nb_clase4.sort()

.. code:: python

    nb_clase4




.. parsed-literal::

    ['04_ejercicios.ipynb', '04_funciones.ipynb', '04_iteraciones.ipynb']



.. code:: python

    nb_clases1a4 = glob.glob('0[0-4]*.ipynb')

.. code:: python

    nb_clases1a4




.. parsed-literal::

    ['04_ejercicios.ipynb',
     '04_funciones.ipynb',
     '01_ejercicios.ipynb',
     '00_introd_y_excursion.ipynb',
     '04_iteraciones.ipynb',
     '02_tipos_y_control.ipynb',
     '03_ejercicios.ipynb',
     '01_instala_y_uso.ipynb',
     '03_bases_python.ipynb',
     '02_ejercicios.ipynb',
     '01_introd_python.ipynb']



.. code:: python

    for f in sorted(nb_clases1a4):
      print('Clase en archivo {}'.format(f))


.. parsed-literal::

    Clase en archivo 00_introd_y_excursion.ipynb
    Clase en archivo 01_ejercicios.ipynb
    Clase en archivo 01_instala_y_uso.ipynb
    Clase en archivo 01_introd_python.ipynb
    Clase en archivo 02_ejercicios.ipynb
    Clase en archivo 02_tipos_y_control.ipynb
    Clase en archivo 03_bases_python.ipynb
    Clase en archivo 03_ejercicios.ipynb
    Clase en archivo 04_ejercicios.ipynb
    Clase en archivo 04_funciones.ipynb
    Clase en archivo 04_iteraciones.ipynb


Módulo ``Argparse``
~~~~~~~~~~~~~~~~~~~

Este módulo tiene lo necesario para hacer rápidamente un programa para
utilizar por línea de comandos, aceptando todo tipo de argumentos y
dando información sobre su uso.

.. code:: python

   import argparse
   VERSION = 1.0

   parser = argparse.ArgumentParser(
         description='"Mi programa que acepta argumentos por línea de comandos"')

   parser.add_argument('-V', '--version', action='version',
                         version='%(prog)s version {}'.format(VERSION))
     
   parser.add_argument('-n', '--entero', action=store, dest='n', default=1)

   args = parser.parse_args()

Más información en la `biblioteca
standard <https://docs.python.org/3.6/library/argparse.html>`__ y en
`Argparse en Python Module of the
week <https://pymotw.com/3/argparse/index.html>`__

Módulo ``re``
~~~~~~~~~~~~~

Este módulo provee la infraestructura para trabajar con *regular
expressions*, es decir para encontrar expresiones que verifican “cierta
forma general”. Veamos algunos conceptos básicos y casos más comunes de
uso.

Búsqueda de un patrón en un texto
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Empecemos con un ejemplo bastante común. Para encontrar un patrón en un
texto podemos utilizar el método ``search()``

.. code:: python

    import re

.. code:: python

    busca = 'un'
    texto = 'Otra vez vamos a usar "Hola Mundo"'
    
    match = re.search(busca, texto)
    
    print('Encontré "{}"\nen:\n  "{}"'.format(match.re.pattern, match.string))
    print('En las posiciones {} a {}'.format(match.start(), match.end()))


.. parsed-literal::

    Encontré "un"
    en:
      "Otra vez vamos a usar "Hola Mundo""
    En las posiciones 29 a 31


Acá buscamos una expresión (el substring “un”). Esto es útil pero no muy
diferente a utilizar los métodos de strings. Veamos como se definen los
patrones.

Definición de expresiones
^^^^^^^^^^^^^^^^^^^^^^^^^

Vamos a buscar un patrón en un texto. Veamos cómo se definen los
patrones a buscar.

-  La mayoría de los caracteres se identifican consigo mismo (si quiero
   encontrar “gato”, uso como patrón “gato”)

-  Hay unos pocos caracteres especiales (metacaracteres) que tienen un
   significado especial, estos son:

   ::

      . ^ $ * + ? { } [ ] \ | ( )

-  Si queremos encontrar uno de los metacaracteres, tenemos que
   precederlos de ``\``. Por ejemplo si queremos encontrar un corchete
   usamos ``\[``

-  Los corchetes “[" y "]” se usan para definir una clase de caracteres,
   que es un conjunto de caracteres que uno quiere encontrar.

   -  Los caracteres a encontrar se pueden dar individualmente. Por
      ejemplo ``[gato]`` encontrará cualquiera de ``g``, ``a``, ``t``,
      ``o``.
   -  Un rango de caracteres se puede dar dando dos caracteres separados
      por un guión. Por ejemplo ``[a-z]`` dará cualquier letra entre “a”
      y “z”. Similarmente ``[0-5][0-9]`` dará cualquier número entre
      “00” y “59”.
   -  Los metacaracteres pierden su significado especial dentro de los
      corchetes. Por ejemplo ``[.*)]`` encontrará cualquiera de “.”,
      "\*“,”)".

-  El punto ``.`` indica *cualquier caracter*

-  Los símbolos ``*``, ``+``, ``?`` indican repetición:

   -  ``?``: Indica 0 o 1 aparición de lo anterior
   -  ``*``: Indica 0 o más apariciones de lo anterior
   -  ``+``: Indica 1 o más apariciones de lo anterior

.. code:: python

    busca = "[a-z]+@[a-z]+\.[a-z]+" # Un patrón para buscar direcciones de email
    texto = "nombre@server.com, apellido@server1.com, nombre1995@server.com, UnNombreyApellido, nombre.apellido82@servidor.com.ar, Nombre.Apellido82@servidor.com.ar".split(',')
    print(texto,'\n')
    
    for direc in texto:
      m= re.search(busca, direc)
      print('Para la línea:', direc)
      if m is None:
        print('   No encontré dirección de correo!')
      else:
        print('   Encontré la dirección de correo:', m.string)
    



.. parsed-literal::

    ['nombre@server.com', ' apellido@server1.com', ' nombre1995@server.com', ' UnNombreyApellido', ' nombre.apellido82@servidor.com.ar', ' Nombre.Apellido82@servidor.com.ar'] 
    
    Para la línea: nombre@server.com
       Encontré la dirección de correo: nombre@server.com
    Para la línea:  apellido@server1.com
       No encontré dirección de correo!
    Para la línea:  nombre1995@server.com
       No encontré dirección de correo!
    Para la línea:  UnNombreyApellido
       No encontré dirección de correo!
    Para la línea:  nombre.apellido82@servidor.com.ar
       No encontré dirección de correo!
    Para la línea:  Nombre.Apellido82@servidor.com.ar
       No encontré dirección de correo!


-  Acá la expresión ``[a-z]`` significa todos los caracteres en el rango
   “a” hasta “z”.
-  ``[a-z]+`` significa cualquier secuencia de una letra o más.

-  Los corchetes también se pueden usar en la forma ``[abc]`` y entonces
   encuentra *cualquiera* de ``a``, ``b``, o ``c``.

Vemos que no encontró todas las direcciones posibles. Porque el patrón
no está bien diseñado. Un poco mejor sería:

.. code:: python

    busca = "[a-zA-Z0-9.]+@[a-z.]+" # Un patrón para buscar direcciones de email
    
    print(texto,'\n')
    
    for direc in texto:
      m= re.search(busca, direc)
      print('Para la línea:', direc)
      if m is None:
        print('   No encontré dirección de correo:')
      else:
        print('   Encontré la dirección de correo:', m.group())
    



.. parsed-literal::

    ['nombre@server.com', ' apellido@server1.com', ' nombre1995@server.com', ' UnNombreyApellido', ' nombre.apellido82@servidor.com.ar', ' Nombre.Apellido82@servidor.com.ar'] 
    
    Para la línea: nombre@server.com
       Encontré la dirección de correo: nombre@server.com
    Para la línea:  apellido@server1.com
       Encontré la dirección de correo: apellido@server
    Para la línea:  nombre1995@server.com
       Encontré la dirección de correo: nombre1995@server.com
    Para la línea:  UnNombreyApellido
       No encontré dirección de correo:
    Para la línea:  nombre.apellido82@servidor.com.ar
       Encontré la dirección de correo: nombre.apellido82@servidor.com.ar
    Para la línea:  Nombre.Apellido82@servidor.com.ar
       Encontré la dirección de correo: Nombre.Apellido82@servidor.com.ar


Los metacaracteres no se activan dentro de clases (adentro de
corchetes). En el ejemplo anterior el punto ``.`` actúa como un punto y
no como un metacaracter. En este caso, la primera parte:
``[a-zA-Z0-9.]+`` significa: “Encontrar cualquier letra minúscula,
mayúscula, número o punto, una o más veces cualquiera de ellos”

Repetición de un patrón
^^^^^^^^^^^^^^^^^^^^^^^

Si queremos encontrar strings que presentan la secuencia una o más veces
podemos usar ``findall()`` que devuelve todas las ocurrencias del patrón
que no se superponen. Por ejemplo:

.. code:: python

    texto = 'abbaaabbbbaaaaa'
    
    busca = 'ab'
    
    mm =  re.findall(busca, texto)
    print(mm)    
    
    for m in mm:
        print('Encontré {}'.format(m))



.. parsed-literal::

    ['ab', 'ab']
    Encontré ab
    Encontré ab


.. code:: python

    p = re.compile('abc*')
    m= p.findall('acholaboy')
    print(m)
    m= p.findall('acholabcoynd sabcccs slabc labdc abc')
    print(m)


.. parsed-literal::

    ['ab']
    ['abc', 'abccc', 'abc', 'ab', 'abc']


Si va a utilizar expresiones regulares es recomendable que lea más
información en la `biblioteca
standard <https://docs.python.org/3.6/library/re.html>`__, en `el
HOWTO <https://docs.python.org/3.6/howto/regex.html>`__ y en `Python
Module of the week <https://pymotw.com/3/re/index.html>`__.
