.. _clase_15:

Clase 15: Interfaces con otros lenguajes
=========================================


Interface con lenguaje C
------------------------

Existen varias formas de utilizar bibliotecas o c√≥digos hechos en C
desde Python. Nosotros veremos el uso de ``Ctypes``, sin embargo existen
otras alternativas como `Cython <https://cython.org/>`__,
`CFFI <https://cffi.readthedocs.io/en/latest/>`__,
`pybind11 <https://pybind11.readthedocs.io/en/stable/>`__ y
`Boost.Python <https://www.boost.org/doc/libs/1_70_0/libs/python/doc/html/index.html>`__.

Ejemplo 1: Problema a resolver
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Supongamos que queremos resolver el problema de la rotaci√≥n de vectores
en el espacio usando los tres √°ngulos de Euler.

.. code:: python

    import numpy as np

.. code:: python

    pwd




.. parsed-literal::

    '/Users/flavioc/Library/Mobile Documents/com~apple~CloudDocs/Documents/cursos/curso-python'



Si ya tenemos un m√≥dulo donde est√°n programadas las funciones necesarias

.. code:: python

    # %load rotacion_p.py
    #! /usr/bin/ipython3
    import numpy as np
    
    
    def matrix_rotation(angles):
      cx, cy, cz = np.cos(angles)
      sx, sy, sz = np.sin(angles)
      R = np.zeros((3, 3))
      R[0, 0] = cx * cz - sx * cy * sz
      R[0, 1] = cx * sz + sx * cy * cz
      R[0, 2] = sx * sy
    
      R[1, 0] = -sx * cz - cx * cy * sz
      R[1, 1] = -sx * sz + cx * cy * cz
      R[1, 2] = cx * sy
    
      R[2, 0] = sy * sz
      R[2, 1] = -sy * cz
      R[2, 2] = cy
      return R
    
    
    def rotate(angles, v):
      return np.dot(matrix_rotation(angles), v)


es f√°cil utilizarlas. Las importamos y utilizamos

.. code:: python

    # import rotacion_p as rotp
    N = 100
    # √Ångulos de Euler
    angle = np.random.random(3)
    # Definimos N vectores tridimensionales
    v = np.random.random((3, N))

.. code:: python

    # y= rotp.rotate(angle, v)
    y = rotate(angle,v)

.. code:: python

    print(angle)
    print(y[:,0:5].T)


.. parsed-literal::

    [0.50865471 0.8181404  0.53468601]
    [[ 1.14137158 -0.09559654 -0.105005  ]
     [ 1.00659971 -0.09141267 -0.14818529]
     [ 0.96071663 -0.39351893  0.09300136]
     [ 0.98322967 -0.12991836 -0.05407704]
     [ 0.75230624  0.10485721  0.80743319]]


Interfaces con C
~~~~~~~~~~~~~~~~

Veamos c√≥mo trabajar si tenemos el c√≥digo para realizar las rotaciones
en C.

Primer ejemplo: Nuestro c√≥digo
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

El c√≥digo en C que tenemos es:

.. code:: c

    typedef struct {
         float m[3][3];
       } m3x3;

       typedef struct {
         float a[3];
       } v3;
       
   ...

   float * rotate(float angles[3], float *v, int N){

           m3x3 R = matrix_rotation(angles);
           
           float* y = (float*)malloc(3*N*sizeof(float));
           v3 p;

           printf("%p\n",y);
           for(int i=0; i<N; i++){
               // p = &y[i*3];
               p = matmul3(R,&v[i*3]);
               y[i*3+0] = p.a[0];
               y[i*3+1] = p.a[1];
               y[i*3+2] = p.a[2];
               // printf("%6.3f %6.3f %6.3f \n",y[i*3+0],y[i*3+1],y[i*3+2]);
           }
           return y;


     }

.. code:: python

    cd interfacing_C


.. parsed-literal::

    /Users/flavioc/Library/Mobile Documents/com~apple~CloudDocs/Documents/cursos/curso-python/interfacing_C


.. code:: python

    !cat rotacion.c


.. parsed-literal::

    #include<stdio.h>
    #include<stdlib.h>
    #include<math.h> 
    
    
        typedef struct {
          float m[3][3];
        } m3x3;
    
        typedef struct {
          float a[3];
        } v3;
    
      // !> matrix_rotation
      // !! Crea la matriz de rotaci√≥n correspondiente a los tres √°ngulos de Euler
      // !! 
      // !! @param angles 
      // !! @return R
    
        m3x3 matrix_rotation(float angles[3]){
    
            m3x3 R;
    
            float cx = cos(angles[0]); 
            float cy = cos(angles[1]); 
            float cz = cos(angles[2]);
            float sx = sin(angles[0]); 
            float sy = sin(angles[1]); 
            float sz = sin(angles[2]);
    
    
            R.m[0][0] = cx*cz - sx*cy*sz;
            R.m[0][1] = cx*sz + sx*cy*cz;
            R.m[0][2] = sx*sy;
    
            R.m[1][0] = -sx*cz - cx*cy*sz;
            R.m[1][1] = -sx*sz + cx*cy*cz;
            R.m[1][2] = cx*sy;
    
            R.m[2][0] = sy*sz;
            R.m[2][1] = -sy*cz;
            R.m[2][2] = cy;
    
            return R;
      }
    
      v3 matmul3(m3x3 A, float b[3]){
    
          static v3 a;
    
          for(int i=0; i < 3; i++){
                a.a[0] = A.m[0][0] * b[0] + A.m[0][1] * b[1] + A.m[0][2] * b[2];
                a.a[1] = A.m[1][0] * b[0] + A.m[1][1] * b[1] + A.m[1][2] * b[2];
                a.a[2] = A.m[2][0] * b[0] + A.m[2][1] * b[1] + A.m[2][2] * b[2];
              }
        //  printf("%6.3f %6.3f %6.3f \n",a[0],a[1],a[2]);
    
          return a;
      }
    
    
    
        float * rotate(float angles[3], float *v, int N){
            
            m3x3 R = matrix_rotation(angles);
            
    
            float* y = (float*)malloc(3*N*sizeof(float));
            v3 p;
    
            printf("%p\n",y);
            for(int i=0; i<N; i++){
                // p = &y[i*3];
                p = matmul3(R,&v[i*3]);
                y[i*3+0] = p.a[0];
                y[i*3+1] = p.a[1];
                y[i*3+2] = p.a[2];
                // printf("%6.3f %6.3f %6.3f \n",y[i*3+0],y[i*3+1],y[i*3+2]);
            }
            return y;
    
    
      }
    
    
    int main(){
    
      float angle[3] = { 0.0f, 0.0f, 3.141592f/2.0f};
    
      m3x3 R;
    
      int NDIM = 2;
      float* v = (float*)malloc(3*NDIM*sizeof(float));
    
      float *y;
    
      for (size_t j = 0; j < NDIM; j++)
          {
                v[j*3+0] = (j*3+0)*1.0f;
                v[j*3+1] = (j*3+1)*1.0f;
                v[j*3+2] = (j*3+2)*1.0f;
          }
    
      v[0] = (1)*1.0f;
      v[1] = (0)*1.0f;
      v[2] = (0)*1.0f;
      v[3] = (0)*1.0f;
      v[4] = (1)*1.0f;  
      v[5] = (0)*1.0f;
    
    
    
      R = matrix_rotation(angle);
    
        for(int i = 0; i < 3; i++){
            for(int j = 0; j < 3; j++){
                printf("%6.3f",R.m[i][j]);
                printf("   ");
            }
            printf("\n");
        }
    
      y = rotate(angle,v,NDIM);
      printf("%6.3f %6.3f %6.3f \n",y[0],y[1],y[2]);
      printf("%6.3f %6.3f %6.3f \n",y[3],y[4],y[5]);
      // for (size_t i = 0; i < NDIM; i++)
      // {
      //    printf("%6.3f %6.3f %6.3f \n",y[i*3],y[i*3+1],y[i*3+2]);
      // }
      
    
    }  


CTypes
^^^^^^

No vamos a usar directamente ``Ctypes``, sino a trav√©s de ``NumPy``, que
provee algunas funciones convenientes para acceder al c√≥digo C.

El primer paso es compilar nuestro c√≥digo y generar una biblioteca:

.. code:: bash

   $ gcc -fpic -Wall -shared rotacion.c -o librotacion.so

Si uno trabaja en Windows, generar√° una dll

.. code:: cmd

   cl.exe -c rotacion.c
   link.exe /DLL /OUT:rotacion.dll

.. code:: python

    !gcc -fpic -Wall -shared rotacion.c -o librotacion.so

.. code:: python

    !ls


.. parsed-literal::

    [31mlibrotacion.so[m[m rotacion.c


En segundo lugar, importamos el m√≥dulo ``ctypeslib``

.. code:: python

    import numpy.ctypeslib as ctl

Este m√≥dulo nos provee de la funci√≥n ``load_library`` para importar la
biblioteca

.. code:: python

    help(ctl.load_library)


.. parsed-literal::

    Help on function load_library in module numpy.ctypeslib:
    
    load_library(libname, loader_path)
        It is possible to load a library using
        >>> lib = ctypes.cdll[<full_path_name>] # doctest: +SKIP
        
        But there are cross-platform considerations, such as library file extensions,
        plus the fact Windows will just load the first library it finds with that name.
        NumPy supplies the load_library function as a convenience.
        
        Parameters
        ----------
        libname : str
            Name of the library, which can have 'lib' as a prefix,
            but without an extension.
        loader_path : str
            Where the library can be found.
        
        Returns
        -------
        ctypes.cdll[libpath] : library object
           A ctypes library object
        
        Raises
        ------
        OSError
            If there is no library with the expected extension, or the
            library is defective and cannot be loaded.
    


.. code:: python

    rotc = ctl.load_library('librotacion.so','.')

Una vez cargada la biblioteca, tenemos que definir adecuadamente c√≥mo
pasar los argumentos a la funci√≥n ``rotate`` de C:

.. code:: c

       float * rotate(float angles[3], float *v, int N)

Para eso se utiliza la funci√≥n ``argtypes`` que recibe una lista de
tipos. Notemos que los dos primeros argumentos son arreglos de C (o sea,
punteros), mientras que el √∫ltimo es un entero.

.. code:: python

    npflags = ['C_CONTIGUOUS']   # Require a C contiguous array in memory
    
    float_1d_type = ctl.ndpointer(dtype=np.float32, ndim=1, flags=npflags) # Puntero a float, 1D
    float_2d_type = ctl.ndpointer(dtype=np.float32, ndim=2, flags=npflags) # Puntero a float, 2D

Con estos tipos de datos, defino los tipos de argumentos, que son tres
en total. El √∫ltimo es un dato de tipo entero, para lo cual se usa
directamente ``c_intp``.

.. code:: python

    rotc.rotate.argtypes =  [float_1d_type, float_2d_type, ctl.c_intp]

Hagamos un ejemplo sencillo con N=2

.. code:: python

    # import rotacion_p as rotp
    N = 2
    # √Ångulos de Euler
    angle = np.random.random(3).astype(np.float32)
    # Definimos N vectores tridimensionales
    v = np.random.random((3, N)).astype(np.float32)

Las funciones que dispongo en C reciben tipos ``float``, es decir que me
tengo que asegurar esto a trav√©s del m√©todo ``astype``.

Ahora tenemos que definir el tipo de dato de salida, que retorna C a
trav√©s de un puntero a float, ``float*``. Para esto usamos el m√©todo
``restype``. Como a priori no s√© qu√© tipo de rango tiene mi arreglo de
salida, tengo que definirlo expl√≠citamente.

.. code:: python

    rotc.rotate.restype = ctl.ndpointer(dtype=np.float32, shape=(N,3)) 

Hay que tener precauci√≥n con el manejo de arreglos, que es muy distinto
en C y Python. En Python son objetos, de los cuales yo puedo tener
distintas vistas, slices, etc. Hay que recordar que en principio estas
son formas de acceder al mismo objeto, pero no se pueden traducir
directamente a C, que necesita un arreglo contiguo de datos.

.. code:: python

    v = np.array([[1,0], [0,1], [0,0]]).astype(np.float32) 
    vt = v.T.copy()
    
    print(np.shape(v))
    print(np.shape(v.T))


.. parsed-literal::

    (3, 2)
    (2, 3)


Veamos, v es un arreglo de 3 filas y 2 columnas, que contiene *dos*
vectores de tres dimensiones que se desean rotar, organizados como
columnas. Esto *no* es lo que necesita mi arreglo en C, que es tiene los
vectores organizados contiguamente en un solo arreglo unidimensional.
Entonces, tengo que transformarlo. Para eso usamos el ``.T``. Ojo que
adem√°s, hay que crear un objeto nuevo con ``copy()``, sino es una vista
del mismo objeto ``v``.

.. code:: python

    angle90 = np.array([0,0,np.pi/2],dtype = np.float32)
    print(angle90)


.. parsed-literal::

    [0.        0.        1.5707964]


.. code:: python

    yf = rotc.rotate(angle90,
                          vt,
                          N) 
    y = rotate(angle90,v)

.. code:: python

    np.set_printoptions(suppress=True)
    
    print(y)
    print(yf.T)
    np.allclose(y,yf.T)


.. parsed-literal::

    [[-0.00000004  1.        ]
     [-1.         -0.00000004]
     [ 0.          0.        ]]
    [[-0.00000004  1.        ]
     [-1.         -0.00000004]
     [ 0.          0.        ]]




.. parsed-literal::

    True




Interface con lenguaje Fortran
------------------------------

Ejemplo 1: Problema a resolver
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Supongamos que queremos resolver el problema de la rotaci√≥n de vectores
en el espacio usando los tres √°ngulos de Euler.

.. code:: python

    import numpy as np

.. code:: python

    pwd




.. parsed-literal::

    '/Users/flavioc/Library/Mobile Documents/com~apple~CloudDocs/Documents/cursos/curso-python'



Si ya tenemos un m√≥dulo donde est√°n programadas las funciones necesarias

.. code:: python

    # %load rotacion_p.py
    #! /usr/bin/ipython3
    import numpy as np
    
    
    def matrix_rotation(angles):
      cx, cy, cz = np.cos(angles)
      sx, sy, sz = np.sin(angles)
      R = np.zeros((3, 3))
      R[0, 0] = cx * cz - sx * cy * sz
      R[0, 1] = cx * sz + sx * cy * cz
      R[0, 2] = sx * sy
    
      R[1, 0] = -sx * cz - cx * cy * sz
      R[1, 1] = -sx * sz + cx * cy * cz
      R[1, 2] = cx * sy
    
      R[2, 0] = sy * sz
      R[2, 1] = -sy * cz
      R[2, 2] = cy
      return R
    
    
    def rotate(angles, v):
      return np.dot(matrix_rotation(angles), v)


es f√°cil utilizarlas. Las importamos y utilizamos

.. code:: python

    # import rotacion_p as rotp
    N = 100
    # √Ångulos de Euler
    angle = np.random.random(3)
    # Definimos N vectores tridimensionales
    v = np.random.random((3, N))

.. code:: python

    # y= rotp.rotate(angle, v)
    y = rotate(angle,v)

.. code:: python

    print(angle)
    print(y[:,0:5].T)


.. parsed-literal::

    [0.36341885 0.58028317 0.4486011 ]
    [[ 4.22770593e-01  3.33318934e-01 -5.49571740e-04]
     [ 6.05335674e-01  4.34396149e-01  6.87862512e-01]
     [ 9.84128217e-01  4.35323746e-01 -1.62964229e-01]
     [ 3.17757248e-01  4.72584037e-01  3.75531685e-01]
     [ 7.35722302e-01  1.58547744e-01  6.73141163e-01]]


Interfaces con Fortran
~~~~~~~~~~~~~~~~~~~~~~

Veamos c√≥mo trabajar si tenemos el c√≥digo para realizar las rotaciones
en Fortran

Primer ejemplo: Nuestro c√≥digo
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

El c√≥digo en Fortran que tenemos es:

.. code:: fortran

   function rotate(theta, v, N) result(y)
     implicit none
     integer :: N
     real(8), dimension(3), intent(IN) :: theta
     real(8), dimension(3,N), intent(IN) :: v
     real(8), dimension(3,N) :: y
     real(8), dimension(3,3) :: R
     real(8) :: cx, cy, cz, sx, sy, sz

     ! Senos y Cosenos de los tres √°ngulos de Euler 
     cx = cos(theta(1)); cy = cos(theta(2)); cz = cos(theta(3))
     sx = sin(theta(1)); sy = sin(theta(2)); sz = sin(theta(3))

     ! Matriz de rotaci√≥n
     R(1,1) = cx*cz - sx*cy*sz
     R(1,2) = cx*sz + sx*cy*cz
     R(1,3) = sx*sy

     R(2,1) = -sx*cz - cx*cy*sz
     R(2,2) = -sx*sz + cx*cy*cz
     R(2,3) = cx*sy

     R(3,1) = sy*sz
     R(3,2) = -sy*cz
     R(3,3) = cy

     ! Aplicamos la rotaci√≥n
     y = matmul(R, v)
   end function rotate

.. code:: python

    cd interfacing_F


.. parsed-literal::

    /Users/flavioc/Library/Mobile Documents/com~apple~CloudDocs/Documents/cursos/curso-python/interfacing_F


.. code:: python

    cd interfacing_F
    !cat rotacion.f90


.. parsed-literal::

    module rotaciones
    
    contains
      !> matrix_rotation
      !! Crea la matriz de rotaci√≥n correspondiente a los tres √°ngulos de Euler
      !! 
      !! @param angles 
      !! @return R
      function matrix_rotation(angles) result(R)
        implicit none
        real(8), dimension(3), intent(IN) :: angles
        real(8), dimension(3,3) :: R
        real(8) :: cx, cy, cz, sx, sy, sz
    
        cx = cos(angles(1)); cy = cos(angles(2)); cz = cos(angles(3))
        sx = sin(angles(1)); sy = sin(angles(2)); sz = sin(angles(3))
    
        R(1,1) = cx*cz - sx*cy*sz
        R(1,2) = cx*sz + sx*cy*cz
        R(1,3) = sx*sy
    
        R(2,1) = -sx*cz - cx*cy*sz
        R(2,2) = -sx*sz + cx*cy*cz
        R(2,3) = cx*sy
    
        R(3,1) = sy*sz
        R(3,2) = -sy*cz
        R(3,3) = cy
      end function matrix_rotation
    
      !> rotate
      !!
      !! @param angles 
      !! @param v 
      !! @param N longitud del vector v 
      !! @return y
      function rotate(angles, v, N) result(y)
        implicit none
        integer, intent(IN) :: N
        real(8), dimension(3), intent(IN) :: angles
        real(8), dimension(3,N), intent(IN) :: v
        real(8), dimension(3,N) :: y
    
        y = matmul(matrix_rotation(angles), v)
      end function rotate
    
    end module rotaciones
    
    program test_rotation
      USE rotaciones !, only: rotate
      implicit none
      integer, parameter :: Ndim=1000
      real(8), dimension(3) :: angle
      real(8), dimension(3, Ndim) :: v, y
    
      integer :: n, Nloops,i,j
      real(8) :: time_begin, time_end
    
      real(8), dimension(3, 3) :: R
    
    
      ! Selecciono Ndim vectores tridimensionales al azar
      call RANDOM_NUMBER(v)
      Nloops = 10000
    
      CALL CPU_TIME ( time_begin )
      do n=1,Nloops
        call RANDOM_NUMBER(angle)
        y= rotate(angle, v, Ndim)
      end do
      CALL CPU_TIME ( time_end )
    
      write (*,'(A,1PE12.2,A)') '# Tiempo usado:', (time_end - time_begin)/(1.e-3*Nloops), ' milisegundos por 1000 rotaciones'
    
      ! Test a simple case
    
      ! angle(1) = 1.0
      ! angle(2) = 2.0
      ! angle(3) = 3.0
    
      ! R = matrix_rotation(angle)
      ! ! do i=1,3
      ! !  write(*,'(3F8.3)') R(i,1),R(i,2),R(i,3)    
      ! ! end do
    
      ! do j=0,4
      !     v(1,j+1) = j*3+0
      !     v(2,j+1) = j*3+1
      !     v(3,j+1) = j*3+2
      ! end do
      ! y= rotate(angle, v, 5)
    
      ! do i=1,5
      !   write(*,'(3F8.3)') y(1,i),y(2,i),y(3,i)    
      ! end do
    
    end program test_rotation


F2PY
^^^^

F2PY -Fortran to Python interface generator- es una utilidad que permite
generar una interface para utilizar funciones y datos definidos en
Fortran desde Python.

Informaci√≥n sobre la interfaz entre Fotran y Python, y en particular
sobre F2PY, puede encontrarse en:

-  `Scipy
   cookbook <http://scipy-cookbook.readthedocs.io/items/idx_interfacing_with_other_languages.html>`__
-  `F2PY Users Guide and Reference
   Manual <https://docs.scipy.org/doc/numpy-dev/f2py/index.html>`__
-  `Fortran Best
   Practices <http://www.fortran90.org/src/best-practices.html#interfacing-with-python>`__
-  http://websrv.cs.umt.edu/isis/index.php/F2py_example

El primer paso es utilizar esta utilidad:

.. code:: bash

   $ f2py3 -c rotacion.f90 -m rotacion_f

.. code:: python

    cd interfacing_F


.. parsed-literal::

    /Users/flavioc/Library/Mobile Documents/com~apple~CloudDocs/Documents/cursos/curso-python/interfacing_F


.. code:: python

    !f2py3 -c rotacion.f90 -m rotacion_f


.. parsed-literal::

    [39mrunning build[0m
    [39mrunning config_cc[0m
    [39munifing config_cc, config, build_clib, build_ext, build commands --compiler options[0m
    [39mrunning config_fc[0m
    [39munifing config_fc, config, build_clib, build_ext, build commands --fcompiler options[0m
    [39mrunning build_src[0m
    [39mbuild_src[0m
    [39mbuilding extension "rotacion_f" sources[0m
    [39mf2py options: [][0m
    [39mf2py:> /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9/rotacion_fmodule.c[0m
    [39mcreating /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9[0m
    Reading fortran codes...
    	Reading file 'rotacion.f90' (format:free)
    Post-processing...
    	Block: rotacion_f
    			Block: rotaciones
    				Block: matrix_rotation
    appenddecl: "dimension" not implemented.
    				Block: rotate
    appenddecl: "dimension" not implemented.
    			Block: test_rotation
    Post-processing (stage 2)...
    	Block: rotacion_f
    		Block: unknown_interface
    			Block: rotaciones
    				Block: matrix_rotation
    				Block: rotate
    			Block: test_rotation
    Building modules...
    	Building module "rotacion_f"...
    		Constructing F90 module support for "rotaciones"...
    		Creating wrapper for Fortran function "matrix_rotation"("matrix_rotation")...
    			Constructing wrapper function "rotaciones.matrix_rotation"...
    			  r = matrix_rotation(angles)
    		Creating wrapper for Fortran function "rotate"("rotate")...
    			Constructing wrapper function "rotaciones.rotate"...
    			  y = rotate(angles,v,[n])
    	Wrote C/API module "rotacion_f" to file "/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9/rotacion_fmodule.c"
    	Fortran 90 wrappers are saved to "/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9/rotacion_f-f2pywrappers2.f90"
    [39m  adding '/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9/fortranobject.c' to sources.[0m
    [39m  adding '/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9' to include_dirs.[0m
    [39mcopying /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/f2py/src/fortranobject.c -> /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9[0m
    [39mcopying /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/f2py/src/fortranobject.h -> /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9[0m
    [39m  adding '/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9/rotacion_f-f2pywrappers2.f90' to sources.[0m
    [39mbuild_src: building npy-pkg config files[0m
    [39mrunning build_ext[0m
    [39mcustomize UnixCCompiler[0m
    [39mcustomize UnixCCompiler using build_ext[0m
    [39mget_default_fcompiler: matching types: '['gnu95', 'nag', 'absoft', 'ibm', 'intel', 'gnu', 'g95', 'pg']'[0m
    [39mcustomize Gnu95FCompiler[0m
    [39mFound executable /usr/local/bin/gfortran[0m
    [39mcustomize Gnu95FCompiler[0m
    [39mcustomize Gnu95FCompiler using build_ext[0m
    [39mbuilding 'rotacion_f' extension[0m
    [39mcompiling C sources[0m
    [39mC compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /Users/flavioc/miniconda3/include -arch x86_64 -I/Users/flavioc/miniconda3/include -fPIC -O2 -isystem /Users/flavioc/miniconda3/include -arch x86_64
    [0m
    [39mcreating /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/var[0m
    [39mcreating /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/var/folders[0m
    [39mcreating /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/var/folders/18[0m
    [39mcreating /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn[0m
    [39mcreating /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T[0m
    [39mcreating /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl[0m
    [39mcreating /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9[0m
    [39mcompile options: '-DNPY_DISABLE_OPTIMIZATION=1 -I/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9 -I/Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include -I/Users/flavioc/miniconda3/include/python3.9 -c'[0m
    [39mclang: /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9/fortranobject.c[0m
    [39mclang: /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9/rotacion_fmodule.c[0m
    In file included from /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9/rotacion_fmodule.c:16:
    In file included from /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9/fortranobject.h:13:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/arrayobject.hIn file included from :/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9/fortranobject.c4::
    2In file included from :
    /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/ndarrayobject.hIn file included from :/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9/fortranobject.h12::
    13In file included from :
    /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/ndarraytypes.hIn file included from :/Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/arrayobject.h1969::
    4[1m:
    /Users/flavIn file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/ndarrayobject.h:12:
    ioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.hIn file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/ndarraytypes.h:1969:
    [1m:17:2/Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h: :[0m17[0;1;35m:warning2: :[0m [1m[0m"Using deprecated NumPy API, disable it with "          "#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION" [-W#warnings][0;1;35m[0mwarning
    : [0m[1m"Using deprecated NumPy API, disable it with "          "#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION" [-W#warnings][0m
    #warning "Using deprecated NumPy API, disable it with " \
    [0;1;32m ^
    [0m#warning "Using deprecated NumPy API, disable it with " \
    [0;1;32m ^
    [0m[1m/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9/rotacion_fmodule.c:109:12: [0m[0;1;35mwarning: [0m[1munused function 'f2py_size' [-Wunused-function][0m
    static int f2py_size(PyArrayObject* var, ...)
    [0;1;32m           ^
    [0m2 warnings generated.
    1 warning generated.
    [39mcompiling Fortran 90 module sources[0m
    [39mFortran f77 compiler: /usr/local/bin/gfortran -Wall -g -ffixed-form -fno-second-underscore -arch x86_64 -fPIC -O3 -funroll-loops
    Fortran f90 compiler: /usr/local/bin/gfortran -Wall -g -fno-second-underscore -arch x86_64 -fPIC -O3 -funroll-loops
    Fortran fix compiler: /usr/local/bin/gfortran -Wall -g -ffixed-form -fno-second-underscore -Wall -g -fno-second-underscore -arch x86_64 -fPIC -O3 -funroll-loops[0m
    [39mcompile options: '-I/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9 -I/Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include -I/Users/flavioc/miniconda3/include/python3.9 -c'
    extra options: '-J/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/ -I/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/'[0m
    [39mgfortran:f90: rotacion.f90[0m
    [01m[Krotacion.f90:56:24:[m[K
    
       56 |   integer :: n, Nloops,i,j
          |                        [01;35m[K1[m[K
    [01;35m[KWarning:[m[K Unused variable '[01m[Ki[m[K' declared at [01;35m[K(1)[m[K [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-variable-Wunused-variable]8;;[m[K]
    [01m[Krotacion.f90:56:26:[m[K
    
       56 |   integer :: n, Nloops,i,j
          |                          [01;35m[K1[m[K
    [01;35m[KWarning:[m[K Unused variable '[01m[Kj[m[K' declared at [01;35m[K(1)[m[K [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-variable-Wunused-variable]8;;[m[K]
    [01m[Krotacion.f90:59:31:[m[K
    
       59 |   real(8), dimension(3, 3) :: R
          |                               [01;35m[K1[m[K
    [01;35m[KWarning:[m[K Unused variable '[01m[Kr[m[K' declared at [01;35m[K(1)[m[K [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-variable-Wunused-variable]8;;[m[K]
    [01m[Krotacion.f90:44:0:[m[K
    
       44 |     y = matmul(matrix_rotation(angles), v)
          | 
    [01;35m[KWarning:[m[K '[01m[K__var_1_mma.offset[m[K' is used uninitialized in this function [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wuninitialized-Wuninitialized]8;;[m[K]
    [01m[Krotacion.f90:44:0:[m[K [01;35m[KWarning:[m[K '[01m[K__var_1_mma.dim[0].lbound[m[K' is used uninitialized in this function [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wuninitialized-Wuninitialized]8;;[m[K]
    [01m[Krotacion.f90:44:0:[m[K [01;35m[KWarning:[m[K '[01m[K__var_1_mma.dim[0].ubound[m[K' is used uninitialized in this function [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wuninitialized-Wuninitialized]8;;[m[K]
    [01m[Krotacion.f90:44:0:[m[K [01;35m[KWarning:[m[K '[01m[K__var_1_mma.dim[1].lbound[m[K' is used uninitialized in this function [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wuninitialized-Wuninitialized]8;;[m[K]
    [01m[Krotacion.f90:44:0:[m[K [01;35m[KWarning:[m[K '[01m[K__var_1_mma.dim[1].ubound[m[K' is used uninitialized in this function [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wuninitialized-Wuninitialized]8;;[m[K]
    [39mcompiling Fortran sources[0m
    [39mFortran f77 compiler: /usr/local/bin/gfortran -Wall -g -ffixed-form -fno-second-underscore -arch x86_64 -fPIC -O3 -funroll-loops
    Fortran f90 compiler: /usr/local/bin/gfortran -Wall -g -fno-second-underscore -arch x86_64 -fPIC -O3 -funroll-loops
    Fortran fix compiler: /usr/local/bin/gfortran -Wall -g -ffixed-form -fno-second-underscore -Wall -g -fno-second-underscore -arch x86_64 -fPIC -O3 -funroll-loops[0m
    [39mcompile options: '-I/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9 -I/Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include -I/Users/flavioc/miniconda3/include/python3.9 -c'
    extra options: '-J/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/ -I/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/'[0m
    [39mgfortran:f90: /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9/rotacion_f-f2pywrappers2.f90[0m
    [39m/usr/local/bin/gfortran -Wall -g -arch x86_64 -Wall -g -undefined dynamic_lookup -bundle /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9/rotacion_fmodule.o /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9/fortranobject.o /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/rotacion.o /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl/src.macosx-10.9-x86_64-3.9/rotacion_f-f2pywrappers2.o -L/usr/local/Cellar/gcc/10.2.0_4/lib/gcc/10/gcc/x86_64-apple-darwin20/10.2.0 -L/usr/local/Cellar/gcc/10.2.0_4/lib/gcc/10/gcc/x86_64-apple-darwin20/10.2.0/../../.. -L/usr/local/Cellar/gcc/10.2.0_4/lib/gcc/10/gcc/x86_64-apple-darwin20/10.2.0/../../.. -lgfortran -o ./rotacion_f.cpython-39-darwin.so[0m
    ld: warning: dylib (/usr/local/Cellar/gcc/10.2.0_4/lib/gcc/10/libgfortran.dylib) was built for newer macOS version (11.2) than being linked (10.9)
    ld: warning: dylib (/usr/local/Cellar/gcc/10.2.0_4/lib/gcc/10/libquadmath.dylib) was built for newer macOS version (11.2) than being linked (10.9)
    Removing build directory /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmp8h2z4zyl


.. code:: python

    from rotacion_f import rotaciones as rotf

.. code:: python

    yf = rotf.rotate(angle, v)
    print(y[:,0:5].T)
    print(yf[:,0:5].T)


.. parsed-literal::

    [[ 4.22770593e-01  3.33318934e-01 -5.49571740e-04]
     [ 6.05335674e-01  4.34396149e-01  6.87862512e-01]
     [ 9.84128217e-01  4.35323746e-01 -1.62964229e-01]
     [ 3.17757248e-01  4.72584037e-01  3.75531685e-01]
     [ 7.35722302e-01  1.58547744e-01  6.73141163e-01]]
    [[ 4.22770593e-01  3.33318934e-01 -5.49571740e-04]
     [ 6.05335674e-01  4.34396149e-01  6.87862512e-01]
     [ 9.84128217e-01  4.35323746e-01 -1.62964229e-01]
     [ 3.17757248e-01  4.72584037e-01  3.75531685e-01]
     [ 7.35722302e-01  1.58547744e-01  6.73141163e-01]]


.. code:: python

    np.allclose(yf,y)




.. parsed-literal::

    True



Veamos qu√© es exactamente lo que importamos:

.. code:: python

    np.info(rotf.rotate)


.. parsed-literal::

    y = rotate(angles,v,[n])
    
    Wrapper for ``rotate``.
    
    Parameters
    ----------
    angles : input rank-1 array('d') with bounds (3)
    v : input rank-2 array('d') with bounds (3,n)
    
    Other Parameters
    ----------------
    n : input int, optional
        Default: shape(v,1)
    
    Returns
    -------
    y : rank-2 array('d') with bounds (3,n) and rotate storage


Como vemos, estamos usando la funci√≥n ``rotate`` definida en Fortran.
Notar que: \* Tiene tres argumentos. \* Dos argumentos requeridos:
``angles`` y ``v`` \* Un argumento, correspondiente a la dimensi√≥n ``n``
que F2PY autom√°ticamente detecta como opcional.

Segundo Ejemplo: C√≥digo heredado
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

La conversi√≥n que realizamos con f2py3 la podr√≠amos haber realizado en
dos pasos:

.. code:: bash

   $ f2py3 rotacion.f90 -m rotacion_f -h rotacion.pyf
   $ f2py3 -c rotacion.pyf -m rotacion_f

En el primer paso se crea un archivo *signature* que despu√©s se utiliza
para crear el m√≥dulo que llamaremos desde **Python**. Haci√©ndolo en dos
pasos nos permite modificar el texto del archivo *.pyf* antes de
ejecutar el segundo comando.

Esto es √∫til cuando el c√≥digo original no es lo suficientemente
‚Äúmoderno‚Äù, no tiene toda la informaci√≥n necesaria sobre los argumentos o
es un c√≥digo que uno no quiere o puede editar. Veamos que forma tienen
con un ejemplo m√°s simple (tomado de la `gu√≠a de
usuario <https://docs.scipy.org/doc/numpy-dev/f2py/getting-started.html>`__):

.. code:: fortran

         SUBROUTINE FIB(A,N)
   C
   C     CALCULATE FIRST N FIBONACCI NUMBERS
   C
         INTEGER N
         REAL*8 A(N)
         DO I=1,N
            IF (I.EQ.1) THEN
               A(I) = 0.0D0
            ELSEIF (I.EQ.2) THEN
               A(I) = 1.0D0
            ELSE 
               A(I) = A(I-1) + A(I-2)
            ENDIF
         ENDDO
         END

.. code:: python

    !f2py3 --overwrite-signature fib1.f -m fib1 -h fib1.pyf


.. parsed-literal::

    Reading fortran codes...
    	Reading file 'fib1.f' (format:fix,strict)
    Post-processing...
    	Block: fib1
    			Block: fib
    Post-processing (stage 2)...
    Saving signatures to file "./fib1.pyf"


.. code:: python

    !cat fib1.pyf


.. parsed-literal::

    !    -*- f90 -*-
    ! Note: the context of this file is case sensitive.
    
    python module fib1 ! in 
        interface  ! in :fib1
            subroutine fib(a,n) ! in :fib1:fib1.f
                real*8 dimension(n) :: a
                integer, optional,check(len(a)>=n),depend(a) :: n=len(a)
            end subroutine fib
        end interface 
    end python module fib1
    
    ! This file was auto-generated with f2py (version:1.21.2).
    ! See http://cens.ioc.ee/projects/f2py2e/


El contenido del archivo ``fib1.pyf`` es:

.. code:: f90


   python module fib1 ! in 
       interface  ! in :fib1
           subroutine fib(a,n) ! in :fib1:fib1.f
               real*8 dimension(n) :: a
               integer, optional,check(len(a)>=n),depend(a) :: n=len(a)
           end subroutine fib
       end interface 
   end python module fib1

Este c√≥digo indica que tenemos una subrutina que toma dos argumentos: -
``a`` es un array - ``n`` es un entero opcional, que tiene que ser mayor
que ``len(a)``

.. code:: python

    !f2py3  -c fib1.pyf fib1.f > /dev/null


.. parsed-literal::

    In file included from /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmphlprsqk7/src.macosx-10.9-x86_64-3.9/fib1module.c:16:
    In file included from /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmphlprsqk7/src.macosx-10.9-x86_64-3.9/fortranobject.h:13:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/arrayobject.h:4:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/ndarrayobject.h:12:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/ndarraytypes.h:1969:
    [1m/Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:17:2: [0m[0;1;35mwarning: [0m[1m"Using deprecated NumPy API, disable it with "          "#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION" [-W#warnings][0m
    #warning "Using deprecated NumPy API, disable it with " \
    [0;1;32m ^
    [0mIn file included from /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmphlprsqk7/src.macosx-10.9-x86_64-3.9/fortranobject.c:2:
    In file included from /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmphlprsqk7/src.macosx-10.9-x86_64-3.9/fortranobject.h:13:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/arrayobject.h:4:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/ndarrayobject.h:12:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/ndarraytypes.h:1969:
    [1m/Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:17:2: [0m[0;1;35mwarning: [0m[1m"Using deprecated NumPy API, disable it with "          "#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION" [-W#warnings][0m
    #warning "Using deprecated NumPy API, disable it with " \
    [0;1;32m ^
    [0m[1m/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmphlprsqk7/src.macosx-10.9-x86_64-3.9/fib1module.c:109:12: [0m[0;1;35mwarning: [0m[1munused function 'f2py_size' [-Wunused-function][0m
    static int f2py_size(PyArrayObject* var, ...)
    [0;1;32m           ^
    [0m2 warnings generated.
    1 warning generated.
    ld: warning: dylib (/usr/local/Cellar/gcc/10.2.0_4/lib/gcc/10/libgfortran.dylib) was built for newer macOS version (11.2) than being linked (10.9)
    ld: warning: dylib (/usr/local/Cellar/gcc/10.2.0_4/lib/gcc/10/libquadmath.dylib) was built for newer macOS version (11.2) than being linked (10.9)


.. code:: python

    ls


.. parsed-literal::

    [31mfib1.cpython-39-darwin.so[m[m*       [1m[36mfib3.cpython-39-darwin.so.dSYM[m[m/
    fib1.f                           fib3.f
    fib1.pyf                         rotacion.f90
    [31mfib2.cpython-39-darwin.so[m[m*       rotacion.pyf
    [1m[36mfib2.cpython-39-darwin.so.dSYM[m[m/  [31mrotacion_f.cpython-39-darwin.so[m[m*
    fib2.pyf                         rotaciones.mod
    [31mfib3.cpython-39-darwin.so[m[m*


.. code:: python

    import fib1

.. code:: python

    print(fib1.fib.__doc__)


.. parsed-literal::

    fib(a,[n])
    
    Wrapper for ``fib``.
    
    Parameters
    ----------
    a : input rank-1 array('d') with bounds (n)
    
    Other Parameters
    ----------------
    n : input int, optional
        Default: len(a)
    


.. code:: python

    a = np.zeros(12)
    fib1.fib(a)
    print(a)


.. parsed-literal::

    [ 0.  1.  1.  2.  3.  5.  8. 13. 21. 34. 55. 89.]


.. code:: python

    a = np.zeros(12)
    fib1.fib(a,8)
    print(a)


.. parsed-literal::

    [ 0.  1.  1.  2.  3.  5.  8. 13.  0.  0.  0.  0.]


.. code:: python

    a = np.zeros(12)
    fib1.fib(a,18)
    print(a)


::


    ---------------------------------------------------------------------------

    error                                     Traceback (most recent call last)

    Input In [20], in <cell line: 2>()
          1 a = np.zeros(12)
    ----> 2 fib1.fib(a,18)
          3 print(a)


    error: (len(a)>=n) failed for 1st keyword n: fib:n=18


Esta es una de las caracter√≠sticas de F2PY: hace un chequeo b√°sico de
los argumentos. Hay otro error que no llega a atrapar: Si le pasamos un
array que no es del tipo indicado, falla (sin avisar). √âste claramente
no es el comportamiento deseado:

.. code:: python

    a = np.zeros(12, dtype=int)
    fib1.fib(a)
    print(a)


.. parsed-literal::

    [0 0 0 0 0 0 0 0 0 0 0 0]


Vamos a modificar el archivo de *signature* para ense√±arle dos cosas:

-  El entero es un argumento de entrada (requerido)
-  El *array* ``a`` es un archivo de salida **exclusivamente**. Entonces
   no debemos d√°rselo. La parte ``dimension(n)`` y ``depend(n)`` indica
   que debe crear un vector de ese tama√±o.

.. code:: python

    !cat fib1.pyf 


.. parsed-literal::

    !    -*- f90 -*-
    ! Note: the context of this file is case sensitive.
    
    python module fib1 ! in 
        interface  ! in :fib1
            subroutine fib(a,n) ! in :fib1:fib1.f
                real*8 dimension(n) :: a
                integer, optional,check(len(a)>=n),depend(a) :: n=len(a)
            end subroutine fib
        end interface 
    end python module fib1
    
    ! This file was auto-generated with f2py (version:1.21.2).
    ! See http://cens.ioc.ee/projects/f2py2e/


.. code:: python

    !cat fib2.pyf


.. parsed-literal::

    !    -*- f90 -*-
    ! Note: the context of this file is case sensitive.
    
    python module fib2 
        interface  
            subroutine fib(a,n)
                real*8 dimension(n), intent(out), depend(n) :: a
                integer intent(in) :: n 
            end subroutine fib
        end interface 
    end python module fib2
    
    ! This file was auto-generated with f2py (version:1.21.2).
    ! See http://cens.ioc.ee/projects/f2py2e/


.. code:: python

    !f2py3  -c fib2.pyf fib1.f > /dev/null


.. parsed-literal::

    In file included from /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmpbx5qc9hg/src.macosx-10.9-x86_64-3.9/fortranobject.c:2:
    In file included from /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmpbx5qc9hg/src.macosx-10.9-x86_64-3.9/fortranobject.h:13:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/arrayobject.h:4:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/ndarrayobject.h:12:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/ndarraytypes.h:1969:
    [1m/Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:17:2: [0m[0;1;35mwarning: [0m[1m"Using deprecated NumPy API, disable it with "          "#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION" [-W#warnings][0m
    #warning "Using deprecated NumPy API, disable it with " \
    [0;1;32m ^
    [0mIn file included from /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmpbx5qc9hg/src.macosx-10.9-x86_64-3.9/fib2module.c:16:
    In file included from /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmpbx5qc9hg/src.macosx-10.9-x86_64-3.9/fortranobject.h:13:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/arrayobject.h:4:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/ndarrayobject.h:12:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/ndarraytypes.h:1969:
    [1m/Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:17:2: [0m[0;1;35mwarning: [0m[1m"Using deprecated NumPy API, disable it with "          "#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION" [-W#warnings][0m
    #warning "Using deprecated NumPy API, disable it with " \
    [0;1;32m ^
    [0m[1m/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmpbx5qc9hg/src.macosx-10.9-x86_64-3.9/fib2module.c:102:12: [0m[0;1;35mwarning: [0m[1munused function 'f2py_size' [-Wunused-function][0m
    static int f2py_size(PyArrayObject* var, ...)
    [0;1;32m           ^
    [0m2 warnings generated.
    1 warning generated.
    ld: warning: dylib (/usr/local/Cellar/gcc/10.2.0_4/lib/gcc/10/libgfortran.dylib) was built for newer macOS version (11.2) than being linked (10.9)
    ld: warning: dylib (/usr/local/Cellar/gcc/10.2.0_4/lib/gcc/10/libquadmath.dylib) was built for newer macOS version (11.2) than being linked (10.9)


.. code:: python

    import fib2
    print(fib2.fib.__doc__)


.. parsed-literal::

    a = fib(n)
    
    Wrapper for ``fib``.
    
    Parameters
    ----------
    n : input int
    
    Returns
    -------
    a : rank-1 array('d') with bounds (n)
    


.. code:: python

    fib2.fib(9)




.. parsed-literal::

    array([ 0.,  1.,  1.,  2.,  3.,  5.,  8., 13., 21.])



.. code:: python

    print(fib2.fib(14))


.. parsed-literal::

    [  0.   1.   1.   2.   3.   5.   8.  13.  21.  34.  55.  89. 144. 233.]


La segunda manera de arreglar este problema, en lugar de modificar el
archivo de *signature* podr√≠a haber sido modificar el c√≥digo (o hacer
una rutina intermedia). Agregando comentarios de la forma ``Cf2py`` no
influimos en la compilaci√≥n ``Fortran`` pero F2PY los reconoce. En este
caso le damos la informaci√≥n sobre la intenci√≥n de los argumentos en el
c√≥digo:

.. code:: fortran

         SUBROUTINE FIB(A,N)
   C
   C     CALCULATE FIRST N FIBONACCI NUMBERS
   C
         INTEGER N
         REAL*8 A(N)
   Cf2py intent(in) n
   Cf2py intent(out) a
   Cf2py depend(n) a
         DO I=1,N
            IF (I.EQ.1) THEN
               A(I) = 0.0D0
            ELSEIF (I.EQ.2) THEN
               A(I) = 1.0D0
            ELSE 
               A(I) = A(I-1) + A(I-2)
            ENDIF
         ENDDO
         END

.. code:: python

    !f2py3  -c fib3.f -m fib3 > /dev/null


.. parsed-literal::

    In file included from /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmpkg02pumo/src.macosx-10.9-x86_64-3.9/fib3module.c:16:
    In file included from /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmpkg02pumo/src.macosx-10.9-x86_64-3.9/fortranobject.h:13:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/arrayobject.h:4:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/ndarrayobject.h:12:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/ndarraytypes.h:1969:
    [1m/Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:17:2: [0m[0;1;35mwarning: [0m[1m"Using deprecated NumPy API, disable it with "          "#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION" [-W#warnings][0m
    #warning "Using deprecated NumPy API, disable it with " \
    [0;1;32m ^
    [0mIn file included from /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmpkg02pumo/src.macosx-10.9-x86_64-3.9/fortranobject.c:2:
    In file included from /var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmpkg02pumo/src.macosx-10.9-x86_64-3.9/fortranobject.h:13:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/arrayobject.h:4:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/ndarrayobject.h:12:
    In file included from /Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/ndarraytypes.h:1969:
    [1m/Users/flavioc/miniconda3/lib/python3.9/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:17:2: [0m[0;1;35mwarning: [0m[1m"Using deprecated NumPy API, disable it with "          "#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION" [-W#warnings][0m
    #warning "Using deprecated NumPy API, disable it with " \
    [0;1;32m ^
    [0m[1m/var/folders/18/8wj5kxln1dzbpqvfs_35mz000000gn/T/tmpkg02pumo/src.macosx-10.9-x86_64-3.9/fib3module.c:102:12: [0m[0;1;35mwarning: [0m[1munused function 'f2py_size' [-Wunused-function][0m
    static int f2py_size(PyArrayObject* var, ...)
    [0;1;32m           ^
    [0m2 warnings generated.
    1 warning generated.
    ld: warning: dylib (/usr/local/Cellar/gcc/10.2.0_4/lib/gcc/10/libgfortran.dylib) was built for newer macOS version (11.2) than being linked (10.9)
    ld: warning: dylib (/usr/local/Cellar/gcc/10.2.0_4/lib/gcc/10/libquadmath.dylib) was built for newer macOS version (11.2) than being linked (10.9)


.. code:: python

    import fib3
    print(fib3.fib.__doc__)


.. parsed-literal::

    a = fib(n)
    
    Wrapper for ``fib``.
    
    Parameters
    ----------
    n : input int
    
    Returns
    -------
    a : rank-1 array('d') with bounds (n)
    


.. code:: python

    print(fib2.fib.__doc__)


.. parsed-literal::

    a = fib(n)
    
    Wrapper for ``fib``.
    
    Parameters
    ----------
    n : input int
    
    Returns
    -------
    a : rank-1 array('d') with bounds (n)
    


como vemos, son exactamente iguales.

F2PY para c√≥digo en C
^^^^^^^^^^^^^^^^^^^^^

Es posible usar F2PY para c√≥digo escrito en C, pero en ese caso debemos
escribir el *signature file* a mano.

Para c√≥digo en C es conveniente utilizar **Cython**. Cython es un
lenguaje de programaci√≥n pensado para hacer m√°s f√°cil escribir
extensiones a Python en C. Uno escribe el c√≥digo en Cython, y luego es
traducido a C, con optimizaciones.

**Cython** tambi√©n puede utilizarse con Fortran de una manera similar a
c√≥mo se usa con C. Para m√°s informaci√≥n ver la `documentaci√≥n
oficial <http://docs.cython.org/en/latest/index.html>`__
