Ejercicios de Clase 08
----------------------


1. Genere arrays en 2d, cada uno de tamaño 10x10 con:

   a. Un array con valores 1 en la “diagonal principal” y 0 en el resto
      (Matriz identidad).
   b. Un array con valores 0 en la “diagonal principal” y 1 en el resto.
   c. Un array con valores 1 en los bordes y 0 en el interior.
   d. Un array con números enteros consecutivos (empezando en 1) en los
      bordes y 0 en el interior.

2. Diga qué resultado produce el siguiente código, y explíquelo

.. code:: python

   # Ejemplo propuesto por Jake VanderPlas
   print(sum(range(5),-1))
   from numpy import *
   print(sum(range(5),-1))

3. Escriba una función ``suma_potencias(p, n)`` (utilizando arrays y
   **Numpy**) que calcule la operación

   .. math:: s_{2} = \sum_{k=0}^{n}k^{p}

   .

4. Usando las funciones de numpy ``sign`` y ``maximum`` definir las
   siguientes funciones, que acepten como argumento un array y devuelvan
   un array con el mismo *shape*:

-  función de Heaviside, que vale 1 para valores positivos de su
   argumento y 0 para valores negativos.
-  La función escalón, que vale 0 para valores del argumento fuera del
   intervalo :math:`(-1,1)` y 1 para argumentos en el intervalo.
-  La función rampa, que vale 0 para valores negativos de :math:`x` y
   :math:`x` para valores positivos.

5. **PARA ENTREGAR. Caída libre** Cree un programa que calcule la
   posición y velocidad de una partícula en caída libre para condiciones
   iniciales dadas (:math:`h_{0}`, :math:`v_{0}`), y un valor de
   gravedad dados. Se utilizará la convención de que alturas y
   velocidades positivas corresponden a vectores apuntando hacia arriba
   (una velocidad positiva significa que la partícula se aleja de la
   tierra).

El programa debe realizar el cálculo de la velocidad y altura para un
conjunto de tiempos equiespaciados. El usuario debe poder decidir o
modificar el comportamiento del programa mediante opciones por línea de
comandos.

El programa debe aceptar las siguientes opciones por líneas de comando:
- ``-v vel`` o, equivalentemente ``--velocidad=vel``, donde ``vel`` es
el número dando la velocidad inicial en m/s. El valor por defecto será
``0``. - ``-h alt`` o, equivalentemente ``--altura=alt``, donde ``alt``
es un número dando la altura inicial en metros. El valor por defecto
será ``1000``. La altura inicial debe ser un número positivo. -
``-g grav``, donde ``grav`` es el módulo del valor de la aceleración de
la gravedad en :math:`m/s^2`. El valor por defecto será ``9.8``. -
``-o nombre`` o, equivalentemente ``--output=nombre``, donde ``nombre``
será el nombre de un archivo donde se escribirán los resultados. Si el
usuario no usa esta opción, debe imprimir por pantalla (``sys.stdout``).
- ``-n N`` o, equivalentemente ``--Ndatos=N``, donde ``N`` es un número
entero indicando la cantidad de datos que deben calcularse. Valor por
defecto: ``100`` - ``--ti=instante_inicial`` indica el tiempo inicial de
cálculo. Valor por defecto: ``0``. No puede ser mayor que el tiempo de
llegada a la posición :math:`h=0` - ``--tf=tiempo_final`` indica el
tiempo inicial de cálculo. Valor por defecto será el correspondiente al
tiempo de llegada a la posición :math:`h=0`.

**NOTA:** Envíe el programa llamado **Suapellido_08.py** en un adjunto
por correo electrónico, con asunto: **Suapellido_08**, antes del día
lunes 9 de Marzo.

6. Queremos realizar numéricamente la integral

   .. math::


        \int_{a}^{b}f(x)dx
        

   utilizando el método de los trapecios. Para eso partimos el intervalo
   :math:`[a,b]` en :math:`N` subintervalos y aproximamos la curva en
   cada subintervalo por una recta

.. image:: figuras/trapez_rule_wiki.png



La línea azul representa la función :math:`f(x)` y la línea roja la
interpolación por una recta (figura de
https://en.wikipedia.org/wiki/Trapezoidal_rule)

Si llamamos :math:`x_{i}` (:math:`i=0,\ldots,n,` con :math:`x_{0}=a` y
:math:`x_{n}=b`) los puntos equiespaciados, entonces queda

.. math::


        \int_{a}^{b}f(x)dx\approx\frac{h}{2}\sum_{i=1}^{n}\left(f(x_{i})+f(x_{i-1})\right).
     

-  Escriba una función ``trapz(x, y)`` que reciba dos arrays
   unidimensionales ``x`` e ``y`` y aplique la fórmula de los trapecios.

-  Escriba una función ``trapzf(f, a, b, npts=100)`` que recibe una
   función ``f``, los límites ``a``, ``b`` y el número de puntos a
   utilizar ``npts``, y devuelve el valor de la integral por trapecios.

-  Calcule la integral logarítmica de Euler:

   .. math:: \mathrm{Li}(t) = \int_2^t \frac{1}{\ln x} dx

   usando la función ´trapzf´ para valores de
   ``npts=10, 20, 30, 40, 50, 60``
