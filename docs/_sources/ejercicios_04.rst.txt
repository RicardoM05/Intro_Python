Ejercicios de Clase 04
----------------------


1. Un método para calcular el área de un polígono (no necesariamente
   regular) que se conoce como fórmula del área de Gauss o fórmula de la
   Lazada (*shoelace formula*) consiste en describir al polígono por sus
   puntos en un sistema de coordenadas. Cada punto se describe como un
   par :math:`(x,y)` y la fórmula del área está dada mediante la suma de
   la multiplicación de los valores en una diagonal a los que se le
   resta los valores en la otra diagonal, como muestra la figura

   .. image:: figuras/shoelace.png

   .. math::  2 A = (x_{1} y_{2} + x_{2} y_{3} + x_{3} y_{4} + \dots) - (x_{2} y_{1} + x_{3} y_{2} + x_{4} y_{3} + \dots) 

   .. image:: figuras/ejemplo_shoelace.png

   -  Utilizando una descripción adecuada del polígono, escribir una
      función que implemente la fórmula de Gauss para calcular su área y
      aplicarla al ejemplo de la figura.

   -  Verificar que el resultado no depende del punto de inicio.

2. Escriba funciones para analizar la divisibilidad de enteros:

   -  La función ``es_divisible`` que retorna ``True`` si el argumento
      ``x`` es divisible por alguno de los elemntos del segundo
      argumento: ``divisores``. El argumento ``divisores`` es opcional y
      si está presente es una variable del tipo lista que contiene los
      valores para los cuáles debemos examinar la divisibilidad.

   El valor por defecto de ``divisores`` es ``[2,3,5,7]``. Las
   siguientes expresiones deben retornar el mismo valor:
   ``python  es_divisible(x)   es_divisible(x, [2,3,5,7])``

   -  La función ``es_divisible_por`` cuyo primer argumento (mandatorio)
      es ``x``, y luego puede aceptar un número indeterminado de
      argumentos:

   .. code:: python

      es_divisible_por(x)  # retorna verdadero siempre
      es_divisible_por(x, 2) # verdadero si x es par
      es_divisible_por(x, 2, 3, 5, 7) # igual resultado que es_divisible(x)
      es_divisible_por(x, 2, 3, 5, 7, 9, 11, 13)  # o cualquier secuencia de argumentos debe funcionar

3. **PARA ENTREGAR.** Describimos una grilla de **sudoku** como un
   string de nueve líneas, cada una con 9 números, con números entre 1 y
   9. Escribir un conjunto de funciones que permitan chequear si una
   grilla de sudoku es correcta. Para que una grilla sea correcta deben
   cumplirse las siguientes condiciones

   -  Los números están entre 1 y 9
   -  En cada fila no deben repetirse
   -  En cada columna no deben repetirse
   -  En todas las regiones de 3x3 que no se solapan, empezando de
      cualquier esquina, no deben repetirse

   1. Escribir una función que convierta un string con formato a una
      lista bidimensional. El string estará dado con nueve números por
      línea, de la siguiente manera (los espacios en blanco en cada
      línea pueden variar):

   .. code:: python

      sudoku = """145327698
              839654127
              672918543
              496185372
              218473956
              753296481
              367542819
              984761235
              521839764"""

   2. Escribir una función ``check_repetidos()`` que tome por argumento
      una lista (unidimensional) y devuelva verdadero si la lista tiene
      elementos repetidos y falso en caso contrario.

   3. Escribir la función ``check_sudoku()`` que toma como argumento una
      grilla (como una lista bidimensional de ``9x9``) y devuelva
      verdadero si los números corresponden a la resolución correcta del
      Sudoku y falso en caso contrario. Note que debe verificar que los
      números no se repiten en filas, ni en columnas ni en recuadros de
      ``3x3``. Para obtener la posición de los recuadros puede
      investigar que hacen las líneas de código:

   .. code:: python

      j, k = (i // 3) * 3, (i % 3) * 3
      r = [grid[a][b] for a in range(j, j+3) for b in range(k, k+3)]

   suponiendo que ``grid`` es el nombre de nuestra lista bidimensional,
   cuando ``i`` toma valores entre ``0`` y ``8``.

   Debe enviar por correo electrónico, con asunto “04_SuApellido”, un
   programa llamado 04_SuApellido.py (en todos los casos utilice su
   apellido, no la palabra “SuApellido”) .
