Ejercicios 
===========

Clase 1
-------

1. Abra una terminal (consola) de Ipython y utilícela como una
   calculadora para realizar las siguientes acciones:

   -  Suponiendo que, de las cuatro horas de clases, tomamos un descanso
      de 15 minutos y nos distraemos otros 13 minutos, calcular cuántos
      minutos efectivos de trabajo tendremos en las 16 clases.
   -  Para la cantidad de alumnos presentes en el aula: ¿cuántas
      horas-persona de trabajo hay involucradas?

2. Muestre en la consola de Ipython:

   -  el nombre de su directorio actual
   -  los archivos en su directorio actual
   -  Cree un subdirectorio llamado ``tmp``
   -  si está usando linux, la fecha y hora
   -  Borre el subdirectorio ``tmp``

3. Abra un editor de textos y escriba las líneas necesarias para
   imprimir por pantalla las siguientes frases (una por línea). Guarde y
   ejecute su programa.

   -  Hola, por primera vez
   -  Hola, hoy es mi día de escribir frases intrascendentes
   -  Hola, nuevamente, y espero que por última vez
   -  E = mc²
   -  Adiós

Ejecute el programa.

Inicie una terminal de *Jupyter* y realice las siguientes operaciones:

4. Para cubos de lados de longitud L = 1, 3, 5 y 8, calcule su
   superficie y su volumen.

5. Para esferas de radios r = 1, 3, 5 y 8, calcule su superficie y su
   volumen.

6. Fíjese si alguno de los valores de :math:`x=2.05`, :math:`x=2.11`,
   :math:`x=2.21` es un cero de la función
   :math:`f(x)=x^{2} + x/4 - 1/2`.

7. Para el número complejo :math:`z= 1 + 0.5 i`

   -  Calcular :math:`z^2, z^3, z^4, z^5.`
   -  Calcular los complejos conjugados de :math:`z`, :math:`z^2` y
      :math:`z^3`.

Clase 2
-------

1. Centrado manual de frases

   a. Utilizando la función ``len()`` centre una frase corta en una
      pantalla de 80 caracteres. Utilice la frase: “Primer ejercicio con
      caracteres”

   b. Agregue subrayado a la frase anterior

2. Para el número complejo :math:`z= 1 - 0.5 i`

   -  Escribir :math:`z`, :math:`z^2` y :math:`z^3` en coordenadas
      polares.
   -  Escribir un programa, utilizando formato de strings, que escriba
      las frases:

      -  “El conjugado de z=1-0.5j es 1+0.5j”
      -  “El conjugado de z=(1+0.5j)^2 es …” (con el valor
         correspondiente)

3. Para la cadena de caracteres:

   .. code:: python

      s = '''Aquí me pongo a cantar
      Al compás de la vigüela,
      Que el hombre que lo desvela
      Una pena estraordinaria
      Como la ave solitaria
      Con el cantar se consuela.'''

-  Cuente la cantidad de veces que aparecen los substrings ``es``,
   ``la``, ``que``, ``co``, en los siguientes dos casos: distinguiendo
   entre mayúsculas y minúsculas, y no distinguiendo. Imprima el
   resultado.

-  Cree una lista, donde cada elemento es una línea del string ``s`` y
   encuentre la de mayor longitud. Imprima por pantalla la línea y su
   longitud.

-  Forme un nuevo string de 10 caracteres que contenga los 5 primeros y
   los 5 últimos del string anterior ``s``. Imprima por pantalla el
   nuevo string.

-  Forme un nuevo string que contenga los 10 caracteres centrales de
   ``s`` (utilizando un método que pueda aplicarse a otros strings
   también). Imprima por pantalla el nuevo string.

-  Cambie todas las letras “m” por “n” y todas las letras “n” por “m” en
   ``s``. Imprima el resultado por pantalla.

-  Debe entregar un programa llamado ``02_SuApellido.py`` (con su
   apellido, no la palabra “SuApellido”). El programa al correrlo con el
   comando ``python3 SuApellido_02.py`` debe imprimir:

``Nombre Apellido   Clase 2   Distinguiendo: 2 5 1 2   Sin distinguir: 2 5 2 4   Que el hombre que lo desvela : longitud=28   Aquí uela.   desvela    Un   Aquí ne pomgo a camtar   Al conpás de la vigüela,   Que el honbre que lo desvela   Uma pema estraordimaria   Cono la ave solitaria   Com el camtar se comsuela.``

3. Manejos de listas:

   -  Cree la lista **N** de longitud 50, donde cada elemento es un
      número entero de 1 a 50 inclusive (Ayuda: vea la expresión
      ``range``).
   -  Invierta la lista.
   -  Extraiga una lista **N2** que contenga sólo los elementos pares de
      **N**.
   -  Extraiga una lista **N3** que contenga sólo aquellos elementos que
      sean el cuadrado de algún número entero.

4. Cree una lista de la forma ``L = [1,3,5,...,17,19,19,17,...,3,1]``

5. Operación “rara” sobre una lista:

   -  Defina la lista ``L = [0,1]``
   -  Realice la operación ``L.append(L)``
   -  Ahora imprima L, e imprima el último elemento de ``L``.
   -  Haga que una nueva lista ``L1`` que tenga el valor del último
      elemento de ``L`` y repita el inciso anterior.

6. Utilizando el string:
   ``python s1='En un lugar de la Mancha de cuyo nombre no quiero acordarme'``
   y utilizando los métodos de strings:

   -  Obtenga la cantidad de caracteres.
   -  Imprima la frase anterior pero con cada palabra empezando en
      mayúsculas.
   -  Cuente cuantas letras ‘a’ tiene la frase, ¿cuántas vocales tiene?
   -  Imprima el string ``s1`` centrado en una línea de 80 caracteres,
      rodeado de guiones en la forma:

   ``----------En un lugar de la Mancha de cuyo nombre no quiero acordarme-----------``

   -  Obtenga una lista **L1** donde cada elemento sea una palabra.
   -  Cuente la cantidad de palabras en ``s1`` (utilizando python).
   -  Ordene la lista **L1** en orden alfabético.
   -  Ordene la lista **L1** tal que las palabras más cortas estén
      primero.
   -  Ordene la lista **L1** tal que las palabras más largas estén
      primero.
   -  Construya un string **s2** con la lista del resultado del punto
      anterior.
   -  Encuentre la palabra más larga y la más corta de la frase.

7. Escriba un script que encuentre las raíces de la ecuación cuadrática
   :math:`a x^{2} + bx +c = 0`. Los valores de los parámetros defínalos
   en el mismo script, un poco más arriba.

8. Considere un polígono regular de :math:`N` lados inscripto en un
   círculo de radio unidad:

   -  Calcule el ángulo interior del polígono regular de :math:`N` lados
      (por ejemplo el de un triángulo es 60 grados, de un cuadrado es 90
      grados, y de un pentágono es 108 grados). Exprese el resultado en
      grados y en radianes para valores de
      :math:`N= 3, 5, 6, 8, 9, 10, 12`.
   -  ¿Puede calcular la longitud del lado de los polígonos regulares si
      se encuentran inscriptos en un círculo de radio unidad?

9. Escriba un *script* (llamado distancia1.py) que defina las variables
   velocidad y posición inicial :math:`v_{0}`, :math:`z_{0}`, la
   aceleración :math:`g`, y la masa :math:`m=1` kg a tiempo :math:`t=0`,
   y calcule e imprima la posición y velocidad a un tiempo posterior
   :math:`t`. Ejecute el programa para varios valores de posición y
   velocidad inicial para :math:`t=2` segundos. Recuerde que las
   ecuaciones de movimiento con aceleración constante son:

   .. math:: \begin{align}  v &= v_0 - g t \,  \\  z &= z_0 + v_0 t - g t^2/2. \end{align}

Adicionales
~~~~~~~~~~~

11. Calcular la suma:

    .. math:: s_{1} = \frac{1}{2} \left(\sum_{k=0}^{100}k \right)^{-1}

    *Ayuda*: busque información sobre la función ``sum()``

12. Construir una lista ``L2`` con 2000 elementos, todos iguales a
    ``0.0005``. Imprimir su suma utilizando la función ``sum`` y
    comparar con la función que existe en el módulo ``math`` para
    realizar suma de números de punto flotante.

Clase 3
-------

1. Imprimir los números que no son divisibles por 2, 3, 5 o 7 de los
   primeros 100 números naturales

2. Calcule la suma

   .. math:: s_{2} = \sum_{k=1}^{\infty} \frac{(-1)^{k} (k+1)}{2 k^{3} + k^{2}}

   con un error relativo estimado menor a :math:`\epsilon=10^{-5}`.
   Imprima por pantalla el resultado, el valor máximo de :math:`k`
   computado y el error relativo estimado.

3. Realice un programa que:

   -  Lea el archivo names.txt
   -  Guarde en un nuevo archivo (llamado pares.txt) palabra por medio
      del archivo original (la primera, tercera, …) una por línea, pero
      en el orden inverso al leído
   -  Agregue al final de dicho archivo, las palabras pares pero
      separadas por un punto y coma (;)
   -  En un archivo llamado longitudes.txt guarde las palabras ordenadas
      por su longitud, y para cada longitud ordenadas alfabéticamente.
   -  En un archivo llamado letras.txt guarde sólo aquellas palabras que
      contienen las letras ``w,x,y,z``, con el formato:

      -  w: Walter, ….
      -  x: Xilofón, …
      -  y: ….
      -  z: ….

   -  Cree un diccionario, donde cada *key* es la primera letra y cada
      valor es una lista, cuyo elemento es una tuple (palabra,
      longitud). Por ejemplo:

   .. code:: python

      d['a'] = [('Aaa',3),('Anna', 4), ...]

4. Las funciones de Bessel de orden :math:`n` cumplen las relaciones de
   recurrencia

   .. math::


       J_{n -1}(x)- \frac{2n }{x}\, J_{n }(x) + J_{n +1}(x) = 0 \\
       J^{2}_{0}(x) + \sum_{n=1}^{\infty} 2 J^{2}_{n}(x) = 1

   Para calcular la función de Bessel de orden :math:`N`, se empieza con
   un valor de :math:`M \gg N`, y utilizando los valores iniciales
   :math:`J_{M}=1`, :math:`J_{M+1}=0` se utiliza la primera relación
   para calcular todos los valores de :math:`n < M`. Luego, utilizando
   la segunda relación se normalizan todos los valores. **Nota:** Estas
   relaciones son válidas si :math:`M \gg x` (use algún valor estimado,
   como por ejemplo :math:`M=N+20`).

   Utilice estas relaciones para calcular :math:`J_{N}(x)` para
   :math:`N=3,4,7` y :math:`x=2.5, 5.7, 10`. Para referencia se dan los
   valores esperados

   .. math::


      J_3( 2.5) =  0.21660\\
      J_4( 2.5) =  0.07378\\
      J_7( 2.5) =  0.00078\\
      J_3( 5.7) =  0.20228\\
      J_4( 5.7) =  0.38659\\
      J_7( 5.7) =  0.10270\\
      J_3(10.0) =  0.05838\\
      J_4(10.0) = -0.21960\\
      J_7(10.0) =  0.21671\\

5. Imprima por pantalla una tabla con valores equiespaciados de x entre
   0 y 180, con valores de las funciones trigonométricas de la forma:

   .. code:: python

      """
        |=================================|
        | x  | sen(x) | cos(x) | tan(-x/4)|
        |=================================|
        |  0 |  0.000 |  1.000 |  -0.000  |
        | 10 |  0.174 |  0.985 |  -0.044  |
        | 20 |  0.342 |  0.940 |  -0.087  |
        | 30 |  0.500 |  0.866 |  -0.132  |
        | 40 |  0.643 |  0.766 |  -0.176  |
        | 50 |  0.766 |  0.643 |  -0.222  |
        | 60 |  0.866 |  0.500 |  -0.268  |
        | 70 |  0.940 |  0.342 |  -0.315  |
        | 80 |  0.985 |  0.174 |  -0.364  |
        | 90 |  1.000 |  0.000 |  -0.414  |
        |100 |  0.985 | -0.174 |  -0.466  |
        |110 |  0.940 | -0.342 |  -0.521  |
        |120 |  0.866 | -0.500 |  -0.577  |
        |130 |  0.766 | -0.643 |  -0.637  |
        |140 |  0.643 | -0.766 |  -0.700  |
        |150 |  0.500 | -0.866 |  -0.767  |
        |160 |  0.342 | -0.940 |  -0.839  |
        |170 |  0.174 | -0.985 |  -0.916  |
        |=================================|
      """

6. Dada una lista de números, vamos a calcular valores relacionados a su
   estadística.

   -  Calcular los valores de la media aritmética, la media geométrica y
      la media armónica, dados por:

      .. math::


          A(x_1, \ldots, x_n) = \bar{x} = \frac{x_1 + \cdots + x_n}{n} \\
          G(x_1, \ldots, x_n) = \sqrt[n]{x_1 \cdots x_n} \\
          H(x_1, \ldots, x_n) = \frac{n}{\frac{1}{x_1} + \cdots + \frac{1}{x_n}}
          

   -  Calcular la desviación estándard:

      .. math::  \sigma\equiv\sqrt{\frac{1}{n}\sum_i \left(x_{i} - \bar{x} \right)^2} 

   -  Calcular la mediana, que se define como el valor para el cual la
      mitad de los valores de la lista es menor que ella. Si el número
      de elementos es par, se toma el promedio entre los dos adyacentes.

      Realizar los cálculos para las listas de números:

   .. code:: python

      L1 = [6.41, 1.28, 11.54, 5.13, 8.97, 3.84, 10.26,
            14.1, 12.82, 16.67, 2.56, 17.95, 7.69, 15.39]
      L2 = [4.79, 1.59, 2.13, 4.26, 3.72, 1.06, 6.92,
            3.19, 5.32, 2.66, 5.85, 6.39, 0.53]

   -  La *moda* se define como el valor que ocurre más frecuentemente en
      una colección. Note que la moda puede no ser única. En ese caso
      debe obtener todos los valores. Calcule la moda de las siguiente
      lista de números enteros:

      .. code:: python

         L = [8, 9, 10, 11, 10, 6, 10, 17, 8, 8, 5, 10, 14,
              7, 9, 12, 8, 17, 10, 12, 9, 11, 9, 12, 11, 11,
              6, 9, 12, 5, 12, 9, 10, 16, 8, 4, 5, 8, 11, 12]

7. Dada una lista de direcciones en el plano, expresadas por los ángulos
   en grados a partir de un cierto eje, calcular la dirección promedio,
   expresada en ángulos. Pruebe su algoritmo con las listas:

   .. code:: python

      t1 = [0, 180, 370, 10]
      t2 = [30, 0, 80, 180]
      t3 = [80, 180, 540, 280]

Clase 4
-------

1. Realice un programa para:

   -  Leer los datos del archivo **aluminio.dat** y poner los datos del
      elemento en un diccionario de la forma:

   .. code:: python

      d = {'S': 'Al', 'Z':13, 'A':27, 'M': '26.98153863(12)', 'P': 1.0000, 'MS':26.9815386(8)'}

   -  Modifique el programa anterior para que las masas sean números
      (``float``) y descarte el valor de la incerteza (el número entre
      paréntesis)
   -  Agregue el código necesario para obtener una impresión de la
      forma:

      ::

         Elemento: S
         Número Atómico: 13
         Número de Masa: 27
         Masa: 26.98154

      Note que la masa sólo debe contener 5 números decimales

2. Escriba funciones para analizar la divisibilidad de enteros:

   -  La función ``es_divisible1(x)`` que retorna verdadero si x es
      divisible por alguno de ``2,3,5,7`` o falso en caso contrario.
   -  La función ``es_divisible_por_lista`` que cumple la misma función
      que ``es_divisible1`` pero recibe dos argumentos: el entero ``x``
      y una variable del tipo lista que contiene los valores para los
      cuáles debemos examinar la divisibilidad. Las siguientes
      expresiones deben retornar el mismo valor:

      .. code:: python

         es_divisible1(x) 
         es_divisible_por_lista(x, [2,3,5,7])
         es_divisible_por_lista(x)

   -  La función ``es_divisible_por`` cuyo primer argumento (mandatorio)
      es ``x``, y luego puede aceptar un número indeterminado de
      argumentos:

      .. code:: python

         es_divisible_por(x)  # retorna verdadero siempre
         es_divisible_por(x, 2) # verdadero si x es par
         es_divisible_por(x, 2, 3, 5, 7) # igual resultado que es_divisible1(x) 
                                         # e igual a es_divisible_por_lista(x)
         es_divisible_por(x, 2, 3, 5, 7, 9, 11, 13)  # o cualquier secuencia de argumentos

3. Realice un programa para:

   -  Leer el archivo **elementos.dat** en el directorio **data** y
      guardar los datos en un diccionario, cuyas claves serán los
      símbolos del elemento:

      .. code:: python

         elementos.keys() = ['C', 'H', 'O', 'N', 'Na', 'Cl', 'Ca', 'Au']

      y los valores serán diccionarios tal como se definieron en el
      ejercicio anterior. Por ejemplo:

      .. code:: python

          elementos['H'] = {'S': 'H', 'Z':1, 'A':1, 'M': 1.00782503207, 'P': 0.999885, 'MS':1.00794}

   -  Imprimir todos los elementos, en un formato legible (y si le sale:
      agradable) para personas, ordenados en valores crecientes de masa.

4. **PARA ENTREGAR:** Adapte los programas realizados en el punto
   anterior para trabajar con funciones. Se requiere que escriba:

   -  Una función que lea un archivo (cuyo nombre es el argumento) y
      devuelva un diccionario donde cada clave es el símbolo del
      elemento.
   -  Una función que escriba en un string todos los elementos,
      ordenados alfabéticamente por clave, en una forma similar a

      .. code:: python

         s = """
           Elemento: C
           Z = 6
           A = 12
           Masa = 12.0000000
           Abundancia = 0.9893
           Masa Promedio = 12.0107

           Elemento: Ca
           Z = 20
           A = 40
           Masa = 39.96259098
           Abundancia = 0.96941
           Masa Promedio = 40.078

           ...
         """

      Esta función tendrá un argumento requerido que es el diccionario
      con los elementos y un argumento opcional ``reverse`` con valor
      por defecto ``False``. Este argumento indica si los elementos se
      ordenan alfabéticamente de la manera natural (a,b,c…,y,z) o
      inversa (z,y,x, … b,a).
   -  Una función que reciba un nombre de archivo y un string y escriba
      el string en el archivo dado.
   -  Finalmente, escriba también el código llamando a las funciones
      anteriores para realizar el trabajo de lectura y escritura de los
      elementos en archivos.

   **Instrucciones de envío:** Envíe el código en un archivo llamado
   ``04_SuApellido.py`` por correo electrónico con asunto (*subject*)
   ``04_SuApellido``.

Clase 5
-------

1. Escriba una función ``crear_sen(A, w)`` que acepte dos números reales
   :math:`A, w` como argumentos y devuelva la función ``f(x)``.

   Al evaluar la función ``f`` en un dado valor :math:`x` debe dar el
   resultado: :math:`f(x) = A \sin(w x)` tal que se pueda utilizar de la
   siguiente manera:

   .. code:: python

        f = crear_sen(3, 1.5)
        f(2)          # Debería imprimir 3*sin(1.5*2)=0.4233600241796016

2. Utilizando conjuntos (``set``), escriba una función que compruebe si
   un string contiene todas las vocales. La función debe devolver
   ``True`` o ``False``.

3. Utilizando manejo de excepciones, cree un decorador para la función

   .. code:: python

      def cubos(v):
        return [x**3 for x in v]

   Debe dar un mensaje si ``v`` no es un iterable de números. Por
   ejemplo, debe funcionar para listas, tuplas y conjuntos de números
   pero debe dar un mensaje de error para escalares o cuando una de las
   componentes del argumento no es un número.

4. Escriba una serie de funciones que permitan trabajar con polinomios.
   Vamos a representar a un polinomio como una lista de números reales,
   donde cada elemento corresponde a un coeficiente que acompaña una
   potencia

   -  Una función que devuelva el orden del polinomio (un número entero)
   -  Una función que sume dos polinomios y devuelva un polinomio
      (objeto del mismo tipo)
   -  Una función que multiplique dos polinomios y devuelva el resultado
      en otro polinomio
   -  Una función devuelva la derivada del polinomio (otro polinomio).
   -  Una función que, acepte el polinomio y devuelva la función
      correspondiente.

5. Vamos a describir un **sudoku** como un array bidimensional de
   ``9x9`` números, cada uno de ellos entre 1 y 9.

   Escribir una función que tome como argumento una grilla (Lista
   bidimensional de ``9x9``) y devuelva verdadero si los números
   corresponden a la resolución correcta y falso en caso contrario.
   Recordamos que para que sea válido debe cumplirse que

   -  Los números están entre 1 y 9
   -  En cada fila no deben repetirse
   -  En cada columna no deben repetirse
   -  En todas las regiones de 3x3 que no se solapan, empezando de
      cualquier esquina, no deben repetirse.

Clase 6
-------

1. Para la Clase ``Vector`` dada en clase implemente los métodos
   ``suma``, ``producto`` y ``abs``

   -  ``suma`` debe retornar un objeto del tipo ``Vector`` y contener en
      cada componente la suma de las componentes de los dos vectores que
      toma como argumento.
   -  ``producto`` toma como argumentos dos vectores y retorna un número
      real

   -  ``abs`` toma como argumentos el propio objeto y retorna un número
      real

2. Utilizando la definición de la clase ``Punto``:

   .. code:: python


      class Punto:
        "Clase para describir un punto en el espacio"

        num_puntos = 0

        def __init__(self, x=0, y=0, z=0):
          "Inicializa un punto en el espacio"
          self.x = x
          self.y = y
          self.z = z
          Punto.num_puntos += 1
          return None

        def __del__(self):
          "Borra el punto y actualiza el contador"
          Punto.num_puntos -= 1

        def __str__(self):
          s = "(x = {}, y = {}, z = {})".format(self.x, self.y, self.z)
          return s

        def __repr__(self):
          return "Punto(x={}, y={}, z={})".format(self.x, self.y, self.z)

        def __call__(self):
          return self.__str__()

        @classmethod
        def total(cls):
          "Imprime el número total de puntos"
          print("En total hay {} puntos definidos".format(cls.num_puntos))

   Complete la implementación de la clase ``Vector`` con los métodos
   pedidos

   .. code:: python


      class Vector(Punto):
        "Representa un vector en el espacio"

        def suma(self, v2):
          "Calcula un vector que contiene la suma de dos vectores"
          print("Aún no implementada la suma de dos vectores") 
          # código calculando v = suma de self + v2
          # ...

        def producto(self, v2):
          "Calcula el producto interno entre dos vectores"
          print("Aún no implementado el producto interno de dos vectores") 
          # código calculando el producto interno pr = v1 . v2

        def abs(self):
          "Devuelve la distancia del punto al origen"
          print("Aún no implementado la norma del vector") 
          # código calculando la magnitud del vector

        def angulo_entre_vectores(self, v2):
          "Calcula el ángulo entre dos vectores"
          print("Aún no implementado el ángulo entre dos vectores") 
          angulo = 0
          # código calculando angulo = arccos(v1 * v2 / (|v1||v2|))
          return angulo

        def coordenadas_cilindricas(self):
          "Devuelve las coordenadas cilindricas del vector como una tupla (r, theta, z)"
          print("No implementada")

        def coordenadas_esfericas(self):
          "Devuelve las coordenadas esféricas del vector como una tupla (r, theta, phi)"
          print("No implementada")

3. **PARA ENTREGAR:** Cree una clase ``Polinomio`` para representar
   polinomios. La clase debe guardar los datos representando todos los
   coeficientes. El grado del polinomio será *menor o igual a 9* (un
   dígito).

   **NOTA:** Utilice el archivo **polinomio_06.py** en el directorio
   **data**, que renombrará de la forma usual ``Apellido_06.py``. Se le
   pide que programe:

   -  Un método de inicialización ``__init__`` que acepte una lista de
      coeficientes. Por ejemplo para el polinomio
      :math:`4 x^3 + 3 x^2 + 2 x + 1` usaríamos:

   .. code:: python

      >>> p = Polinomio([1,2,3,4])

   -  Un método ``grado`` que devuelva el orden del polinomio

   .. code:: python

      >>> p = Polinomio([1,2,3,4])
      >>> p.grado()
      3

   -  Un método ``get_coeficientes``, que devuelva una lista con los
      coeficientes:

   .. code:: python

      >>> p.get_coeficientes()
      [1, 2, 3, 4]

   -  Un método ``set_coeficientes``, que fije los coeficientes de la
      lista:

   .. code:: python

      >>> p1 = Polinomio()
      >>> p1.set_coeficientes([1, 2, 3, 4])
      >>> p1.get_coeficientes()
      [1, 2, 3, 4]

   -  El método ``suma_pol`` que le sume otro polinomio y devuelva un
      polinomio (objeto del mismo tipo)

   -  El método ``mul`` que multiplica al polinomio por una constante y
      devuelve un nuevo polinomio

   -  Un método, ``derivada``, que devuelva la derivada de orden ``n``
      del polinomio (otro polinomio):

   .. code:: python

      >>> p1 = p.derivada()
      >>> p1.get_coeficientes()
      [2, 6, 12]
      >>> p2 = p.derivada(n=2)
      >>> p2.get_coeficientes()
      [6, 24]

   -  Un método que devuelva la integral (antiderivada) del polinomio de
      orden ``n``, con constante de integración ``cte`` (otro
      polinomio).

   .. code:: python

      >>> p1 = p.integrada()
      >>> p1.get_coeficientes()
      [0, 1, 1, 1, 1]
      >>>
      >>> p2 = p.integrada(cte=2)
      >>> p2.get_coeficientes()
      [2, 1, 1, 1, 1]
      >>>
      >>> p3 = p.integrada(n=3, cte=1.5)
      >>> p3.get_coeficientes()
      [1.5, 1.5, 0.75, 0.16666666666666666, 0.08333333333333333, 0.05]

   -  El método ``eval``, que evalúe el polinomio en un dado valor de x.

   .. code:: python

      >>> p = Polinomio([1,2,3,4])
      >>> p.eval(x=2)
      49
      >>>
      >>> p.eval(x=0.5)
      3.25

   -  (**Si puede**) Un método ``from_string`` que crea un polinomio
      desde un string en la forma:

   .. code:: python

      >>> p = Polinomio()
      >>> p.from_string('x^5 + 3x^3 - 2 x+x^2 + 3 - x')
      >>> p.get_coeficientes()
      [3, -3, 1, 3, 0, 1]
      >>>
      >>> p1 = Polinomio()
      >>> p1.from_string('y^5 + 3y^3 - 2 y + y^2+3', var='y')
      >>> p1.get_coeficientes()
      [3, -2, 1, 3, 0, 1]

   -  Escriba un método llamado ``__str__``, que devuelva un string (que
      define cómo se va a imprimir el polinomio). Un ejemplo de salida
      será:

   .. code:: python

      >>> p = Polinomio([1,2.1,3,4])
      >>> print(p)
      4 x^3 + 3 x^2 + 2.1 x + 1

   -  Escriba un método llamado ``__call__``, de manera tal que al
      llamar al objeto, evalúe el polinomio (use el método ``eval``
      definido anteriormente)

   .. code:: python

      >>> p = Polinomio([1,2,3,4])
      >>> p(x=2)
      49
      >>>
      >>> p(0.5)
      3.25

   -  Escriba un método llamado ``__add__(self, p)``, que evalúe la suma
      de polinomios usando el método ``suma_pol`` definido
      anteriormente. Eso permitirá usar la operación de suma en la
      forma:

   .. code:: python

      >>> p1 = Polinomio([1,2,3,4])
      >>> p2 = Polinomio([1,2,3,4])
      >>> p1 + p2
