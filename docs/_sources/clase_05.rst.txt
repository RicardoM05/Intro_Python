.. _clase_05:

Clase 5: Funciones 
====================


Empacar y desempacar secuencias o diccionarios
----------------------------------------------

Cuando en **Python** creamos una función que acepta un número arbitrario
de argumentos estamos utilizando una habilidad del lenguaje que es el
“empaquetamiento” y “desempaquetamiento” automático de variables.

Al definir un número variable de argumentos de la forma:

.. code:: python

   def f(*v):
   ...

y luego utilizarla en alguna de las formas:

.. code:: python

   f(1)
   f(1,'hola')
   f(a,2,3.5, 'hola')

**Python** automáticamente convierte los argumentos en una única tupla:

.. code:: python

   f(1)                 --> v = (1,)
   f(1,'hola')          --> v = (1,'hola')
   f(a,2,3.5, 'hola')   --> v = (a,2,3.5,'hola')

Análogamente, cuando utilizamos funciones podemos desempacar múltiples
valores en los argumentos de llamada a las funciones.

Si definimos una función que recibe un número determinado de argumentos

.. code:: python

   def g(a, b, c):
   ...

y definimos una lista (o tupla)

.. code:: python

   t1 = [a1, b1, c1]

podemos realizar la llamada a la función utilizando la notación
“asterisco” o “estrella”

.. code:: python

   g(*t1)             -->  g(a1, b1, c1)

Esta notación no se puede utilizar en cualquier contexto. Por ejemplo,
es un error tratar de hacer

.. code:: python

   t2 = *t1

pero en el contexto de funciones podemos “desempacarlos” para
convertirlos en varios argumentos que acepta la función usando la
expresión con asterisco. Veamos lo que esto quiere decir con la función
``caida_libre()`` definida anteriormente

.. code:: python

    def caida_libre(t, h0, v0 = 0., g=9.8):
      """Devuelve la velocidad y la posición de una partícula en
      caída libre para condiciones iniciales dadas
    
      Parameters
      ----------
      t : float
          el tiempo al que queremos realizar el cálculo
      h0: float 
          la altura inicial
      v0: float (opcional)
          la velocidad inicial (default = 0.0)
       g: float (opcional)
          valor de la aceleración de la gravedad (default = 9.8)
    
      Returns
      -------
      (v,h):  tuple of floats
           v= v0 - g*t
           h= h0 - v0*t -g*t^2/2
      
      """
      v = v0 - g*t
      h = h0 - v0*t - g*t**2/2.
      return v,h


.. code:: python

    datos = (5.4, 1000., 0.)        # Una lista (tuple en realidad)
    print (caida_libre(*datos))


.. parsed-literal::

    (-52.92000000000001, 857.116)


En la llamada a la función, la expresión ``*datos`` le indica al
intérprete Python que la secuencia (tuple) debe convertirse en una
sucesión de argumentos, que es lo que acepta la función.

Similarmente, para desempacar un diccionario usamos la notación
``**diccionario``:

.. code:: python

    # diccionario, caída libre en la luna
    otros_datos = {'t':5.4, 'h0': 1000., "g" : 1.625} 
    v, h = caida_libre(**otros_datos)
    print ('v={}, h={}'.format(v,h))



.. parsed-literal::

    v=-8.775, h=976.3075


En resumen:

-  la notación ``(*datos)`` convierte la tuple (o lista) en los tres
   argumentos que acepta la función caída libre. Los siguientes llamados
   son equivalentes:

.. code:: python

   caida_libre(*datos)
   caida_libre(datos[0], datos[1], datos[2])
   caida_libre(5.4, 1000., 0.)

-  la notación ``(**otros_datos)`` desempaca el diccionario en pares
   ``clave=valor``, siendo equivalentes los dos llamados:

.. code:: python

   caida_libre(**otros_datos)
   caida_libre(t=5.4, h0=1000., g=0.2)

Funciones que devuelven funciones
---------------------------------

Las funciones pueden ser pasadas como argumento y pueden ser retornadas
por una función, como cualquier otro objeto (números, listas, tuples,
cadenas de caracteres, diccionarios, etc). Veamos un ejemplo simple de
funciones que devuelven una función:

.. code:: python

    def crear_potencia(n):
      "Devuelve la función x^n"
      def potencia(x):
        "potencia {}-esima de x".format(n)
        return x**n
      return potencia

.. code:: python

    f = crear_potencia(3)
    cubos = [f(j) for j in range(5)]

--------------

Ejercicios 05 (a)
-----------------

1. Escriba una función ``crear_sen(A, w)`` que acepte dos números reales
   :math:`A, w` como argumentos y devuelva la función ``f(x)``.

Al evaluar la función ``f`` en un dado valor :math:`x` debe dar el
resultado: :math:`f(x) = A \sin(w x)` tal que se pueda utilizar de la
siguiente manera:

.. code:: python

   f = crear_sen(3, 1.5)
   f(2)          # Debería imprimir el resultado de 3*sin(1.5*2)=0.4233600241796016

2. Utilizando conjuntos (``set``), escriba una función que compruebe si
   un string contiene todas las vocales. La función debe devolver
   ``True`` o ``False``.

--------------

Funciones que toman como argumento una función
----------------------------------------------

.. code:: python

    def aplicar_fun(f, L):
      """Aplica la función f a cada elemento del iterable L y devuelve una lista con los resultados.
      
      IMPORTANTE: Notar que no se realiza ninguna comprobación de validez
      """
      return [f(x) for x in L]

.. code:: python

    import math as m
    Lista = list(range(1,10))
    t = aplicar_fun(m.sin, Lista)

.. code:: python

    t




.. parsed-literal::

    [0.8414709848078965,
     0.9092974268256817,
     0.1411200080598672,
     -0.7568024953079282,
     -0.9589242746631385,
     -0.27941549819892586,
     0.6569865987187891,
     0.9893582466233818,
     0.4121184852417566]



El ejemplo anterior se podría escribir

.. code:: python

    Lista = list(range(5))
    aplicar_fun(crear_potencia(3), Lista)




.. parsed-literal::

    [0, 1, 8, 27, 64]



Notar que definimos la función ``aplicar_fun()`` que recibe una función
y una secuencia, pero no necesariamente una lista, por lo que podemos
aplicarla directamente a ``range``:

.. code:: python

    aplicar_fun(crear_potencia(3), range(5)) 




.. parsed-literal::

    [0, 1, 8, 27, 64]



Además, debido a su definición, el primer argumento de la función
``aplicar_fun()`` no está restringida a funciones numéricas pero al
usarla tenemos que asegurar que la función y el iterable (lista) que
pasamos como argumentos son compatibles.

Veamos otro ejemplo:

.. code:: python

    s = ['hola', 'chau']
    print(aplicar_fun(str.upper, s))


.. parsed-literal::

    ['HOLA', 'CHAU']


donde ``str.upper`` es una función definida en **Python**, que convierte
a mayúsculas el string dado ``str.upper('hola') = 'HOLA'``.

Aplicacion 1: Ordenamiento de listas
------------------------------------

Consideremos el problema del ordenamiento de una lista de strings. Como
vemos el resultado usual no es necesariamente el deseado

.. code:: python

    s1 = ['Estudiantes', 'caballeros', 'Python', 'Curso', 'pc', 'aereo']
    print(s1)
    print(sorted(s1))


.. parsed-literal::

    ['Estudiantes', 'caballeros', 'Python', 'Curso', 'pc', 'aereo']
    ['Curso', 'Estudiantes', 'Python', 'aereo', 'caballeros', 'pc']


Acá ``sorted`` es una función, similar al método ``str.sort()`` que
mencionamos anteriormente, con la diferencia que devuelve una nueva
lista con los elementos ordenados. Como los elementos son *strings*, la
comparación se hace respecto a su posición en el abecedario. En este
caso no es lo mismo mayúsculas o minúsculas.

.. code:: python

    s2 = [s.lower() for s in s1]
    print(s2)
    print(sorted(s2))


.. parsed-literal::

    ['estudiantes', 'caballeros', 'python', 'curso', 'pc', 'aereo']
    ['aereo', 'caballeros', 'curso', 'estudiantes', 'pc', 'python']


Posiblemente queremos el orden que obtuvimos en segundo lugar pero con
los elementos dados originalmente (con sus mayúsculas y minúsculas
originales). Para poder modificar el modo en que se ordenan los
elementos, la función ``sorted`` (y el método ``sort``) tienen el
argumento opcional ``key``

.. code:: python

    help(sorted)


.. parsed-literal::

    Help on built-in function sorted in module builtins:
    
    sorted(iterable, /, *, key=None, reverse=False)
        Return a new list containing all items from the iterable in ascending order.
        
        A custom key function can be supplied to customize the sort order, and the
        reverse flag can be set to request the result in descending order.
    


Como vemos tiene un argumento opcional ``key`` que es una función.
Veamos algunos ejemplos de su uso

.. code:: python

    sorted(s1, key=str.lower)




.. parsed-literal::

    ['aereo', 'caballeros', 'Curso', 'Estudiantes', 'pc', 'Python']



Como vemos, los strings están ordenados adecuadamente. Si queremos
ordenarlos por longitud de la palabra

.. code:: python

    sorted(s1, key=len)




.. parsed-literal::

    ['pc', 'Curso', 'aereo', 'Python', 'caballeros', 'Estudiantes']



Supongamos que queremos ordenarla alfabéticamente por la segunda letra

.. code:: python

    def segunda(a):
      return a[1]
    
    sorted(s1, key=segunda)




.. parsed-literal::

    ['caballeros', 'pc', 'aereo', 'Estudiantes', 'Curso', 'Python']



Funciones anónimas
------------------

En ocasiones como esta suele ser más rápido (o conveniente) definir la
función, que se va a utilizar una única vez, sin darle un nombre. Estas
se llaman funciones *lambda*, y el ejemplo anterior se escribiría

.. code:: python

    sorted(s1, key=lambda a: a[1])




.. parsed-literal::

    ['caballeros', 'pc', 'aereo', 'Estudiantes', 'Curso', 'Python']



Si queremos ordenarla alfabéticamente empezando desde la última letra:

.. code:: python

    sorted(s1, key=lambda a: a[::-1])




.. parsed-literal::

    ['pc', 'Python', 'aereo', 'Curso', 'Estudiantes', 'caballeros']



Ejemplo 1: Integración numérica
-------------------------------

Veamos en más detalle el caso de funciones que reciben como argumento
otra función, estudiando un caso usual: una función de integración debe
recibir como argumento al menos una función a integrar y los límites de
integración:

.. code:: python

    # %load scripts/05_ejemplo_1.py
    def integrate_simps(f, a, b, N=10):
      """Calcula numéricamente la integral de la función en el intervalo dado
      utilizando la regla de Simpson
    
      Keyword Arguments:
      f -- Función a integrar
      a -- Límite inferior
      b -- Límite superior
      N -- El intervalo se separa en 2*N intervalos
      """
      h = (b - a) / (2 * N)
      I = f(a) - f(b)
      for j in range(1, N + 1):
        x2j = a + 2 * j * h
        x2jm1 = a + (2 * j - 1) * h
        I += 2 * f(x2j) + 4 * f(x2jm1)
      return I * h / 3


En este ejemplo programamos la fórmula de integración de Simpson para
obtener la integral de una función ``f(x)`` provista por el usuario, en
un dado intervalo:

.. math::


   \int _{a}^{b}f(x)\,dx\approx \frac{h}{3} \bigg[ f(x_{0}) + 2 \sum_{j=1}^{n/2} f(x_{2j}) + 4 \sum_{j=1}^{n/2} f(x_{2j-1}) - f(x_{n})\bigg]

¿Cómo usamos la función de integración?

.. code:: python

    def potencia2(x):
      return x**2
    
    integrate_simps(potencia2, 0, 3, 7)




.. parsed-literal::

    9.0



Acá definimos una función, y se la pasamos como argumento a la función
de integración.

Uso de funciones anónimas
~~~~~~~~~~~~~~~~~~~~~~~~~

Veamos como sería el uso de funciones anónimas en este contexto

.. code:: python

    integrate_simps(lambda x: x**2, 0, 3, 7)




.. parsed-literal::

    9.0



La notación es un poco más corta, que es cómodo pero no muy relevante
para un caso. Si queremos, por ejemplo, aplicar el integrador a una
familia de funciones la notación se simplifica notablemente:

.. code:: python

    print('Integrales:')
    a = 0
    b = 3
    for n in range(6):
      I = integrate_simps(lambda x: (n + 1) * x**n, a, b, 10)
      print('I ( {} x^{}, {}, {} ) = {:.5f}'.format(n + 1, n, a, b, I))



.. parsed-literal::

    Integrales:
    I ( 1 x^0, 0, 3 ) = 3.00000
    I ( 2 x^1, 0, 3 ) = 9.00000
    I ( 3 x^2, 0, 3 ) = 27.00000
    I ( 4 x^3, 0, 3 ) = 81.00000
    I ( 5 x^4, 0, 3 ) = 243.00101
    I ( 6 x^5, 0, 3 ) = 729.00911


Este es un ejemplo de uso de las funciones anónimas ``lambda``.
Recordemos que la forma general de las funciones ``lambda`` es:

.. code:: python

   lambda x,y,z: expresión_de(x,y,z)

por ejemplo en el ejemplo anterior, para calcular :math:`(n+1) x^n`,
hicimos:

.. code:: python

   lambda x: (n+1) * x**n

Ejemplo 2: Polinomio interpolador
---------------------------------

Veamos ahora una función que retorna una función. Supongamos que tenemos
una tabla de puntos ``(x,y)`` por los que pasan nuestros datos y
queremos interpolar los datos con un polinomio.

Sabemos que dados ``N`` puntos, hay un único polinomio de grado ``N``
que pasa por todos los puntos. En este ejemplo utilizamos la fórmula de
Lagrange para obtenerlo.

.. code:: python

    %load scripts/ejemplo_05_2.py

.. code:: python

    # %load scripts/ejemplo_05_2.py
    def polinomio_interp(x, y):
      """Devuelve el polinomio interpolador que pasa por los puntos (x_i, y_i)
    
        Warning: La implementación es numéricamente inestable. Funciona para algunos puntos (menor a 20)
    
      Keyword Arguments:
      x -- Lista con los valores de x
      y -- Lista con los valores de y
      """
    
      M = len(x)
    
      def polin(xx):
        """Evalúa el polinomio interpolador de Lagrange"""
        P = 0
    
        for j in range(M):
          pt = y[j]
          for k in range(M):
            if k == j:
              continue
            fac = x[j] - x[k]
            pt *= (xx - x[k]) / fac
          P += pt
        return P
    
      return polin


Lo que obtenemos al llamar a esta función es una función

.. code:: python

    f = polinomio_interp([0,1], [0,2])

.. code:: python

    f




.. parsed-literal::

    <function __main__.polinomio_interp.<locals>.polin(xx)>



.. code:: python

    help(f)


.. parsed-literal::

    Help on function polin in module __main__:
    
    polin(xx)
        Evalúa el polinomio interpolador de Lagrange
    


.. code:: python

    f(3.4)




.. parsed-literal::

    6.8



Este es el resultado esperado porque queremos el polinomio que pasa por
dos puntos (una recta), y en este caso es la recta :math:`y = 2x`.
Veamos cómo usarlo, en forma más general:

.. code:: python

    # %load scripts/ejemplo_05_3
    #from ejemplo_05_2 import polinomio_interp
    
    xmax = 5
    step = 0.2
    N = int(5 / step)
    
    x2, y2 = [1, 2, 3], [1, 4, 9]   # x^2
    f2 = polinomio_interp(x2, y2)
    
    x3, y3 = [0, 1, 2, 3], [0, 2, 16, 54]  # 2 x^3
    f3 = polinomio_interp(x3, y3)
    
    print('\n x   f2(x)   f3(x)\n' + 18 * '-')
    for j in range(N):
      x = step * j
      print('{:.1f}  {:5.2f}  {:6.2f}'.format(x, f2(x), f3(x)))



.. parsed-literal::

    
     x   f2(x)   f3(x)
    ------------------
    0.0   0.00    0.00
    0.2   0.04    0.02
    0.4   0.16    0.13
    0.6   0.36    0.43
    0.8   0.64    1.02
    1.0   1.00    2.00
    1.2   1.44    3.46
    1.4   1.96    5.49
    1.6   2.56    8.19
    1.8   3.24   11.66
    2.0   4.00   16.00
    2.2   4.84   21.30
    2.4   5.76   27.65
    2.6   6.76   35.15
    2.8   7.84   43.90
    3.0   9.00   54.00
    3.2  10.24   65.54
    3.4  11.56   78.61
    3.6  12.96   93.31
    3.8  14.44  109.74
    4.0  16.00  128.00
    4.2  17.64  148.18
    4.4  19.36  170.37
    4.6  21.16  194.67
    4.8  23.04  221.18


--------------

Ejercicios 05 (b)
-----------------

3. Escriba una serie de funciones que permitan trabajar con polinomios.
   Vamos a representar a un polinomio como una lista de números reales,
   donde cada elemento corresponde a un coeficiente que acompaña una
   potencia

   -  Una función que devuelva el orden del polinomio (un número entero)
   -  Una función que sume dos polinomios y devuelva un polinomio
      (objeto del mismo tipo)
   -  Una función que multiplique dos polinomios y devuelva el resultado
      en otro polinomio
   -  Una función devuelva la derivada del polinomio (otro polinomio).
   -  Una función que, acepte el polinomio y devuelva la función
      correspondiente.

4. Vamos a describir un **sudoku** como un array bidimensional de
   ``9x9`` números, cada uno de ellos entre 1 y 4.

   Escribir una función que tome como argumento una grilla (Lista
   bidimensional de ``9x9``) y devuelva verdadero si los números
   corresponden a la resolución correcta y falso en caso contrario.
   Recordamos que para que sea válido debe cumplirse que:

   -  Los números están entre 1 y 9
   -  En cada fila no deben repetirse
   -  En cada columna no deben repetirse
   -  En todas las regiones de 3x3 que no se solapan, empezando de
      cualquier esquina, no deben repetirse.

--------------

Funciones que aceptan y devuelven funciones (Decoradores)
---------------------------------------------------------

Consideremos la siguiente función ``mas_uno``, que toma como argumento
una función y devuelve otra función.

.. code:: python

    def mas_uno(func):
      "Devuelve una función"
      def fun(args):
        "Agrega 1 a cada uno de los elementos y luego aplica la función"
        xx = [x+1 for x in args]
        y= func(xx)
        return y
      return fun

.. code:: python

    ssum= mas_uno(sum)                 # h es una función
    mmin= mas_uno(min)                 # f es una función
    mmax= mas_uno(max)                 # g es una función

.. code:: python

    a = [0, 1, 3.3, 5, 7.5, 2.2]
    print(a)
    print(sum(a), ssum(a))
    print(min(a), mmin(a))
    print(max(a), mmax(a))
    


Notación para decoradores
~~~~~~~~~~~~~~~~~~~~~~~~~

Podemos aplicar la función tanto a funciones “intrínsecas” como a
funciones definidas por nosotros

.. code:: python

    def parabola(v):
      return [x**2 + 2*x for x in v]


.. code:: python

    mparabola = mas_uno(parabola)

.. code:: python

    print(parabola(a))
    print(mparabola(a))

Notemos que al decorar una función estamos creando una enteramente nueva

.. code:: python

    del parabola                    # Borramos el objeto

.. code:: python

    parabola(a)

.. code:: python

    mparabola(a)

Algunas veces queremos eso, renombrar la función original (se lo llama
“decorar”):

.. code:: python

    def parabola(v):
      return [x**2 + 2*x for x in v]
    mparabola = mas_uno(parabola)
    del parabola
    parabola = mparabola
    del mparabola

.. code:: python

    Son un montón de líneas, podemos simplificarlo:

.. code:: python

    def parabola(v):
      return [x**2 + 2*x for x in v]
    parabola = mas_uno(parabola)

Esta es una situación que puede darse frecuentemente en algunas áreas.
Se decidió simplificar la notación, introduciendo el uso de @. Lo
anterior puede escribirse como:

.. code:: python

    @mas_uno
    def mi_parabola(v):
      return [x**2 + 2*x for x in v]


La única restricción para utilizar esta notación es que la línea con el
decorador debe estar inmediatamente antes de la definición de la función
a decorar

.. code:: python

    mi_parabola(a)

Algunos Usos de decoradores
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    mi_parabola(3)

El problema aquí es que definimos la función para tomar como argumentos
una lista (o al menos un iterable de números) y estamos tratando de
aplicarla a un número. Podemos definir un decorador para asegurarnos que
el tipo es correcto (que no es del todo correcto)

.. code:: python

    def test_argumento_list_num(f):
      def check(v):
        if (type(v) == list):
          return f(v)
        else:
          print("Error: El argumento debe ser una lista")
      return check

.. code:: python

    mi_parabola = test_argumento_list_num(mi_parabola)

.. code:: python

    mi_parabola(3)

.. code:: python

    mi_parabola(a)

Supongamos que queremos simplemente extender la función para que sea
válida también con argumentos escalares. Definimos una nueva función que
utilizaremos como decorador

.. code:: python

    def hace_argumento_list(f):
      def check(v):
        "Corrige el argumento si no es una lista"
        if (type(v) == list):
          return f(v)
        else:
          return f([v])
      return check  

.. code:: python

    @hace_argumento_list
    def parabola(v):
      return [x**2 + 2*x for x in v]


.. code:: python

    print(parabola(3))
    print(parabola([3]))


Atrapar y administrar errores
-----------------------------

**Python** tiene incorporado un mecanismo para atrapar errores de
distintos tipos, así como para generar errores que den información al
usuario sobre usos incorrectos del código.

En primer lugar consideremos lo que se llama un error de sintaxis. El
siguiente comando es sintácticamente correcto y el intérprete sabe como
leerlo

.. code:: python

    print("hola")


.. parsed-literal::

    hola


mientras que, si escribimos algo que no está permitido en el lenguaje

.. code:: python

    print("hola"))


::


      File "<ipython-input-22-3e8c6f917d42>", line 1
        print("hola"))
                     ^
    SyntaxError: invalid syntax



El intérprete detecta el error y repite la línea donde lo identifica.
Este tipo de errores debe corregirse para poder seguir con el programa.

Consideremos ahora el código siguiente, que es sintácticamente correcto
pero igualmente causa un error

.. code:: python

    a = 1
    b = 0
    z = a / b


::


    ---------------------------------------------------------------------------

    ZeroDivisionError                         Traceback (most recent call last)

    <ipython-input-23-fd0e24f40c98> in <module>
          1 a = 1
          2 b = 0
    ----> 3 z = a / b
    

    ZeroDivisionError: division by zero


Cuando se encuentra un error, **Python** muestra el lugar en que ocurre
y de qué tipo de error se trata.

.. code:: python

    print (hola)


::


    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    <ipython-input-24-c6948929a301> in <module>
    ----> 1 print (hola)
    

    NameError: name 'hola' is not defined


Este mensaje da un tipo de error diferente. Ambos: ``ZeroDivisionError``
y ``NameError`` son tipos de errores (o excepciones). Hay una larga
lista de tipos de errores que son parte del lenguaje y puede consultarse
en la documentación de `Built-in
Exceptions <https://docs.python.org/3/library/exceptions.html#bltin-exceptions>`__.

Administración de excepciones
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Cuando nuestro programa aumenta en complejidad, aumenta la posibilidad
de encontrar errores. Esto se incrementa si se tiene que interactuar con
otros usuarios o con datos externos. Consideremos el siguiente ejemplo
simple:

.. code:: python

    %cat ../data/ej_clase5.dat


.. parsed-literal::

    1 2
    2 6
    3 9
    4 12
    5.5 30.25


.. code:: python

    with open("../data/ej_clase5.dat") as fi:
      for l in fi:
        t = l.split()
        print("t = {}".format(t))        # Línea sólo para inspección
        m = int(t[0])
        n = int(t[1])
        print("m = {}, n = {}, m x n = {}".format(m,n, m*n))


.. parsed-literal::

    t = ['1', '2']
    m = 1, n = 2, m x n = 2
    t = ['2', '6']
    m = 2, n = 6, m x n = 12
    t = ['3', '9']
    m = 3, n = 9, m x n = 27
    t = ['4', '12']
    m = 4, n = 12, m x n = 48
    t = ['5.5', '30.25']


::


    ---------------------------------------------------------------------------

    ValueError                                Traceback (most recent call last)

    <ipython-input-26-55192d3677b3> in <module>
          3     t = l.split()
          4     print("t = {}".format(t))        # Línea sólo para inspección
    ----> 5     m = int(t[0])
          6     n = int(t[1])
          7     print("m = {}, n = {}, m x n = {}".format(m,n, m*n))


    ValueError: invalid literal for int() with base 10: '5.5'


En este caso se “levanta” una excepción del tipo ``ValueError`` debido a
que este valor (``5.5``) no se puede convertir a ``int``. Podemos
modificar nuestro programa para manejar este error:

.. code:: python

    with open("../data/ej_clase5.dat") as fi:
      for l in fi:
        t = l.split()
        try:
          m = int(t[0])
          n = int(t[1])
          print("m = {}, n = {}, m x n = {}".format(m,n, m*n))
        except:
          print("Error: t = {} no puede convertirse a entero".format(t))
          


.. parsed-literal::

    m = 1, n = 2, m x n = 2
    m = 2, n = 6, m x n = 12
    m = 3, n = 9, m x n = 27
    m = 4, n = 12, m x n = 48
    Error: t = ['5.5', '30.25'] no puede convertirse a entero


En este caso podríamos ser más precisos y especificar el tipo de
excepción que estamos esperando

.. code:: python

    with open("../data/ej_clase5.dat") as fi:
      for l in fi:
        t = l.split()
        try:
          m = int(t[0])
          n = int(t[1])
          print("m = {}, n = {}, m x n = {}".format(m,n, m*n))
        except(ValueError):
          print("Error: t = {} no puede convertirse a entero".format(t))
          


.. parsed-literal::

    m = 1, n = 2, m x n = 2
    m = 2, n = 6, m x n = 12
    m = 3, n = 9, m x n = 27
    m = 4, n = 12, m x n = 48
    Error: t = ['5.5', '30.25'] no puede convertirse a entero


.. code:: python

    with open("../data/ej_clase5.dat") as fi:
      for l in fi:
        t = l.split()
        try:
          m = int(t[0])
          n = int(t[1])
          print("m = {}, n = {}, m x n = {}".format(m,n, m*n))
        except(ValueError):
          print("Error: t = {} no puede convertirse a entero".format(t))
        except(IndexError):
          print('Error: La línea "{}" no contiene un par'.format(l.strip()))
          


.. parsed-literal::

    m = 1, n = 2, m x n = 2
    m = 2, n = 6, m x n = 12
    m = 3, n = 9, m x n = 27
    m = 4, n = 12, m x n = 48
    Error: t = ['5.5', '30.25'] no puede convertirse a entero


La forma general

La declaración ``try`` funciona de la siguiente manera:

-  Primero, se ejecuta el *bloque try* (el código entre las declaración
   ``try`` y ``except``).

-  Si no ocurre ninguna excepción, el *bloque except* se saltea y
   termina la ejecución de la declaración ``try``.

-  Si ocurre una excepción durante la ejecución del *bloque try*, el
   resto del bloque se saltea. Luego, si su tipo coincide con la
   excepción nombrada luego de la palabra reservada ``except``, se
   ejecuta el *bloque except*, y la ejecución continúa luego de la
   declaración ``try``.

-  Si ocurre una excepción que no coincide con la excepción nombrada en
   el ``except``, esta se pasa a declaraciones ``try`` de más afuera; si
   no se encuentra nada que la maneje, es una *excepción no manejada*, y
   la ejecución se frena con un mensaje como los mostrados arriba.

El mecanismo es un poco más complejo, y permite un control más fino que
lo descripto aquí.

“Levantando” excepciones
~~~~~~~~~~~~~~~~~~~~~~~~

Podemos forzar a que nuestro código levante una excepción usando
``raise``. Por ejemplo:

.. code:: python

    x = 1
    if x > 0:
      raise Exception("x = {}, no debería ser positivo".format(x))


::


    ---------------------------------------------------------------------------

    Exception                                 Traceback (most recent call last)

    <ipython-input-30-c3c4a53042e7> in <module>
          1 x = 1
          2 if x > 0:
    ----> 3   raise Exception("x = {}, no debería ser positivo".format(x))
    

    Exception: x = 1, no debería ser positivo


O podemos ser más específicos, y dar el tipo de error adecuado

.. code:: python

    x = 1
    if x > 0:
      raise ValueError("x = {}, no debería ser positivo".format(x))


::


    ---------------------------------------------------------------------------

    ValueError                                Traceback (most recent call last)

    <ipython-input-31-3c0ee90e0415> in <module>
          1 x = 1
          2 if x > 0:
    ----> 3   raise ValueError("x = {}, no debería ser positivo".format(x))
    

    ValueError: x = 1, no debería ser positivo

